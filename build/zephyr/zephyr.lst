
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	b0 0e 00 20 fd 17 00 00 81 3b 00 00 51 18 00 00     ... .....;..Q...
  10:	51 18 00 00 51 18 00 00 51 18 00 00 00 00 00 00     Q...Q...Q.......
	...
  2c:	3d 16 00 00 51 18 00 00 00 00 00 00 f5 15 00 00     =...Q...........
  3c:	69 3b 00 00                                         i;..

00000040 <_irq_vector_table>:
  40:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  50:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  60:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  70:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  80:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  90:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  a0:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  b0:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  c0:	bd 17 00 00 bd 17 00 00 bd 17 00 00 bd 17 00 00     ................
  d0:	bd 17 00 00 e1 03 00 00 bd 17 00 00                 ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b974 	b.w	3dc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	4688      	mov	r8, r1
     118:	2b00      	cmp	r3, #0
     11a:	d14d      	bne.n	1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     11c:	428a      	cmp	r2, r1
     11e:	4694      	mov	ip, r2
     120:	d968      	bls.n	1f4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xaa>
     122:	fab2 f282 	clz	r2, r2
     126:	b152      	cbz	r2, 13e <__udivmoddi4+0x32>
     128:	fa01 f302 	lsl.w	r3, r1, r2
     12c:	f1c2 0120 	rsb	r1, r2, #32
     130:	fa20 f101 	lsr.w	r1, r0, r1
     134:	fa0c fc02 	lsl.w	ip, ip, r2
     138:	ea41 0803 	orr.w	r8, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 451c 	mov.w	r5, ip, lsr #16
     142:	0c21      	lsrs	r1, r4, #16
     144:	fbb8 fef5 	udiv	lr, r8, r5
     148:	fa1f f78c 	uxth.w	r7, ip
     14c:	fb05 831e 	mls	r3, r5, lr, r8
     150:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     154:	fb0e f107 	mul.w	r1, lr, r7
     158:	4299      	cmp	r1, r3
     15a:	d90b      	bls.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     15c:	eb1c 0303 	adds.w	r3, ip, r3
     160:	f10e 30ff 	add.w	r0, lr, #4294967295
     164:	f080 811e 	bcs.w	3a4 <CONFIG_FLASH_SIZE+0x1a4>
     168:	4299      	cmp	r1, r3
     16a:	f240 811b 	bls.w	3a4 <CONFIG_FLASH_SIZE+0x1a4>
     16e:	f1ae 0e02 	sub.w	lr, lr, #2
     172:	4463      	add	r3, ip
     174:	1a5b      	subs	r3, r3, r1
     176:	b2a4      	uxth	r4, r4
     178:	fbb3 f0f5 	udiv	r0, r3, r5
     17c:	fb05 3310 	mls	r3, r5, r0, r3
     180:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     184:	fb00 f707 	mul.w	r7, r0, r7
     188:	42a7      	cmp	r7, r4
     18a:	d90a      	bls.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     18c:	eb1c 0404 	adds.w	r4, ip, r4
     190:	f100 33ff 	add.w	r3, r0, #4294967295
     194:	f080 8108 	bcs.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     198:	42a7      	cmp	r7, r4
     19a:	f240 8105 	bls.w	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     19e:	4464      	add	r4, ip
     1a0:	3802      	subs	r0, #2
     1a2:	1be4      	subs	r4, r4, r7
     1a4:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1a8:	2100      	movs	r1, #0
     1aa:	b11e      	cbz	r6, 1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ac:	40d4      	lsrs	r4, r2
     1ae:	2300      	movs	r3, #0
     1b0:	e9c6 4300 	strd	r4, r3, [r6]
     1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b8:	428b      	cmp	r3, r1
     1ba:	d908      	bls.n	1ce <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x84>
     1bc:	2e00      	cmp	r6, #0
     1be:	f000 80ee 	beq.w	39e <CONFIG_FLASH_SIZE+0x19e>
     1c2:	2100      	movs	r1, #0
     1c4:	e9c6 0500 	strd	r0, r5, [r6]
     1c8:	4608      	mov	r0, r1
     1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1ce:	fab3 f183 	clz	r1, r3
     1d2:	2900      	cmp	r1, #0
     1d4:	d14a      	bne.n	26c <CONFIG_FLASH_SIZE+0x6c>
     1d6:	42ab      	cmp	r3, r5
     1d8:	d302      	bcc.n	1e0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x96>
     1da:	4282      	cmp	r2, r0
     1dc:	f200 80f9 	bhi.w	3d2 <CONFIG_FLASH_SIZE+0x1d2>
     1e0:	1a84      	subs	r4, r0, r2
     1e2:	eb65 0303 	sbc.w	r3, r5, r3
     1e6:	2001      	movs	r0, #1
     1e8:	4698      	mov	r8, r3
     1ea:	2e00      	cmp	r6, #0
     1ec:	d0e2      	beq.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1ee:	e9c6 4800 	strd	r4, r8, [r6]
     1f2:	e7df      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     1f4:	b902      	cbnz	r2, 1f8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xae>
     1f6:	deff      	udf	#255	; 0xff
     1f8:	fab2 f282 	clz	r2, r2
     1fc:	2a00      	cmp	r2, #0
     1fe:	f040 8091 	bne.w	324 <CONFIG_FLASH_SIZE+0x124>
     202:	eba1 050c 	sub.w	r5, r1, ip
     206:	ea4f 471c 	mov.w	r7, ip, lsr #16
     20a:	fa1f fe8c 	uxth.w	lr, ip
     20e:	2101      	movs	r1, #1
     210:	fbb5 f3f7 	udiv	r3, r5, r7
     214:	fb07 5013 	mls	r0, r7, r3, r5
     218:	0c25      	lsrs	r5, r4, #16
     21a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     21e:	fb0e f003 	mul.w	r0, lr, r3
     222:	42a8      	cmp	r0, r5
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	eb1c 0505 	adds.w	r5, ip, r5
     22a:	f103 38ff 	add.w	r8, r3, #4294967295
     22e:	d202      	bcs.n	236 <CONFIG_FLASH_SIZE+0x36>
     230:	42a8      	cmp	r0, r5
     232:	f200 80cb 	bhi.w	3cc <CONFIG_FLASH_SIZE+0x1cc>
     236:	4643      	mov	r3, r8
     238:	1a2d      	subs	r5, r5, r0
     23a:	b2a4      	uxth	r4, r4
     23c:	fbb5 f0f7 	udiv	r0, r5, r7
     240:	fb07 5510 	mls	r5, r7, r0, r5
     244:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     248:	fb0e fe00 	mul.w	lr, lr, r0
     24c:	45a6      	cmp	lr, r4
     24e:	d908      	bls.n	262 <CONFIG_FLASH_SIZE+0x62>
     250:	eb1c 0404 	adds.w	r4, ip, r4
     254:	f100 35ff 	add.w	r5, r0, #4294967295
     258:	d202      	bcs.n	260 <CONFIG_FLASH_SIZE+0x60>
     25a:	45a6      	cmp	lr, r4
     25c:	f200 80bb 	bhi.w	3d6 <CONFIG_FLASH_SIZE+0x1d6>
     260:	4628      	mov	r0, r5
     262:	eba4 040e 	sub.w	r4, r4, lr
     266:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     26a:	e79e      	b.n	1aa <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x60>
     26c:	f1c1 0720 	rsb	r7, r1, #32
     270:	408b      	lsls	r3, r1
     272:	fa22 fc07 	lsr.w	ip, r2, r7
     276:	ea4c 0c03 	orr.w	ip, ip, r3
     27a:	fa20 f407 	lsr.w	r4, r0, r7
     27e:	fa05 f301 	lsl.w	r3, r5, r1
     282:	431c      	orrs	r4, r3
     284:	40fd      	lsrs	r5, r7
     286:	ea4f 491c 	mov.w	r9, ip, lsr #16
     28a:	fa00 f301 	lsl.w	r3, r0, r1
     28e:	fbb5 f8f9 	udiv	r8, r5, r9
     292:	0c20      	lsrs	r0, r4, #16
     294:	fa1f fe8c 	uxth.w	lr, ip
     298:	fb09 5518 	mls	r5, r9, r8, r5
     29c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2a0:	fb08 f00e 	mul.w	r0, r8, lr
     2a4:	42a8      	cmp	r0, r5
     2a6:	fa02 f201 	lsl.w	r2, r2, r1
     2aa:	d90b      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2ac:	eb1c 0505 	adds.w	r5, ip, r5
     2b0:	f108 3aff 	add.w	sl, r8, #4294967295
     2b4:	f080 8088 	bcs.w	3c8 <CONFIG_FLASH_SIZE+0x1c8>
     2b8:	42a8      	cmp	r0, r5
     2ba:	f240 8085 	bls.w	3c8 <CONFIG_FLASH_SIZE+0x1c8>
     2be:	f1a8 0802 	sub.w	r8, r8, #2
     2c2:	4465      	add	r5, ip
     2c4:	1a2d      	subs	r5, r5, r0
     2c6:	b2a4      	uxth	r4, r4
     2c8:	fbb5 f0f9 	udiv	r0, r5, r9
     2cc:	fb09 5510 	mls	r5, r9, r0, r5
     2d0:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2d4:	fb00 fe0e 	mul.w	lr, r0, lr
     2d8:	45ae      	cmp	lr, r5
     2da:	d908      	bls.n	2ee <CONFIG_FLASH_SIZE+0xee>
     2dc:	eb1c 0505 	adds.w	r5, ip, r5
     2e0:	f100 34ff 	add.w	r4, r0, #4294967295
     2e4:	d26c      	bcs.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2e6:	45ae      	cmp	lr, r5
     2e8:	d96a      	bls.n	3c0 <CONFIG_FLASH_SIZE+0x1c0>
     2ea:	3802      	subs	r0, #2
     2ec:	4465      	add	r5, ip
     2ee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     2f2:	fba0 9402 	umull	r9, r4, r0, r2
     2f6:	eba5 050e 	sub.w	r5, r5, lr
     2fa:	42a5      	cmp	r5, r4
     2fc:	46c8      	mov	r8, r9
     2fe:	46a6      	mov	lr, r4
     300:	d356      	bcc.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     302:	d053      	beq.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     304:	b15e      	cbz	r6, 31e <CONFIG_FLASH_SIZE+0x11e>
     306:	ebb3 0208 	subs.w	r2, r3, r8
     30a:	eb65 050e 	sbc.w	r5, r5, lr
     30e:	fa05 f707 	lsl.w	r7, r5, r7
     312:	fa22 f301 	lsr.w	r3, r2, r1
     316:	40cd      	lsrs	r5, r1
     318:	431f      	orrs	r7, r3
     31a:	e9c6 7500 	strd	r7, r5, [r6]
     31e:	2100      	movs	r1, #0
     320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     324:	f1c2 0320 	rsb	r3, r2, #32
     328:	fa20 f103 	lsr.w	r1, r0, r3
     32c:	fa0c fc02 	lsl.w	ip, ip, r2
     330:	fa25 f303 	lsr.w	r3, r5, r3
     334:	4095      	lsls	r5, r2
     336:	430d      	orrs	r5, r1
     338:	ea4f 471c 	mov.w	r7, ip, lsr #16
     33c:	fa1f fe8c 	uxth.w	lr, ip
     340:	fbb3 f1f7 	udiv	r1, r3, r7
     344:	fb07 3011 	mls	r0, r7, r1, r3
     348:	0c2b      	lsrs	r3, r5, #16
     34a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     34e:	fb01 f00e 	mul.w	r0, r1, lr
     352:	4298      	cmp	r0, r3
     354:	fa04 f402 	lsl.w	r4, r4, r2
     358:	d908      	bls.n	36c <CONFIG_FLASH_SIZE+0x16c>
     35a:	eb1c 0303 	adds.w	r3, ip, r3
     35e:	f101 38ff 	add.w	r8, r1, #4294967295
     362:	d22f      	bcs.n	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     364:	4298      	cmp	r0, r3
     366:	d92d      	bls.n	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     368:	3902      	subs	r1, #2
     36a:	4463      	add	r3, ip
     36c:	1a1b      	subs	r3, r3, r0
     36e:	b2ad      	uxth	r5, r5
     370:	fbb3 f0f7 	udiv	r0, r3, r7
     374:	fb07 3310 	mls	r3, r7, r0, r3
     378:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     37c:	fb00 f30e 	mul.w	r3, r0, lr
     380:	42ab      	cmp	r3, r5
     382:	d908      	bls.n	396 <CONFIG_FLASH_SIZE+0x196>
     384:	eb1c 0505 	adds.w	r5, ip, r5
     388:	f100 38ff 	add.w	r8, r0, #4294967295
     38c:	d216      	bcs.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     38e:	42ab      	cmp	r3, r5
     390:	d914      	bls.n	3bc <CONFIG_FLASH_SIZE+0x1bc>
     392:	3802      	subs	r0, #2
     394:	4465      	add	r5, ip
     396:	1aed      	subs	r5, r5, r3
     398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     39c:	e738      	b.n	210 <CONFIG_FLASH_SIZE+0x10>
     39e:	4631      	mov	r1, r6
     3a0:	4630      	mov	r0, r6
     3a2:	e707      	b.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     3a4:	4686      	mov	lr, r0
     3a6:	e6e5      	b.n	174 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2a>
     3a8:	4618      	mov	r0, r3
     3aa:	e6fa      	b.n	1a2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x58>
     3ac:	454b      	cmp	r3, r9
     3ae:	d2a9      	bcs.n	304 <CONFIG_FLASH_SIZE+0x104>
     3b0:	ebb9 0802 	subs.w	r8, r9, r2
     3b4:	eb64 0e0c 	sbc.w	lr, r4, ip
     3b8:	3801      	subs	r0, #1
     3ba:	e7a3      	b.n	304 <CONFIG_FLASH_SIZE+0x104>
     3bc:	4640      	mov	r0, r8
     3be:	e7ea      	b.n	396 <CONFIG_FLASH_SIZE+0x196>
     3c0:	4620      	mov	r0, r4
     3c2:	e794      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3c4:	4641      	mov	r1, r8
     3c6:	e7d1      	b.n	36c <CONFIG_FLASH_SIZE+0x16c>
     3c8:	46d0      	mov	r8, sl
     3ca:	e77b      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     3cc:	3b02      	subs	r3, #2
     3ce:	4465      	add	r5, ip
     3d0:	e732      	b.n	238 <CONFIG_FLASH_SIZE+0x38>
     3d2:	4608      	mov	r0, r1
     3d4:	e709      	b.n	1ea <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa0>
     3d6:	4464      	add	r4, ip
     3d8:	3802      	subs	r0, #2
     3da:	e742      	b.n	262 <CONFIG_FLASH_SIZE+0x62>

000003dc <__aeabi_idiv0>:
     3dc:	4770      	bx	lr
     3de:	bf00      	nop

000003e0 <i2s_isr_handler>:
static uint32_t m_buffer_rx32u[I2S_DATA_BLOCK_WORDS];
static int32_t tmp[I2S_DATA_BLOCK_WORDS];
static nrfx_i2s_buffers_t initial_buffers;
static bool data_ready_flag = false;

ISR_DIRECT_DECLARE(i2s_isr_handler)
     3e0:	4668      	mov	r0, sp
     3e2:	f020 0107 	bic.w	r1, r0, #7
     3e6:	468d      	mov	sp, r1
     3e8:	b501      	push	{r0, lr}
{
  //printk("isr fired...\n");
	data_ready_flag = false;
     3ea:	4b06      	ldr	r3, [pc, #24]	; (404 <CONFIG_MAIN_STACK_SIZE+0x4>)
     3ec:	2200      	movs	r2, #0
     3ee:	701a      	strb	r2, [r3, #0]
	nrfx_i2s_irq_handler();
     3f0:	f002 fb28 	bl	2a44 <nrfx_i2s_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
     3f4:	f001 f968 	bl	16c8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
     3f8:	f001 fb00 	bl	19fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(i2s_isr_handler)
     3fc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
     400:	4685      	mov	sp, r0
     402:	4770      	bx	lr
     404:	20000aa8 	.word	0x20000aa8

00000408 <data_handler>:
}

static void data_handler(nrfx_i2s_buffers_t const *p_released, uint32_t status)
{
  //printk("handling new data...\n");
	if (NRFX_I2S_STATUS_NEXT_BUFFERS_NEEDED == status)
     408:	2901      	cmp	r1, #1
{
     40a:	b510      	push	{r4, lr}
     40c:	4604      	mov	r4, r0
	if (NRFX_I2S_STATUS_NEXT_BUFFERS_NEEDED == status)
     40e:	d108      	bne.n	422 <data_handler+0x1a>
	{
		nrfx_err_t err = nrfx_i2s_next_buffers_set(&initial_buffers);
     410:	4807      	ldr	r0, [pc, #28]	; (430 <data_handler+0x28>)
     412:	f002 fadf 	bl	29d4 <nrfx_i2s_next_buffers_set>
		if (err != NRFX_SUCCESS)
     416:	4b07      	ldr	r3, [pc, #28]	; (434 <data_handler+0x2c>)
     418:	4298      	cmp	r0, r3
     41a:	d002      	beq.n	422 <data_handler+0x1a>
		{
			printk("Error!, continuing running as if nothing happened, but you should probably investigate.\n");
     41c:	4806      	ldr	r0, [pc, #24]	; (438 <data_handler+0x30>)
     41e:	f003 f9f0 	bl	3802 <printk>
		}
	}
	if (p_released)
     422:	b124      	cbz	r4, 42e <data_handler+0x26>
	{
		if (p_released->p_rx_buffer != NULL)
     424:	6823      	ldr	r3, [r4, #0]
     426:	b113      	cbz	r3, 42e <data_handler+0x26>
		{
			data_ready_flag = true; //This is used in print_sound()
     428:	4b04      	ldr	r3, [pc, #16]	; (43c <data_handler+0x34>)
     42a:	2201      	movs	r2, #1
     42c:	701a      	strb	r2, [r3, #0]
		}
	}
}
     42e:	bd10      	pop	{r4, pc}
     430:	20000130 	.word	0x20000130
     434:	0bad0000 	.word	0x0bad0000
     438:	00004250 	.word	0x00004250
     43c:	20000aa8 	.word	0x20000aa8

00000440 <print_sound>:

void print_sound()
{
     440:	b570      	push	{r4, r5, r6, lr}
	while (!data_ready_flag)
     442:	4d0d      	ldr	r5, [pc, #52]	; (478 <print_sound+0x38>)
     444:	782b      	ldrb	r3, [r5, #0]
     446:	b193      	cbz	r3, 46e <print_sound+0x2e>
    //printk("waiting...\n");
		//Wait for data. Since we do not want I2S_DATA_BLOCK_WORDS amount of prints inside the interrupt.
	}
  //printk("Printing sound...\n");
	//nrfx_i2s_stop();
	data_ready_flag = false;
     448:	2400      	movs	r4, #0
     44a:	702c      	strb	r4, [r5, #0]
	/** Print the raw data from the I2S microphone */
	
	for (int i = 0; i < I2S_DATA_BLOCK_WORDS; i++)
	{
    //shift by 18 from mic datasheet
		printk("%d, \n", m_buffer_rx32u[i] >> 6); //The audio is automatically saved in m_buffer_rx32u by the interrupt
     44c:	4e0b      	ldr	r6, [pc, #44]	; (47c <print_sound+0x3c>)
     44e:	4d0c      	ldr	r5, [pc, #48]	; (480 <print_sound+0x40>)
     450:	f855 1b04 	ldr.w	r1, [r5], #4
     454:	4630      	mov	r0, r6
     456:	0989      	lsrs	r1, r1, #6
	for (int i = 0; i < I2S_DATA_BLOCK_WORDS; i++)
     458:	3401      	adds	r4, #1
		printk("%d, \n", m_buffer_rx32u[i] >> 6); //The audio is automatically saved in m_buffer_rx32u by the interrupt
     45a:	f003 f9d2 	bl	3802 <printk>
	for (int i = 0; i < I2S_DATA_BLOCK_WORDS; i++)
     45e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
     462:	d1f5      	bne.n	450 <print_sound+0x10>
	// 	printk("%d, ", tmp[i]);
	// 	k_sleep(K_MSEC(16));
	// }
	// printk("\n\n");
	// /**  End of formatted data print*/
}
     464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("\n\n");
     468:	4806      	ldr	r0, [pc, #24]	; (484 <print_sound+0x44>)
     46a:	f003 b9ca 	b.w	3802 <printk>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     46e:	2100      	movs	r1, #0
     470:	2021      	movs	r0, #33	; 0x21
     472:	f002 ffd3 	bl	341c <z_impl_k_sleep>
     476:	e7e5      	b.n	444 <print_sound+0x4>
     478:	20000aa8 	.word	0x20000aa8
     47c:	000042a9 	.word	0x000042a9
     480:	20000138 	.word	0x20000138
     484:	000042af 	.word	0x000042af

00000488 <get_sound_init>:

nrfx_err_t get_sound_init()
{
     488:	b570      	push	{r4, r5, r6, lr}
	IRQ_DIRECT_CONNECT(I2S_IRQn, 0, i2s_isr_handler, 0);
     48a:	2200      	movs	r2, #0
	memset(&m_buffer_rx32u, 0, sizeof(m_buffer_rx32u));
     48c:	4c1e      	ldr	r4, [pc, #120]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
	initial_buffers.p_rx_buffer = m_buffer_rx32u;

	//YOu should probably change this config to fit your I2S microphone and audio preferences.
	nrfx_i2s_config_t config =
     48e:	4d1f      	ldr	r5, [pc, #124]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
	initial_buffers.p_rx_buffer = m_buffer_rx32u;
     490:	4e1f      	ldr	r6, [pc, #124]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
{
     492:	b086      	sub	sp, #24
	IRQ_DIRECT_CONNECT(I2S_IRQn, 0, i2s_isr_handler, 0);
     494:	4611      	mov	r1, r2
     496:	2025      	movs	r0, #37	; 0x25
     498:	f001 f8fe 	bl	1698 <z_arm_irq_priority_set>
	memset(&m_buffer_rx32u, 0, sizeof(m_buffer_rx32u));
     49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
     4a0:	2100      	movs	r1, #0
     4a2:	4620      	mov	r0, r4
     4a4:	f003 fb9a 	bl	3bdc <memset>
	nrfx_i2s_config_t config =
     4a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	initial_buffers.p_rx_buffer = m_buffer_rx32u;
     4aa:	6034      	str	r4, [r6, #0]
	nrfx_i2s_config_t config =
     4ac:	ac01      	add	r4, sp, #4
     4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4b0:	682b      	ldr	r3, [r5, #0]
     4b2:	6023      	str	r3, [r4, #0]
		NRFX_I2S_DEFAULT_CONFIG(I2S_SCK_PIN, I2S_WS_PIN,
								NRFX_I2S_PIN_NOT_USED,
								NRFX_I2S_PIN_NOT_USED, I2S_SD_PIN);

	config.mode = NRF_I2S_MODE_SLAVE;			//Microphone requirement
     4b4:	2301      	movs	r3, #1
     4b6:	f88d 300a 	strb.w	r3, [sp, #10]
	config.ratio = NRF_I2S_RATIO_64X;			//Microphone requirement
     4ba:	2302      	movs	r3, #2
     4bc:	f88d 3014 	strb.w	r3, [sp, #20]
	config.sample_width = NRF_I2S_SWIDTH_24BIT; //Microphone requirement
     4c0:	f88d 300d 	strb.w	r3, [sp, #13]
	config.mck_setup = NRF_I2S_MCK_32MDIV31;	//Preference     freq = (MCKfreq/ratio) =16.129 KHz.
	config.channels = NRF_I2S_CHANNELS_LEFT;	//Preference
  	config.alignment = NRF_I2S_ALIGN_LEFT;

	nrfx_err_t err_code = nrfx_i2s_init(&config, data_handler);
     4c4:	4913      	ldr	r1, [pc, #76]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
	if (err_code != NRFX_SUCCESS)
     4c6:	4d14      	ldr	r5, [pc, #80]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
	config.mck_setup = NRF_I2S_MCK_32MDIV31;	//Preference     freq = (MCKfreq/ratio) =16.129 KHz.
     4c8:	f04f 6304 	mov.w	r3, #138412032	; 0x8400000
	nrfx_err_t err_code = nrfx_i2s_init(&config, data_handler);
     4cc:	a801      	add	r0, sp, #4
	config.mck_setup = NRF_I2S_MCK_32MDIV31;	//Preference     freq = (MCKfreq/ratio) =16.129 KHz.
     4ce:	9304      	str	r3, [sp, #16]
	nrfx_err_t err_code = nrfx_i2s_init(&config, data_handler);
     4d0:	f002 f968 	bl	27a4 <nrfx_i2s_init>
	if (err_code != NRFX_SUCCESS)
     4d4:	42a8      	cmp	r0, r5
	nrfx_err_t err_code = nrfx_i2s_init(&config, data_handler);
     4d6:	4604      	mov	r4, r0
	if (err_code != NRFX_SUCCESS)
     4d8:	d005      	beq.n	4e6 <get_sound_init+0x5e>
	{
		printk("I2S init error\n");
     4da:	4810      	ldr	r0, [pc, #64]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)

  
	err_code = nrfx_i2s_start(&initial_buffers, I2S_DATA_BLOCK_WORDS, 0); //start recording
	if (err_code != NRFX_SUCCESS)
	{
		printk("I2S start error\n");
     4dc:	f003 f991 	bl	3802 <printk>
	}
	//nrfx_i2s_stop() //stop recording

	k_sleep(K_SECONDS(2));
	return err_code;
}
     4e0:	4620      	mov	r0, r4
     4e2:	b006      	add	sp, #24
     4e4:	bd70      	pop	{r4, r5, r6, pc}
	err_code = nrfx_i2s_start(&initial_buffers, I2S_DATA_BLOCK_WORDS, 0); //start recording
     4e6:	2200      	movs	r2, #0
     4e8:	f44f 7100 	mov.w	r1, #512	; 0x200
     4ec:	4630      	mov	r0, r6
     4ee:	f002 f9ff 	bl	28f0 <nrfx_i2s_start>
	if (err_code != NRFX_SUCCESS)
     4f2:	42a8      	cmp	r0, r5
	err_code = nrfx_i2s_start(&initial_buffers, I2S_DATA_BLOCK_WORDS, 0); //start recording
     4f4:	4604      	mov	r4, r0
	if (err_code != NRFX_SUCCESS)
     4f6:	d001      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
		printk("I2S start error\n");
     4f8:	4809      	ldr	r0, [pc, #36]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4fa:	e7ef      	b.n	4dc <get_sound_init+0x54>
     4fc:	2100      	movs	r1, #0
     4fe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
     502:	f002 ff8b 	bl	341c <z_impl_k_sleep>
	return err_code;
     506:	e7eb      	b.n	4e0 <get_sound_init+0x58>
     508:	20000138 	.word	0x20000138
     50c:	00004170 	.word	0x00004170
     510:	20000130 	.word	0x20000130
     514:	00000409 	.word	0x00000409
     518:	0bad0000 	.word	0x0bad0000
     51c:	000042b2 	.word	0x000042b2
     520:	000042c2 	.word	0x000042c2

00000524 <main>:

void main()
{
     524:	b570      	push	{r4, r5, r6, lr}
                                        uint32_t       out_pins[NRF_PWM_CHANNEL_COUNT])
{
    uint8_t i;
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    {
        p_reg->PSEL.OUT[i] = out_pins[i];
     526:	4b2e      	ldr	r3, [pc, #184]	; (5e0 <main+0xbc>)
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
           ((uint32_t)sense << GPIO_PIN_CNF_SENSE_Pos);

    reg->PIN_CNF[pin_number] = cnf;
     528:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
     52c:	2603      	movs	r6, #3
     52e:	221c      	movs	r2, #28
     530:	f8c5 6770 	str.w	r6, [r5, #1904]	; 0x770
     534:	f04f 31ff 	mov.w	r1, #4294967295
     538:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
     53c:	2001      	movs	r0, #1
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
     53e:	2200      	movs	r2, #0
    p_reg->MODE       = mode;
    p_reg->COUNTERTOP = top_value;
     540:	2407      	movs	r4, #7
        p_reg->PSEL.OUT[i] = out_pins[i];
     542:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
     546:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
     54a:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
     54e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->PRESCALER  = base_clock;
     552:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
     556:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
     55a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
     55e:	4c21      	ldr	r4, [pc, #132]	; (5e4 <main+0xc0>)
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
     560:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
     564:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
     568:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
     56c:	2402      	movs	r4, #2
     56e:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
     572:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
     576:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
  //2.048MHz
  nrf_pwm_configure(NRF_PWM0, NRF_PWM_CLK_16MHz, NRF_PWM_MODE_UP, 0x7);
  nrf_pwm_loop_set(NRF_PWM0, 0);
  nrf_pwm_decoder_set(NRF_PWM0, NRF_PWM_LOAD_COMMON, NRF_PWM_STEP_AUTO);
  nrf_pwm_sequence_set(NRF_PWM0, 0, &seq);
  NRF_PWM0->TASKS_SEQSTART[0] = 1;
     57a:	6098      	str	r0, [r3, #8]
        p_reg->PSEL.OUT[i] = out_pins[i];
     57c:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
     580:	f8c5 6770 	str.w	r6, [r5, #1904]	; 0x770
     584:	251d      	movs	r5, #29
     586:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
     58a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
     58e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
     592:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
    p_reg->COUNTERTOP = top_value;
     596:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
     59a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->PRESCALER  = base_clock;
     59e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    p_reg->MODE       = mode;
     5a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
     5a6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
     5aa:	490f      	ldr	r1, [pc, #60]	; (5e8 <main+0xc4>)
    p_reg->LOOP = loop_count;
     5ac:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
     5b0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
     5b4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
     5b8:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
     5bc:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
     5c0:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
  //2.048MHz / 4
  nrf_pwm_configure(NRF_PWM1, NRF_PWM_CLK_16MHz, NRF_PWM_MODE_UP, 0x1C0);
  nrf_pwm_loop_set(NRF_PWM1, 0);
  nrf_pwm_decoder_set(NRF_PWM1, NRF_PWM_LOAD_COMMON, NRF_PWM_STEP_AUTO);
  nrf_pwm_sequence_set(NRF_PWM1, 0, &seq2);
  NRF_PWM1->TASKS_SEQSTART[0] = 1;
     5c4:	6098      	str	r0, [r3, #8]
	nrfx_err_t err;

	printk("Min:-65538,Max:65538\n");
     5c6:	4809      	ldr	r0, [pc, #36]	; (5ec <main+0xc8>)
     5c8:	f003 f91b 	bl	3802 <printk>

	err = get_sound_init();
     5cc:	f7ff ff5c 	bl	488 <get_sound_init>
	if (err != NRFX_SUCCESS)
     5d0:	4b07      	ldr	r3, [pc, #28]	; (5f0 <main+0xcc>)
     5d2:	4298      	cmp	r0, r3
     5d4:	d102      	bne.n	5dc <main+0xb8>
		return;
	}
	while (1)
	{
		//k_sleep(K_MSEC(1000));
		print_sound();
     5d6:	f7ff ff33 	bl	440 <print_sound>
	while (1)
     5da:	e7fc      	b.n	5d6 <main+0xb2>
	}
}
     5dc:	bd70      	pop	{r4, r5, r6, pc}
     5de:	bf00      	nop
     5e0:	4001c000 	.word	0x4001c000
     5e4:	20000020 	.word	0x20000020
     5e8:	20000024 	.word	0x20000024
     5ec:	000042d3 	.word	0x000042d3
     5f0:	0bad0000 	.word	0x0bad0000

000005f4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5f4:	680b      	ldr	r3, [r1, #0]
     5f6:	3301      	adds	r3, #1
     5f8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5fa:	4b01      	ldr	r3, [pc, #4]	; (600 <char_out+0xc>)
     5fc:	681b      	ldr	r3, [r3, #0]
     5fe:	4718      	bx	r3
     600:	20000000 	.word	0x20000000

00000604 <__printk_hook_install>:
	_char_out = fn;
     604:	4b01      	ldr	r3, [pc, #4]	; (60c <__printk_hook_install+0x8>)
     606:	6018      	str	r0, [r3, #0]
}
     608:	4770      	bx	lr
     60a:	bf00      	nop
     60c:	20000000 	.word	0x20000000

00000610 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     610:	b507      	push	{r0, r1, r2, lr}
     612:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     614:	2100      	movs	r1, #0
{
     616:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     618:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     61a:	4803      	ldr	r0, [pc, #12]	; (628 <vprintk+0x18>)
     61c:	a901      	add	r1, sp, #4
     61e:	f000 f8e5 	bl	7ec <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     622:	b003      	add	sp, #12
     624:	f85d fb04 	ldr.w	pc, [sp], #4
     628:	000005f5 	.word	0x000005f5

0000062c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     62c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     630:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     634:	f019 0808 	ands.w	r8, r9, #8
{
     638:	4604      	mov	r4, r0
     63a:	4693      	mov	fp, r2
	if (processing) {
     63c:	d00d      	beq.n	65a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     63e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     640:	bf0c      	ite	eq
     642:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     646:	f049 0920 	orrne.w	r9, r9, #32
     64a:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     64e:	f38b 8811 	msr	BASEPRI, fp
     652:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     65a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     65e:	2902      	cmp	r1, #2
     660:	d107      	bne.n	672 <process_event+0x46>
			evt = process_recheck(mgr);
     662:	4620      	mov	r0, r4
     664:	f003 f8da 	bl	381c <process_recheck>
		if (evt == EVT_NOP) {
     668:	2800      	cmp	r0, #0
     66a:	d0f0      	beq.n	64e <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     66c:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     66e:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     670:	d14e      	bne.n	710 <process_event+0xe4>
			res = mgr->last_res;
     672:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     674:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     676:	2f00      	cmp	r7, #0
     678:	da15      	bge.n	6a6 <process_event+0x7a>
		*clients = mgr->clients;
     67a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     67c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     680:	e9c4 8800 	strd	r8, r8, [r4]
     684:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     688:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     68a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     68c:	8b21      	ldrh	r1, [r4, #24]
     68e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     692:	45ca      	cmp	sl, r9
     694:	d002      	beq.n	69c <process_event+0x70>
		if (do_monitors
     696:	68a3      	ldr	r3, [r4, #8]
     698:	2b00      	cmp	r3, #0
     69a:	d15a      	bne.n	752 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     69c:	b90d      	cbnz	r5, 6a2 <process_event+0x76>
		    || (transit != NULL)) {
     69e:	2e00      	cmp	r6, #0
     6a0:	d071      	beq.n	786 <process_event+0x15a>
     6a2:	2300      	movs	r3, #0
     6a4:	e056      	b.n	754 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     6a6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     6aa:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     6ac:	2a01      	cmp	r2, #1
     6ae:	d81e      	bhi.n	6ee <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b0:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     6b4:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     6b6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6b8:	b289      	uxth	r1, r1
     6ba:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     6be:	d10a      	bne.n	6d6 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6c0:	b13d      	cbz	r5, 6d2 <process_event+0xa6>
     6c2:	8b63      	ldrh	r3, [r4, #26]
     6c4:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     6c6:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     6c8:	3301      	adds	r3, #1
     6ca:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     6cc:	2a00      	cmp	r2, #0
     6ce:	d1fa      	bne.n	6c6 <process_event+0x9a>
     6d0:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6d2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     6d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6d8:	4620      	mov	r0, r4
     6da:	f003 f89f 	bl	381c <process_recheck>
     6de:	4606      	mov	r6, r0
     6e0:	2800      	cmp	r0, #0
     6e2:	d0d3      	beq.n	68c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     6e4:	8b23      	ldrh	r3, [r4, #24]
     6e6:	f043 0320 	orr.w	r3, r3, #32
     6ea:	8323      	strh	r3, [r4, #24]
     6ec:	e7cd      	b.n	68a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     6ee:	2b04      	cmp	r3, #4
     6f0:	d10c      	bne.n	70c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6f2:	f021 0107 	bic.w	r1, r1, #7
     6f6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     6f8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     6fa:	4620      	mov	r0, r4
     6fc:	f003 f88e 	bl	381c <process_recheck>
     700:	4605      	mov	r5, r0
     702:	2800      	cmp	r0, #0
     704:	d0c1      	beq.n	68a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     706:	f041 0120 	orr.w	r1, r1, #32
     70a:	8321      	strh	r1, [r4, #24]
     70c:	2500      	movs	r5, #0
     70e:	e7bc      	b.n	68a <process_event+0x5e>
		} else if (evt == EVT_START) {
     710:	2803      	cmp	r0, #3
     712:	d109      	bne.n	728 <process_event+0xfc>
			transit = mgr->transitions->start;
     714:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     716:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     71a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     71c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     720:	8323      	strh	r3, [r4, #24]
}
     722:	2500      	movs	r5, #0
		res = 0;
     724:	462f      	mov	r7, r5
     726:	e7b1      	b.n	68c <process_event+0x60>
		} else if (evt == EVT_STOP) {
     728:	2804      	cmp	r0, #4
     72a:	d106      	bne.n	73a <process_event+0x10e>
			transit = mgr->transitions->stop;
     72c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     72e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     732:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     734:	f043 0304 	orr.w	r3, r3, #4
     738:	e7f2      	b.n	720 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     73a:	2805      	cmp	r0, #5
     73c:	d106      	bne.n	74c <process_event+0x120>
			transit = mgr->transitions->reset;
     73e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     740:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     744:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     746:	f043 0305 	orr.w	r3, r3, #5
     74a:	e7e9      	b.n	720 <process_event+0xf4>
     74c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     74e:	462e      	mov	r6, r5
     750:	e7e8      	b.n	724 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     752:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     754:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     758:	8321      	strh	r1, [r4, #24]
     75a:	f38b 8811 	msr	BASEPRI, fp
     75e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     762:	b9fb      	cbnz	r3, 7a4 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     764:	bb85      	cbnz	r5, 7c8 <process_event+0x19c>
			if (transit != NULL) {
     766:	b116      	cbz	r6, 76e <process_event+0x142>
				transit(mgr, transition_complete);
     768:	491f      	ldr	r1, [pc, #124]	; (7e8 <process_event+0x1bc>)
     76a:	4620      	mov	r0, r4
     76c:	47b0      	blx	r6
	__asm__ volatile(
     76e:	f04f 0320 	mov.w	r3, #32
     772:	f3ef 8b11 	mrs	fp, BASEPRI
     776:	f383 8811 	msr	BASEPRI, r3
     77a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     77e:	8b23      	ldrh	r3, [r4, #24]
     780:	f023 0308 	bic.w	r3, r3, #8
     784:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     786:	8b23      	ldrh	r3, [r4, #24]
     788:	06da      	lsls	r2, r3, #27
     78a:	d525      	bpl.n	7d8 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     78c:	f023 0310 	bic.w	r3, r3, #16
     790:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     792:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     794:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     798:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     79c:	2900      	cmp	r1, #0
     79e:	f47f af5e 	bne.w	65e <process_event+0x32>
out:
     7a2:	e754      	b.n	64e <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     7a4:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7a6:	2900      	cmp	r1, #0
     7a8:	d0dc      	beq.n	764 <process_event+0x138>
	return node->next;
     7aa:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     7ae:	f8d1 b004 	ldr.w	fp, [r1, #4]
     7b2:	463b      	mov	r3, r7
     7b4:	4652      	mov	r2, sl
     7b6:	4620      	mov	r0, r4
     7b8:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     7ba:	f1b9 0f00 	cmp.w	r9, #0
     7be:	d0d1      	beq.n	764 <process_event+0x138>
     7c0:	4649      	mov	r1, r9
     7c2:	f8d9 9000 	ldr.w	r9, [r9]
     7c6:	e7f2      	b.n	7ae <process_event+0x182>
     7c8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     7ca:	463b      	mov	r3, r7
     7cc:	4652      	mov	r2, sl
     7ce:	4620      	mov	r0, r4
     7d0:	682d      	ldr	r5, [r5, #0]
     7d2:	f003 f83f 	bl	3854 <notify_one>
     7d6:	e7c5      	b.n	764 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     7d8:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     7dc:	bf1e      	ittt	ne
     7de:	f023 0320 	bicne.w	r3, r3, #32
     7e2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     7e4:	2102      	movne	r1, #2
     7e6:	e7d5      	b.n	794 <process_event+0x168>
     7e8:	00003881 	.word	0x00003881

000007ec <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7f0:	b091      	sub	sp, #68	; 0x44
     7f2:	468b      	mov	fp, r1
     7f4:	9002      	str	r0, [sp, #8]
     7f6:	4692      	mov	sl, r2
     7f8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7fa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7fc:	f89a 0000 	ldrb.w	r0, [sl]
     800:	b908      	cbnz	r0, 806 <CONFIG_ISR_STACK_SIZE+0x6>
			OUTC(' ');
			--width;
		}
	}

	return count;
     802:	4628      	mov	r0, r5
     804:	e35f      	b.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
		if (*fp != '%') {
     806:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     808:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     80c:	d007      	beq.n	81e <CONFIG_ISR_STACK_SIZE+0x1e>
			OUTC('%');
     80e:	9b02      	ldr	r3, [sp, #8]
     810:	4659      	mov	r1, fp
     812:	4798      	blx	r3
     814:	2800      	cmp	r0, #0
     816:	f2c0 8356 	blt.w	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     81a:	3501      	adds	r5, #1
			break;
     81c:	e212      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
		} state = {
     81e:	2218      	movs	r2, #24
     820:	2100      	movs	r1, #0
     822:	a80a      	add	r0, sp, #40	; 0x28
     824:	f003 f9da 	bl	3bdc <memset>
	if (*sp == '%') {
     828:	f89a 3001 	ldrb.w	r3, [sl, #1]
     82c:	2b25      	cmp	r3, #37	; 0x25
     82e:	d078      	beq.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
     830:	2200      	movs	r2, #0
     832:	4610      	mov	r0, r2
     834:	4696      	mov	lr, r2
     836:	4694      	mov	ip, r2
     838:	4616      	mov	r6, r2
     83a:	4639      	mov	r1, r7
		switch (*sp) {
     83c:	f817 3b01 	ldrb.w	r3, [r7], #1
     840:	2b2b      	cmp	r3, #43	; 0x2b
     842:	f000 809d 	beq.w	980 <CONFIG_ISR_STACK_SIZE+0x180>
     846:	f200 8094 	bhi.w	972 <CONFIG_ISR_STACK_SIZE+0x172>
     84a:	2b20      	cmp	r3, #32
     84c:	f000 809b 	beq.w	986 <CONFIG_ISR_STACK_SIZE+0x186>
     850:	2b23      	cmp	r3, #35	; 0x23
     852:	f000 809b 	beq.w	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     856:	b12e      	cbz	r6, 864 <CONFIG_ISR_STACK_SIZE+0x64>
     858:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     85c:	f046 0604 	orr.w	r6, r6, #4
     860:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     864:	f1bc 0f00 	cmp.w	ip, #0
     868:	d005      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     86a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     86e:	f046 0608 	orr.w	r6, r6, #8
     872:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     876:	f1be 0f00 	cmp.w	lr, #0
     87a:	d005      	beq.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
     87c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     880:	f046 0610 	orr.w	r6, r6, #16
     884:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     888:	b128      	cbz	r0, 896 <CONFIG_ISR_STACK_SIZE+0x96>
     88a:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     88e:	f040 0020 	orr.w	r0, r0, #32
     892:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     896:	b12a      	cbz	r2, 8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     898:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     89c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     8a0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     8a4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     8a8:	f002 0044 	and.w	r0, r2, #68	; 0x44
     8ac:	2844      	cmp	r0, #68	; 0x44
     8ae:	d103      	bne.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
		conv->flag_zero = false;
     8b0:	f36f 1286 	bfc	r2, #6, #1
     8b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     8b8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8bc:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     8be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     8c2:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     8c6:	d17b      	bne.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
		conv->width_star = true;
     8c8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8cc:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     8d0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     8d2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     8d6:	781a      	ldrb	r2, [r3, #0]
     8d8:	2a2e      	cmp	r2, #46	; 0x2e
     8da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8de:	bf0c      	ite	eq
     8e0:	2101      	moveq	r1, #1
     8e2:	2100      	movne	r1, #0
     8e4:	f361 0241 	bfi	r2, r1, #1, #1
     8e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     8ec:	d174      	bne.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
	if (*sp == '*') {
     8ee:	785a      	ldrb	r2, [r3, #1]
     8f0:	2a2a      	cmp	r2, #42	; 0x2a
     8f2:	d06a      	beq.n	9ca <CONFIG_ISR_STACK_SIZE+0x1ca>
	++sp;
     8f4:	3301      	adds	r3, #1
	size_t val = 0;
     8f6:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     8f8:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     8fa:	4618      	mov	r0, r3
     8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
     900:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     904:	2f09      	cmp	r7, #9
     906:	f240 808e 	bls.w	a26 <CONFIG_ISR_STACK_SIZE+0x226>
	conv->unsupported |= ((conv->prec_value < 0)
     90a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     90e:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     910:	f3c2 0040 	ubfx	r0, r2, #1, #1
     914:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     918:	f361 0241 	bfi	r2, r1, #1, #1
     91c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     920:	e05a      	b.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
		conv->specifier = *sp++;
     922:	f10a 0702 	add.w	r7, sl, #2
     926:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     92a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     92e:	07d9      	lsls	r1, r3, #31
     930:	f140 8149 	bpl.w	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
			width = va_arg(ap, int);
     934:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     938:	f1b9 0f00 	cmp.w	r9, #0
     93c:	da07      	bge.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
				conv->flag_dash = true;
     93e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     942:	f042 0204 	orr.w	r2, r2, #4
     946:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     94a:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     94e:	075a      	lsls	r2, r3, #29
     950:	f140 8142 	bpl.w	bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>
			int arg = va_arg(ap, int);
     954:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     958:	f1b8 0f00 	cmp.w	r8, #0
     95c:	f280 8141 	bge.w	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
				conv->prec_present = false;
     960:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     964:	f36f 0341 	bfc	r3, #1, #1
     968:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     96c:	f04f 38ff 	mov.w	r8, #4294967295
     970:	e137      	b.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
		switch (*sp) {
     972:	2b2d      	cmp	r3, #45	; 0x2d
     974:	d00c      	beq.n	990 <CONFIG_ISR_STACK_SIZE+0x190>
     976:	2b30      	cmp	r3, #48	; 0x30
     978:	f47f af6d 	bne.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
			conv->flag_zero = true;
     97c:	2201      	movs	r2, #1
	} while (loop);
     97e:	e75c      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			conv->flag_plus = true;
     980:	f04f 0c01 	mov.w	ip, #1
     984:	e759      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			conv->flag_space = true;
     986:	f04f 0e01 	mov.w	lr, #1
     98a:	e756      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			conv->flag_hash = true;
     98c:	2001      	movs	r0, #1
     98e:	e754      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		switch (*sp) {
     990:	2601      	movs	r6, #1
     992:	e752      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		val = 10U * val + *sp++ - '0';
     994:	fb0c 0202 	mla	r2, ip, r2, r0
     998:	3a30      	subs	r2, #48	; 0x30
     99a:	4633      	mov	r3, r6
     99c:	461e      	mov	r6, r3
     99e:	f816 0b01 	ldrb.w	r0, [r6], #1
     9a2:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     9a6:	2f09      	cmp	r7, #9
     9a8:	d9f4      	bls.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
	if (sp != wp) {
     9aa:	4299      	cmp	r1, r3
     9ac:	d093      	beq.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
		conv->unsupported |= ((conv->width_value < 0)
     9ae:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     9b2:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     9b4:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     9b6:	f362 0141 	bfi	r1, r2, #1, #1
     9ba:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     9be:	e78a      	b.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     9c0:	460b      	mov	r3, r1
	size_t val = 0;
     9c2:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     9c4:	f04f 0c0a 	mov.w	ip, #10
     9c8:	e7e8      	b.n	99c <CONFIG_ISR_STACK_SIZE+0x19c>
		conv->prec_star = true;
     9ca:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     9ce:	f042 0204 	orr.w	r2, r2, #4
     9d2:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     9d6:	3302      	adds	r3, #2
	switch (*sp) {
     9d8:	461f      	mov	r7, r3
     9da:	f817 2b01 	ldrb.w	r2, [r7], #1
     9de:	2a6c      	cmp	r2, #108	; 0x6c
     9e0:	d041      	beq.n	a66 <CONFIG_ISR_STACK_SIZE+0x266>
     9e2:	d825      	bhi.n	a30 <CONFIG_ISR_STACK_SIZE+0x230>
     9e4:	2a68      	cmp	r2, #104	; 0x68
     9e6:	d02b      	beq.n	a40 <CONFIG_ISR_STACK_SIZE+0x240>
     9e8:	2a6a      	cmp	r2, #106	; 0x6a
     9ea:	d046      	beq.n	a7a <CONFIG_ISR_STACK_SIZE+0x27a>
     9ec:	2a4c      	cmp	r2, #76	; 0x4c
     9ee:	d04c      	beq.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
     9f0:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     9f2:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     9fa:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     9fe:	2a78      	cmp	r2, #120	; 0x78
     a00:	f200 80d9 	bhi.w	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
     a04:	2a57      	cmp	r2, #87	; 0x57
     a06:	d84d      	bhi.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
     a08:	2a41      	cmp	r2, #65	; 0x41
     a0a:	d003      	beq.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
     a0c:	3a45      	subs	r2, #69	; 0x45
     a0e:	2a02      	cmp	r2, #2
     a10:	f200 80d1 	bhi.w	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
		conv->specifier_cat = SPECIFIER_FP;
     a14:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     a18:	2204      	movs	r2, #4
     a1a:	f362 0302 	bfi	r3, r2, #0, #3
     a1e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     a22:	2301      	movs	r3, #1
			break;
     a24:	e09e      	b.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
		val = 10U * val + *sp++ - '0';
     a26:	fb06 2101 	mla	r1, r6, r1, r2
     a2a:	3930      	subs	r1, #48	; 0x30
     a2c:	4603      	mov	r3, r0
     a2e:	e764      	b.n	8fa <CONFIG_ISR_STACK_SIZE+0xfa>
	switch (*sp) {
     a30:	2a74      	cmp	r2, #116	; 0x74
     a32:	d026      	beq.n	a82 <CONFIG_ISR_STACK_SIZE+0x282>
     a34:	2a7a      	cmp	r2, #122	; 0x7a
     a36:	d1db      	bne.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
		conv->length_mod = LENGTH_Z;
     a38:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a3c:	2206      	movs	r2, #6
     a3e:	e00d      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		if (*++sp == 'h') {
     a40:	785a      	ldrb	r2, [r3, #1]
     a42:	2a68      	cmp	r2, #104	; 0x68
     a44:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a48:	d106      	bne.n	a58 <CONFIG_ISR_STACK_SIZE+0x258>
			conv->length_mod = LENGTH_HH;
     a4a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     a4c:	f361 02c6 	bfi	r2, r1, #3, #4
     a50:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     a54:	1c9f      	adds	r7, r3, #2
     a56:	e7cc      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
			conv->length_mod = LENGTH_H;
     a58:	4613      	mov	r3, r2
     a5a:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     a5c:	f362 03c6 	bfi	r3, r2, #3, #4
     a60:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     a64:	e7c5      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
		if (*++sp == 'l') {
     a66:	785a      	ldrb	r2, [r3, #1]
     a68:	2a6c      	cmp	r2, #108	; 0x6c
     a6a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     a6e:	d101      	bne.n	a74 <CONFIG_ISR_STACK_SIZE+0x274>
			conv->length_mod = LENGTH_LL;
     a70:	2104      	movs	r1, #4
     a72:	e7eb      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
			conv->length_mod = LENGTH_L;
     a74:	4613      	mov	r3, r2
     a76:	2203      	movs	r2, #3
     a78:	e7f0      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		conv->length_mod = LENGTH_J;
     a7a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a7e:	2205      	movs	r2, #5
     a80:	e7ec      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		conv->length_mod = LENGTH_T;
     a82:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     a86:	2207      	movs	r2, #7
     a88:	e7e8      	b.n	a5c <CONFIG_ISR_STACK_SIZE+0x25c>
		conv->unsupported = true;
     a8a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     a8e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     a92:	f023 0302 	bic.w	r3, r3, #2
     a96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     a9a:	f043 0302 	orr.w	r3, r3, #2
     a9e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     aa2:	e7a6      	b.n	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
	switch (conv->specifier) {
     aa4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     aa8:	2920      	cmp	r1, #32
     aaa:	f200 8084 	bhi.w	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
     aae:	a001      	add	r0, pc, #4	; (adr r0, ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>)
     ab0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     ab4:	00000b79 	.word	0x00000b79
     ab8:	00000bb7 	.word	0x00000bb7
     abc:	00000bb7 	.word	0x00000bb7
     ac0:	00000bb7 	.word	0x00000bb7
     ac4:	00000bb7 	.word	0x00000bb7
     ac8:	00000bb7 	.word	0x00000bb7
     acc:	00000bb7 	.word	0x00000bb7
     ad0:	00000bb7 	.word	0x00000bb7
     ad4:	00000bb7 	.word	0x00000bb7
     ad8:	00000a15 	.word	0x00000a15
     adc:	00000bb7 	.word	0x00000bb7
     ae0:	00000b79 	.word	0x00000b79
     ae4:	00000b39 	.word	0x00000b39
     ae8:	00000a15 	.word	0x00000a15
     aec:	00000a15 	.word	0x00000a15
     af0:	00000a15 	.word	0x00000a15
     af4:	00000bb7 	.word	0x00000bb7
     af8:	00000b39 	.word	0x00000b39
     afc:	00000bb7 	.word	0x00000bb7
     b00:	00000bb7 	.word	0x00000bb7
     b04:	00000bb7 	.word	0x00000bb7
     b08:	00000bb7 	.word	0x00000bb7
     b0c:	00000b81 	.word	0x00000b81
     b10:	00000b79 	.word	0x00000b79
     b14:	00000b9d 	.word	0x00000b9d
     b18:	00000bb7 	.word	0x00000bb7
     b1c:	00000bb7 	.word	0x00000bb7
     b20:	00000b9d 	.word	0x00000b9d
     b24:	00000bb7 	.word	0x00000bb7
     b28:	00000b79 	.word	0x00000b79
     b2c:	00000bb7 	.word	0x00000bb7
     b30:	00000bb7 	.word	0x00000bb7
     b34:	00000b79 	.word	0x00000b79
		conv->specifier_cat = SPECIFIER_SINT;
     b38:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b3c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     b3e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     b42:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b46:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     b48:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     b4c:	bf02      	ittt	eq
     b4e:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     b52:	f041 0101 	orreq.w	r1, r1, #1
     b56:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     b5a:	2a63      	cmp	r2, #99	; 0x63
     b5c:	d131      	bne.n	bc2 <CONFIG_ISR_STACK_SIZE+0x3c2>
			unsupported = (conv->length_mod != LENGTH_NONE);
     b5e:	3b00      	subs	r3, #0
     b60:	bf18      	it	ne
     b62:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     b64:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b68:	f3c2 0140 	ubfx	r1, r2, #1, #1
     b6c:	430b      	orrs	r3, r1
     b6e:	f363 0241 	bfi	r2, r3, #1, #1
     b72:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     b76:	e6d8      	b.n	92a <CONFIG_ISR_STACK_SIZE+0x12a>
		conv->specifier_cat = SPECIFIER_UINT;
     b78:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     b7c:	2002      	movs	r0, #2
     b7e:	e7de      	b.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
		conv->specifier_cat = SPECIFIER_PTR;
     b80:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b84:	f003 0378 	and.w	r3, r3, #120	; 0x78
     b88:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     b8c:	2103      	movs	r1, #3
     b8e:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     b92:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     b94:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     b98:	4143      	adcs	r3, r0
     b9a:	e7e3      	b.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
		conv->specifier_cat = SPECIFIER_PTR;
     b9c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     ba0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     ba2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     ba6:	f361 0202 	bfi	r2, r1, #0, #3
     baa:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     bae:	bf14      	ite	ne
     bb0:	2301      	movne	r3, #1
     bb2:	2300      	moveq	r3, #0
     bb4:	e7d6      	b.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
		conv->invalid = true;
     bb6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     bba:	f043 0301 	orr.w	r3, r3, #1
     bbe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     bc2:	2300      	movs	r3, #0
     bc4:	e7ce      	b.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
		} else if (conv->width_present) {
     bc6:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     bca:	2a00      	cmp	r2, #0
			width = conv->width_value;
     bcc:	bfb4      	ite	lt
     bce:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     bd2:	f04f 39ff 	movge.w	r9, #4294967295
     bd6:	e6ba      	b.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
		} else if (conv->prec_present) {
     bd8:	079b      	lsls	r3, r3, #30
     bda:	f57f aec7 	bpl.w	96c <CONFIG_ISR_STACK_SIZE+0x16c>
			precision = conv->prec_value;
     bde:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     be2:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     be6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     be8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     bec:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     bf0:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     bf4:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     bf6:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     bfa:	d138      	bne.n	c6e <CONFIG_ISR_STACK_SIZE+0x46e>
			switch (length_mod) {
     bfc:	1ecb      	subs	r3, r1, #3
     bfe:	2b04      	cmp	r3, #4
     c00:	d822      	bhi.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
     c02:	e8df f003 	tbb	[pc, r3]
     c06:	0903      	.short	0x0903
     c08:	2109      	.short	0x2109
     c0a:	21          	.byte	0x21
     c0b:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     c0c:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     c10:	17da      	asrs	r2, r3, #31
     c12:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     c16:	e006      	b.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
					(sint_value_type)va_arg(ap, intmax_t);
     c18:	3407      	adds	r4, #7
     c1a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     c1e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     c22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     c26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     c2a:	f013 0603 	ands.w	r6, r3, #3
     c2e:	d056      	beq.n	cde <CONFIG_ISR_STACK_SIZE+0x4de>
			OUTS(sp, fp);
     c30:	9802      	ldr	r0, [sp, #8]
     c32:	463b      	mov	r3, r7
     c34:	4652      	mov	r2, sl
     c36:	4659      	mov	r1, fp
     c38:	f002 feeb 	bl	3a12 <outs>
     c3c:	2800      	cmp	r0, #0
     c3e:	f2c0 8142 	blt.w	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     c42:	4405      	add	r5, r0
			continue;
     c44:	46ba      	mov	sl, r7
     c46:	e5d9      	b.n	7fc <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c48:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     c4c:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     c4e:	ea4f 72e3 	mov.w	r2, r3, asr #31
     c52:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     c56:	d105      	bne.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
				value->uint = (unsigned char)value->uint;
     c58:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     c5c:	930a      	str	r3, [sp, #40]	; 0x28
     c5e:	2300      	movs	r3, #0
     c60:	930b      	str	r3, [sp, #44]	; 0x2c
     c62:	e7e0      	b.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
			} else if (length_mod == LENGTH_H) {
     c64:	2902      	cmp	r1, #2
     c66:	d1de      	bne.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
				value->sint = (short)value->sint;
     c68:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     c6c:	e7d0      	b.n	c10 <CONFIG_ISR_STACK_SIZE+0x410>
		} else if (specifier_cat == SPECIFIER_UINT) {
     c6e:	2b02      	cmp	r3, #2
     c70:	d123      	bne.n	cba <CONFIG_ISR_STACK_SIZE+0x4ba>
			switch (length_mod) {
     c72:	1ecb      	subs	r3, r1, #3
     c74:	2b04      	cmp	r3, #4
     c76:	d813      	bhi.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
     c78:	e8df f003 	tbb	[pc, r3]
     c7c:	120a0a03 	.word	0x120a0a03
     c80:	12          	.byte	0x12
     c81:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     c82:	6822      	ldr	r2, [r4, #0]
     c84:	920a      	str	r2, [sp, #40]	; 0x28
     c86:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     c88:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     c8a:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     c8c:	4604      	mov	r4, r0
     c8e:	e7ca      	b.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
					(uint_value_type)va_arg(ap,
     c90:	1de0      	adds	r0, r4, #7
     c92:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     c96:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     c9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     c9e:	e7f5      	b.n	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
					(uint_value_type)va_arg(ap, size_t);
     ca0:	f854 3b04 	ldr.w	r3, [r4], #4
     ca4:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     ca6:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     ca8:	f04f 0300 	mov.w	r3, #0
     cac:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     cae:	d0d3      	beq.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
			} else if (length_mod == LENGTH_H) {
     cb0:	2902      	cmp	r1, #2
     cb2:	d1b8      	bne.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
				value->uint = (unsigned short)value->uint;
     cb4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     cb8:	e7d0      	b.n	c5c <CONFIG_ISR_STACK_SIZE+0x45c>
		} else if (specifier_cat == SPECIFIER_FP) {
     cba:	2b04      	cmp	r3, #4
     cbc:	d109      	bne.n	cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
					(sint_value_type)va_arg(ap, long long);
     cbe:	1de3      	adds	r3, r4, #7
     cc0:	f023 0307 	bic.w	r3, r3, #7
     cc4:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
     ccc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     cd0:	e7a9      	b.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
		} else if (specifier_cat == SPECIFIER_PTR) {
     cd2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     cd4:	bf04      	itt	eq
     cd6:	f854 3b04 	ldreq.w	r3, [r4], #4
     cda:	930a      	streq	r3, [sp, #40]	; 0x28
     cdc:	e7a3      	b.n	c26 <CONFIG_ISR_STACK_SIZE+0x426>
		switch (conv->specifier) {
     cde:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     ce2:	2878      	cmp	r0, #120	; 0x78
     ce4:	d8ae      	bhi.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
     ce6:	2862      	cmp	r0, #98	; 0x62
     ce8:	d822      	bhi.n	d30 <CONFIG_ISR_STACK_SIZE+0x530>
     cea:	2825      	cmp	r0, #37	; 0x25
     cec:	f43f ad8f 	beq.w	80e <CONFIG_ISR_STACK_SIZE+0xe>
     cf0:	2858      	cmp	r0, #88	; 0x58
     cf2:	d1a7      	bne.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
			bps = encode_uint(value->uint, conv, buf, bpe);
     cf4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     cf8:	9300      	str	r3, [sp, #0]
     cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     cfe:	ab04      	add	r3, sp, #16
     d00:	aa0c      	add	r2, sp, #48	; 0x30
     d02:	f002 fe40 	bl	3986 <encode_uint>
     d06:	4682      	mov	sl, r0
			if (precision >= 0) {
     d08:	f1b8 0f00 	cmp.w	r8, #0
     d0c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     d10:	db0c      	blt.n	d2c <CONFIG_ISR_STACK_SIZE+0x52c>
				conv->flag_zero = false;
     d12:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     d16:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     d1a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     d1e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     d20:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     d24:	d902      	bls.n	d2c <CONFIG_ISR_STACK_SIZE+0x52c>
					conv->pad0_value = precision - (int)len;
     d26:	eba8 0303 	sub.w	r3, r8, r3
     d2a:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     d2c:	4680      	mov	r8, r0
     d2e:	e03d      	b.n	dac <CONFIG_ISR_STACK_SIZE+0x5ac>
		switch (conv->specifier) {
     d30:	3863      	subs	r0, #99	; 0x63
     d32:	2815      	cmp	r0, #21
     d34:	d886      	bhi.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
     d36:	a201      	add	r2, pc, #4	; (adr r2, d3c <CONFIG_ISR_STACK_SIZE+0x53c>)
     d38:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     d3c:	00000dbd 	.word	0x00000dbd
     d40:	00000e21 	.word	0x00000e21
     d44:	00000c45 	.word	0x00000c45
     d48:	00000c45 	.word	0x00000c45
     d4c:	00000c45 	.word	0x00000c45
     d50:	00000c45 	.word	0x00000c45
     d54:	00000e21 	.word	0x00000e21
     d58:	00000c45 	.word	0x00000c45
     d5c:	00000c45 	.word	0x00000c45
     d60:	00000c45 	.word	0x00000c45
     d64:	00000c45 	.word	0x00000c45
     d68:	00000e7b 	.word	0x00000e7b
     d6c:	00000e49 	.word	0x00000e49
     d70:	00000e4d 	.word	0x00000e4d
     d74:	00000c45 	.word	0x00000c45
     d78:	00000c45 	.word	0x00000c45
     d7c:	00000d95 	.word	0x00000d95
     d80:	00000c45 	.word	0x00000c45
     d84:	00000e49 	.word	0x00000e49
     d88:	00000c45 	.word	0x00000c45
     d8c:	00000c45 	.word	0x00000c45
     d90:	00000e49 	.word	0x00000e49
			if (precision >= 0) {
     d94:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     d98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     d9c:	db0a      	blt.n	db4 <CONFIG_ISR_STACK_SIZE+0x5b4>
				len = strnlen(bps, precision);
     d9e:	4641      	mov	r1, r8
     da0:	4650      	mov	r0, sl
     da2:	f002 fefb 	bl	3b9c <strnlen>
			bpe = bps + len;
     da6:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     daa:	2600      	movs	r6, #0
		if (bps == NULL) {
     dac:	f1ba 0f00 	cmp.w	sl, #0
     db0:	d10c      	bne.n	dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
     db2:	e747      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
				len = strlen(bps);
     db4:	4650      	mov	r0, sl
     db6:	f002 feea 	bl	3b8e <strlen>
     dba:	e7f4      	b.n	da6 <CONFIG_ISR_STACK_SIZE+0x5a6>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     dbe:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     dc2:	2600      	movs	r6, #0
			bps = buf;
     dc4:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     dc8:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     dcc:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     dd0:	b106      	cbz	r6, dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>
			nj_len += 1U;
     dd2:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     dd4:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     dd8:	06d0      	lsls	r0, r2, #27
     dda:	d568      	bpl.n	eae <CONFIG_ISR_STACK_SIZE+0x6ae>
			nj_len += 2U;
     ddc:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     dde:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     de0:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     de2:	bf48      	it	mi
     de4:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     de6:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     de8:	bf48      	it	mi
     dea:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     dec:	f1b9 0f00 	cmp.w	r9, #0
     df0:	dd76      	ble.n	ee0 <CONFIG_ISR_STACK_SIZE+0x6e0>
			if (!conv->flag_dash) {
     df2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     df6:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     dfa:	f3c2 0380 	ubfx	r3, r2, #2, #1
     dfe:	9303      	str	r3, [sp, #12]
     e00:	0753      	lsls	r3, r2, #29
     e02:	d46d      	bmi.n	ee0 <CONFIG_ISR_STACK_SIZE+0x6e0>
				if (conv->flag_zero) {
     e04:	0650      	lsls	r0, r2, #25
     e06:	d561      	bpl.n	ecc <CONFIG_ISR_STACK_SIZE+0x6cc>
					if (sign != 0) {
     e08:	b146      	cbz	r6, e1c <CONFIG_ISR_STACK_SIZE+0x61c>
						OUTC(sign);
     e0a:	9b02      	ldr	r3, [sp, #8]
     e0c:	4659      	mov	r1, fp
     e0e:	4630      	mov	r0, r6
     e10:	4798      	blx	r3
     e12:	2800      	cmp	r0, #0
     e14:	db57      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
						sign = 0;
     e16:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     e18:	3501      	adds	r5, #1
						sign = 0;
     e1a:	461e      	mov	r6, r3
					pad = '0';
     e1c:	2330      	movs	r3, #48	; 0x30
     e1e:	e056      	b.n	ece <CONFIG_ISR_STACK_SIZE+0x6ce>
			if (conv->flag_plus) {
     e20:	071e      	lsls	r6, r3, #28
     e22:	d40f      	bmi.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
				sign = ' ';
     e24:	f013 0610 	ands.w	r6, r3, #16
     e28:	bf18      	it	ne
     e2a:	2620      	movne	r6, #32
			sint = value->sint;
     e2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     e30:	2b00      	cmp	r3, #0
     e32:	f6bf af5f 	bge.w	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
				value->uint = (uint_value_type)-sint;
     e36:	4252      	negs	r2, r2
     e38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     e3c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     e40:	262d      	movs	r6, #45	; 0x2d
     e42:	e757      	b.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
				sign = '+';
     e44:	262b      	movs	r6, #43	; 0x2b
     e46:	e7f1      	b.n	e2c <CONFIG_ISR_STACK_SIZE+0x62c>
		switch (conv->specifier) {
     e48:	2600      	movs	r6, #0
     e4a:	e753      	b.n	cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
			if (value->ptr != NULL) {
     e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
     e4e:	b340      	cbz	r0, ea2 <CONFIG_ISR_STACK_SIZE+0x6a2>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e50:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     e54:	9300      	str	r3, [sp, #0]
     e56:	aa0c      	add	r2, sp, #48	; 0x30
     e58:	ab04      	add	r3, sp, #16
     e5a:	2100      	movs	r1, #0
     e5c:	f002 fd93 	bl	3986 <encode_uint>
				conv->altform_0c = true;
     e60:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     e64:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     e68:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     e6c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     e70:	4682      	mov	sl, r0
				conv->altform_0c = true;
     e72:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     e76:	2600      	movs	r6, #0
				goto prec_int_pad0;
     e78:	e746      	b.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
				store_count(conv, value->ptr, count);
     e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     e7c:	2907      	cmp	r1, #7
     e7e:	f63f aee1 	bhi.w	c44 <CONFIG_ISR_STACK_SIZE+0x444>
     e82:	e8df f001 	tbb	[pc, r1]
     e86:	040c      	.short	0x040c
     e88:	08080c06 	.word	0x08080c06
     e8c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     e8e:	701d      	strb	r5, [r3, #0]
		break;
     e90:	e6d8      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
		*(short *)dp = (short)count;
     e92:	801d      	strh	r5, [r3, #0]
		break;
     e94:	e6d6      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
		*(intmax_t *)dp = (intmax_t)count;
     e96:	17ea      	asrs	r2, r5, #31
     e98:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     e9c:	e6d2      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     e9e:	601d      	str	r5, [r3, #0]
		break;
     ea0:	e6d0      	b.n	c44 <CONFIG_ISR_STACK_SIZE+0x444>
			bps = "(nil)";
     ea2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; f6c <CONFIG_ISR_STACK_SIZE+0x76c>
     ea6:	4606      	mov	r6, r0
			bpe = bps + 5;
     ea8:	f10a 0805 	add.w	r8, sl, #5
     eac:	e78e      	b.n	dcc <CONFIG_ISR_STACK_SIZE+0x5cc>
		} else if (conv->altform_0) {
     eae:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     eb0:	bf48      	it	mi
     eb2:	3301      	addmi	r3, #1
     eb4:	e793      	b.n	dde <CONFIG_ISR_STACK_SIZE+0x5de>
					OUTC(pad);
     eb6:	4618      	mov	r0, r3
     eb8:	9303      	str	r3, [sp, #12]
     eba:	4659      	mov	r1, fp
     ebc:	9b02      	ldr	r3, [sp, #8]
     ebe:	4798      	blx	r3
     ec0:	2800      	cmp	r0, #0
     ec2:	9b03      	ldr	r3, [sp, #12]
     ec4:	da04      	bge.n	ed0 <CONFIG_ISR_STACK_SIZE+0x6d0>
#undef OUTS
#undef OUTC
}
     ec6:	b011      	add	sp, #68	; 0x44
     ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     ecc:	2320      	movs	r3, #32
     ece:	444d      	add	r5, r9
     ed0:	464a      	mov	r2, r9
				while (width-- > 0) {
     ed2:	2a00      	cmp	r2, #0
     ed4:	eba5 0109 	sub.w	r1, r5, r9
     ed8:	f109 39ff 	add.w	r9, r9, #4294967295
     edc:	dceb      	bgt.n	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
     ede:	460d      	mov	r5, r1
		if (sign != 0) {
     ee0:	b136      	cbz	r6, ef0 <CONFIG_ISR_STACK_SIZE+0x6f0>
			OUTC(sign);
     ee2:	9b02      	ldr	r3, [sp, #8]
     ee4:	4659      	mov	r1, fp
     ee6:	4630      	mov	r0, r6
     ee8:	4798      	blx	r3
     eea:	2800      	cmp	r0, #0
     eec:	dbeb      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     eee:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ef0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ef4:	06d9      	lsls	r1, r3, #27
     ef6:	d401      	bmi.n	efc <CONFIG_ISR_STACK_SIZE+0x6fc>
     ef8:	071a      	lsls	r2, r3, #28
     efa:	d506      	bpl.n	f0a <CONFIG_ISR_STACK_SIZE+0x70a>
				OUTC('0');
     efc:	9b02      	ldr	r3, [sp, #8]
     efe:	4659      	mov	r1, fp
     f00:	2030      	movs	r0, #48	; 0x30
     f02:	4798      	blx	r3
     f04:	2800      	cmp	r0, #0
     f06:	dbde      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     f08:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     f0a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f0e:	06db      	lsls	r3, r3, #27
     f10:	d507      	bpl.n	f22 <CONFIG_ISR_STACK_SIZE+0x722>
				OUTC(conv->specifier);
     f12:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f16:	9b02      	ldr	r3, [sp, #8]
     f18:	4659      	mov	r1, fp
     f1a:	4798      	blx	r3
     f1c:	2800      	cmp	r0, #0
     f1e:	dbd2      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     f20:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     f22:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     f24:	442e      	add	r6, r5
     f26:	1b73      	subs	r3, r6, r5
     f28:	2b00      	cmp	r3, #0
     f2a:	dc16      	bgt.n	f5a <CONFIG_ISR_STACK_SIZE+0x75a>
			OUTS(bps, bpe);
     f2c:	9802      	ldr	r0, [sp, #8]
     f2e:	4643      	mov	r3, r8
     f30:	4652      	mov	r2, sl
     f32:	4659      	mov	r1, fp
     f34:	f002 fd6d 	bl	3a12 <outs>
     f38:	2800      	cmp	r0, #0
     f3a:	dbc4      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     f3c:	4405      	add	r5, r0
		while (width > 0) {
     f3e:	44a9      	add	r9, r5
     f40:	eba9 0305 	sub.w	r3, r9, r5
     f44:	2b00      	cmp	r3, #0
     f46:	f77f ae7d 	ble.w	c44 <CONFIG_ISR_STACK_SIZE+0x444>
			OUTC(' ');
     f4a:	9b02      	ldr	r3, [sp, #8]
     f4c:	4659      	mov	r1, fp
     f4e:	2020      	movs	r0, #32
     f50:	4798      	blx	r3
     f52:	2800      	cmp	r0, #0
     f54:	dbb7      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     f56:	3501      	adds	r5, #1
			--width;
     f58:	e7f2      	b.n	f40 <CONFIG_ISR_STACK_SIZE+0x740>
				OUTC('0');
     f5a:	9b02      	ldr	r3, [sp, #8]
     f5c:	4659      	mov	r1, fp
     f5e:	2030      	movs	r0, #48	; 0x30
     f60:	4798      	blx	r3
     f62:	2800      	cmp	r0, #0
     f64:	dbaf      	blt.n	ec6 <CONFIG_ISR_STACK_SIZE+0x6c6>
     f66:	3501      	adds	r5, #1
     f68:	e7dd      	b.n	f26 <CONFIG_ISR_STACK_SIZE+0x726>
     f6a:	bf00      	nop
     f6c:	000042e9 	.word	0x000042e9

00000f70 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f72:	4605      	mov	r5, r0
     f74:	f04f 0320 	mov.w	r3, #32
     f78:	f3ef 8611 	mrs	r6, BASEPRI
     f7c:	f383 8811 	msr	BASEPRI, r3
     f80:	f3bf 8f6f 	isb	sy
	return list->head;
     f84:	4b09      	ldr	r3, [pc, #36]	; (fac <pm_state_notify+0x3c>)
     f86:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f88:	b15c      	cbz	r4, fa2 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     f8a:	4f09      	ldr	r7, [pc, #36]	; (fb0 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
     f8c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     f90:	2d00      	cmp	r5, #0
     f92:	bf08      	it	eq
     f94:	4613      	moveq	r3, r2
		if (callback) {
     f96:	b10b      	cbz	r3, f9c <pm_state_notify+0x2c>
			callback(z_power_state.state);
     f98:	7838      	ldrb	r0, [r7, #0]
     f9a:	4798      	blx	r3
	return node->next;
     f9c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     f9e:	2c00      	cmp	r4, #0
     fa0:	d1f4      	bne.n	f8c <pm_state_notify+0x1c>
	__asm__ volatile(
     fa2:	f386 8811 	msr	BASEPRI, r6
     fa6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fac:	20000938 	.word	0x20000938
     fb0:	20000940 	.word	0x20000940

00000fb4 <pm_system_resume>:

void pm_system_resume(void)
{
     fb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     fb6:	4b0f      	ldr	r3, [pc, #60]	; (ff4 <pm_system_resume+0x40>)
     fb8:	681a      	ldr	r2, [r3, #0]
     fba:	b9ba      	cbnz	r2, fec <pm_system_resume+0x38>
		post_ops_done = 1;
     fbc:	2201      	movs	r2, #1
     fbe:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
     fc0:	4a0d      	ldr	r2, [pc, #52]	; (ff8 <pm_system_resume+0x44>)
     fc2:	ca07      	ldmia	r2, {r0, r1, r2}
     fc4:	ab01      	add	r3, sp, #4
     fc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
     fca:	4a0c      	ldr	r2, [pc, #48]	; (ffc <pm_system_resume+0x48>)
     fcc:	b14a      	cbz	r2, fe2 <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
     fce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     fd2:	f002 fe22 	bl	3c1a <pm_power_state_exit_post_ops>
		pm_state_notify(false);
     fd6:	2000      	movs	r0, #0
	}
}
     fd8:	b005      	add	sp, #20
     fda:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
     fde:	f7ff bfc7 	b.w	f70 <pm_state_notify>
     fe2:	f382 8811 	msr	BASEPRI, r2
     fe6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     fea:	e7f4      	b.n	fd6 <pm_system_resume+0x22>
}
     fec:	b005      	add	sp, #20
     fee:	f85d fb04 	ldr.w	pc, [sp], #4
     ff2:	bf00      	nop
     ff4:	20000004 	.word	0x20000004
     ff8:	20000940 	.word	0x20000940
     ffc:	00003c1b 	.word	0x00003c1b

00001000 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    1000:	b5f0      	push	{r4, r5, r6, r7, lr}
    1002:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    1004:	466e      	mov	r6, sp
    1006:	4601      	mov	r1, r0
{
    1008:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    100a:	4630      	mov	r0, r6
    100c:	f002 fd18 	bl	3a40 <pm_policy_next_state>
    1010:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1014:	4c17      	ldr	r4, [pc, #92]	; (1074 <pm_system_suspend+0x74>)
    1016:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    101a:	7820      	ldrb	r0, [r4, #0]
    101c:	4627      	mov	r7, r4
    101e:	b338      	cbz	r0, 1070 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    1020:	4b15      	ldr	r3, [pc, #84]	; (1078 <pm_system_suspend+0x78>)
    1022:	2100      	movs	r1, #0
    1024:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    1026:	1c6b      	adds	r3, r5, #1
    1028:	d00d      	beq.n	1046 <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    102a:	4814      	ldr	r0, [pc, #80]	; (107c <pm_system_suspend+0x7c>)
    102c:	4616      	mov	r6, r2
    102e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    1032:	4a13      	ldr	r2, [pc, #76]	; (1080 <pm_system_suspend+0x80>)
    1034:	2300      	movs	r3, #0
    1036:	fbe6 010c 	umlal	r0, r1, r6, ip
    103a:	f7ff f84f 	bl	dc <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    103e:	2101      	movs	r1, #1
    1040:	1a28      	subs	r0, r5, r0
    1042:	f002 ff76 	bl	3f32 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1046:	f001 ffb3 	bl	2fb0 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    104a:	2001      	movs	r0, #1
    104c:	f7ff ff90 	bl	f70 <pm_state_notify>
	pm_state_set(z_power_state);
    1050:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    1054:	ab05      	add	r3, sp, #20
    1056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    105a:	4a0a      	ldr	r2, [pc, #40]	; (1084 <pm_system_suspend+0x84>)
    105c:	b11a      	cbz	r2, 1066 <pm_system_suspend+0x66>
		pm_power_state_set(info);
    105e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    1062:	f002 fdc7 	bl	3bf4 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    1066:	f7ff ffa5 	bl	fb4 <pm_system_resume>
	k_sched_unlock();
    106a:	f002 f859 	bl	3120 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    106e:	7820      	ldrb	r0, [r4, #0]
}
    1070:	b009      	add	sp, #36	; 0x24
    1072:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1074:	20000940 	.word	0x20000940
    1078:	20000004 	.word	0x20000004
    107c:	000f423f 	.word	0x000f423f
    1080:	000f4240 	.word	0x000f4240
    1084:	00003bf5 	.word	0x00003bf5

00001088 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1088:	b510      	push	{r4, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    108a:	4807      	ldr	r0, [pc, #28]	; (10a8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    108c:	4c07      	ldr	r4, [pc, #28]	; (10ac <uart_console_init+0x24>)
    108e:	f001 fd77 	bl	2b80 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1092:	4b07      	ldr	r3, [pc, #28]	; (10b0 <uart_console_init+0x28>)
    1094:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1096:	4620      	mov	r0, r4
    1098:	f000 fdbe 	bl	1c18 <__stdout_hook_install>
	__printk_hook_install(console_out);
    109c:	4620      	mov	r0, r4
    109e:	f7ff fab1 	bl	604 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    10a2:	2000      	movs	r0, #0
    10a4:	bd10      	pop	{r4, pc}
    10a6:	bf00      	nop
    10a8:	000042ef 	.word	0x000042ef
    10ac:	000010b5 	.word	0x000010b5
    10b0:	2000094c 	.word	0x2000094c

000010b4 <console_out>:
	if ('\n' == c) {
    10b4:	280a      	cmp	r0, #10
{
    10b6:	b538      	push	{r3, r4, r5, lr}
    10b8:	4d07      	ldr	r5, [pc, #28]	; (10d8 <console_out+0x24>)
    10ba:	4604      	mov	r4, r0
	if ('\n' == c) {
    10bc:	d104      	bne.n	10c8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    10be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    10c0:	6883      	ldr	r3, [r0, #8]
    10c2:	210d      	movs	r1, #13
    10c4:	685b      	ldr	r3, [r3, #4]
    10c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    10c8:	6828      	ldr	r0, [r5, #0]
    10ca:	6883      	ldr	r3, [r0, #8]
    10cc:	b2e1      	uxtb	r1, r4
    10ce:	685b      	ldr	r3, [r3, #4]
    10d0:	4798      	blx	r3
}
    10d2:	4620      	mov	r0, r4
    10d4:	bd38      	pop	{r3, r4, r5, pc}
    10d6:	bf00      	nop
    10d8:	2000094c 	.word	0x2000094c

000010dc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    10dc:	4b08      	ldr	r3, [pc, #32]	; (1100 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    10de:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    10e0:	1ac3      	subs	r3, r0, r3
{
    10e2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    10e4:	4907      	ldr	r1, [pc, #28]	; (1104 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    10e6:	109b      	asrs	r3, r3, #2
{
    10e8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    10ea:	4359      	muls	r1, r3
    10ec:	4806      	ldr	r0, [pc, #24]	; (1108 <onoff_stop+0x2c>)
    10ee:	2240      	movs	r2, #64	; 0x40
    10f0:	f002 fcc7 	bl	3a82 <stop>
	notify(mgr, res);
    10f4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    10f6:	4601      	mov	r1, r0
	notify(mgr, res);
    10f8:	4620      	mov	r0, r4
}
    10fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    10fe:	4718      	bx	r3
    1100:	20000964 	.word	0x20000964
    1104:	b6db6db7 	.word	0xb6db6db7
    1108:	00003fb4 	.word	0x00003fb4

0000110c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    110c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    110e:	4c0c      	ldr	r4, [pc, #48]	; (1140 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1110:	4a0c      	ldr	r2, [pc, #48]	; (1144 <onoff_start+0x38>)
    1112:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1114:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1116:	9300      	str	r3, [sp, #0]
{
    1118:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    111a:	460b      	mov	r3, r1
    111c:	490a      	ldr	r1, [pc, #40]	; (1148 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    111e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1120:	4361      	muls	r1, r4
{
    1122:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1124:	4809      	ldr	r0, [pc, #36]	; (114c <onoff_start+0x40>)
    1126:	f002 fcd8 	bl	3ada <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    112a:	1e01      	subs	r1, r0, #0
    112c:	da05      	bge.n	113a <onoff_start+0x2e>
		notify(mgr, err);
    112e:	4630      	mov	r0, r6
    1130:	462b      	mov	r3, r5
	}
}
    1132:	b002      	add	sp, #8
    1134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1138:	4718      	bx	r3
}
    113a:	b002      	add	sp, #8
    113c:	bd70      	pop	{r4, r5, r6, pc}
    113e:	bf00      	nop
    1140:	20000964 	.word	0x20000964
    1144:	00003b4b 	.word	0x00003b4b
    1148:	b6db6db7 	.word	0xb6db6db7
    114c:	00003fb4 	.word	0x00003fb4

00001150 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1150:	2200      	movs	r2, #0
{
    1152:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1154:	2101      	movs	r1, #1
{
    1156:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1158:	4610      	mov	r0, r2
    115a:	f000 fa9d 	bl	1698 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    115e:	2000      	movs	r0, #0
    1160:	f000 fa7c 	bl	165c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1164:	480f      	ldr	r0, [pc, #60]	; (11a4 <clk_init+0x54>)
    1166:	f001 f9fd 	bl	2564 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    116a:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <clk_init+0x58>)
    116c:	4298      	cmp	r0, r3
    116e:	d115      	bne.n	119c <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1170:	f002 fdda 	bl	3d28 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1174:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1176:	490d      	ldr	r1, [pc, #52]	; (11ac <clk_init+0x5c>)
    1178:	4630      	mov	r0, r6
    117a:	f002 fb9e 	bl	38ba <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    117e:	2800      	cmp	r0, #0
    1180:	db0b      	blt.n	119a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    1182:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1184:	4909      	ldr	r1, [pc, #36]	; (11ac <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1186:	2501      	movs	r5, #1
    1188:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    118a:	f104 001c 	add.w	r0, r4, #28
    118e:	f002 fb94 	bl	38ba <onoff_manager_init>
		if (err < 0) {
    1192:	2800      	cmp	r0, #0
    1194:	db01      	blt.n	119a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1196:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1198:	2000      	movs	r0, #0
}
    119a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    119c:	f06f 0004 	mvn.w	r0, #4
    11a0:	e7fb      	b.n	119a <clk_init+0x4a>
    11a2:	bf00      	nop
    11a4:	000011e5 	.word	0x000011e5
    11a8:	0bad0000 	.word	0x0bad0000
    11ac:	000041bc 	.word	0x000041bc

000011b0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    11b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    11b2:	230c      	movs	r3, #12
    11b4:	4809      	ldr	r0, [pc, #36]	; (11dc <clkstarted_handle.constprop.0+0x2c>)
    11b6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    11b8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    11ba:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    11bc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    11c0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    11c2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    11c4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    11c6:	4418      	add	r0, r3
    11c8:	f002 fc48 	bl	3a5c <set_on_state>
	if (callback) {
    11cc:	b12d      	cbz	r5, 11da <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    11ce:	4632      	mov	r2, r6
    11d0:	462b      	mov	r3, r5
    11d2:	4803      	ldr	r0, [pc, #12]	; (11e0 <clkstarted_handle.constprop.0+0x30>)
}
    11d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    11d8:	4718      	bx	r3
}
    11da:	bd70      	pop	{r4, r5, r6, pc}
    11dc:	20000964 	.word	0x20000964
    11e0:	00003fb4 	.word	0x00003fb4

000011e4 <clock_event_handler>:
	switch (event) {
    11e4:	b110      	cbz	r0, 11ec <clock_event_handler+0x8>
    11e6:	2801      	cmp	r0, #1
    11e8:	d004      	beq.n	11f4 <clock_event_handler+0x10>
    11ea:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    11ec:	4b03      	ldr	r3, [pc, #12]	; (11fc <clock_event_handler+0x18>)
    11ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    11f0:	075b      	lsls	r3, r3, #29
    11f2:	d101      	bne.n	11f8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    11f4:	f7ff bfdc 	b.w	11b0 <clkstarted_handle.constprop.0>
}
    11f8:	4770      	bx	lr
    11fa:	bf00      	nop
    11fc:	20000964 	.word	0x20000964

00001200 <generic_hfclk_start>:
{
    1200:	b508      	push	{r3, lr}
	__asm__ volatile(
    1202:	f04f 0320 	mov.w	r3, #32
    1206:	f3ef 8111 	mrs	r1, BASEPRI
    120a:	f383 8811 	msr	BASEPRI, r3
    120e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1212:	4a12      	ldr	r2, [pc, #72]	; (125c <generic_hfclk_start+0x5c>)
    1214:	6813      	ldr	r3, [r2, #0]
    1216:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    121a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    121e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1220:	d00c      	beq.n	123c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1226:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    122a:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    122e:	f013 0301 	ands.w	r3, r3, #1
    1232:	d003      	beq.n	123c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1234:	480a      	ldr	r0, [pc, #40]	; (1260 <generic_hfclk_start+0x60>)
    1236:	f002 fc11 	bl	3a5c <set_on_state>
			already_started = true;
    123a:	2301      	movs	r3, #1
	__asm__ volatile(
    123c:	f381 8811 	msr	BASEPRI, r1
    1240:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1244:	b123      	cbz	r3, 1250 <generic_hfclk_start+0x50>
}
    1246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    124a:	2000      	movs	r0, #0
    124c:	f7ff bfb0 	b.w	11b0 <clkstarted_handle.constprop.0>
}
    1250:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1254:	2001      	movs	r0, #1
    1256:	f001 b995 	b.w	2584 <nrfx_clock_start>
    125a:	bf00      	nop
    125c:	200009b4 	.word	0x200009b4
    1260:	200009a4 	.word	0x200009a4

00001264 <api_blocking_start>:
{
    1264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1266:	2200      	movs	r2, #0
    1268:	2301      	movs	r3, #1
    126a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    126e:	4a09      	ldr	r2, [pc, #36]	; (1294 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1270:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1274:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1276:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    127a:	f002 fc5f 	bl	3b3c <api_start>
	if (err < 0) {
    127e:	2800      	cmp	r0, #0
    1280:	db05      	blt.n	128e <api_blocking_start+0x2a>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1286:	2300      	movs	r3, #0
    1288:	4668      	mov	r0, sp
    128a:	f001 fe11 	bl	2eb0 <z_impl_k_sem_take>
}
    128e:	b005      	add	sp, #20
    1290:	f85d fb04 	ldr.w	pc, [sp], #4
    1294:	00003b63 	.word	0x00003b63

00001298 <lfclk_start>:
{
    1298:	b510      	push	{r4, lr}
	if (!once) {
    129a:	4c07      	ldr	r4, [pc, #28]	; (12b8 <lfclk_start+0x20>)
    129c:	7823      	ldrb	r3, [r4, #0]
    129e:	b92b      	cbnz	r3, 12ac <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    12a0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    12a4:	f002 fe63 	bl	3f6e <z_impl_k_busy_wait>
		once = true;
    12a8:	2301      	movs	r3, #1
    12aa:	7023      	strb	r3, [r4, #0]
}
    12ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    12b0:	2000      	movs	r0, #0
    12b2:	f001 b967 	b.w	2584 <nrfx_clock_start>
    12b6:	bf00      	nop
    12b8:	20000aa9 	.word	0x20000aa9

000012bc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    12bc:	4b09      	ldr	r3, [pc, #36]	; (12e4 <generic_hfclk_stop+0x28>)
    12be:	f3bf 8f5b 	dmb	ish
    12c2:	e853 2f00 	ldrex	r2, [r3]
    12c6:	f022 0102 	bic.w	r1, r2, #2
    12ca:	e843 1000 	strex	r0, r1, [r3]
    12ce:	2800      	cmp	r0, #0
    12d0:	d1f7      	bne.n	12c2 <generic_hfclk_stop+0x6>
    12d2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    12d6:	07d3      	lsls	r3, r2, #31
    12d8:	d402      	bmi.n	12e0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    12da:	2001      	movs	r0, #1
    12dc:	f001 b99a 	b.w	2614 <nrfx_clock_stop>
}
    12e0:	4770      	bx	lr
    12e2:	bf00      	nop
    12e4:	200009b4 	.word	0x200009b4

000012e8 <z_nrf_clock_control_lf_on>:
{
    12e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    12ec:	4939      	ldr	r1, [pc, #228]	; (13d4 <z_nrf_clock_control_lf_on+0xec>)
    12ee:	f3bf 8f5b 	dmb	ish
    12f2:	4607      	mov	r7, r0
    12f4:	2201      	movs	r2, #1
    12f6:	e851 3f00 	ldrex	r3, [r1]
    12fa:	e841 2000 	strex	r0, r2, [r1]
    12fe:	2800      	cmp	r0, #0
    1300:	d1f9      	bne.n	12f6 <z_nrf_clock_control_lf_on+0xe>
    1302:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1306:	b933      	cbnz	r3, 1316 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1308:	4933      	ldr	r1, [pc, #204]	; (13d8 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    130a:	4834      	ldr	r0, [pc, #208]	; (13dc <z_nrf_clock_control_lf_on+0xf4>)
    130c:	604b      	str	r3, [r1, #4]
    130e:	60cb      	str	r3, [r1, #12]
    1310:	608a      	str	r2, [r1, #8]
    1312:	f002 fae5 	bl	38e0 <onoff_request>
	switch (start_mode) {
    1316:	1e7b      	subs	r3, r7, #1
    1318:	2b01      	cmp	r3, #1
    131a:	d82f      	bhi.n	137c <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    131c:	2f01      	cmp	r7, #1
    131e:	d107      	bne.n	1330 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1324:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1328:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    132c:	2b01      	cmp	r3, #1
    132e:	d025      	beq.n	137c <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1330:	f002 fd2a 	bl	3d88 <k_is_in_isr>
    1334:	4604      	mov	r4, r0
    1336:	b918      	cbnz	r0, 1340 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1338:	4b29      	ldr	r3, [pc, #164]	; (13e0 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    133a:	781b      	ldrb	r3, [r3, #0]
    133c:	2b00      	cmp	r3, #0
    133e:	d141      	bne.n	13c4 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1340:	f04f 0320 	mov.w	r3, #32
    1344:	f3ef 8611 	mrs	r6, BASEPRI
    1348:	f383 8811 	msr	BASEPRI, r3
    134c:	f3bf 8f6f 	isb	sy
    1350:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1352:	f8df 8090 	ldr.w	r8, [pc, #144]	; 13e4 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1356:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    135a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    135e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1362:	03d2      	lsls	r2, r2, #15
    1364:	d50c      	bpl.n	1380 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1366:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    136a:	2b01      	cmp	r3, #1
    136c:	d001      	beq.n	1372 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    136e:	2f01      	cmp	r7, #1
    1370:	d106      	bne.n	1380 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1372:	b30c      	cbz	r4, 13b8 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1374:	f386 8811 	msr	BASEPRI, r6
    1378:	f3bf 8f6f 	isb	sy
}
    137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1380:	b1ac      	cbz	r4, 13ae <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1382:	4630      	mov	r0, r6
    1384:	f000 f9f0 	bl	1768 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1388:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    138c:	2b00      	cmp	r3, #0
    138e:	d1e4      	bne.n	135a <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1390:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1394:	2a00      	cmp	r2, #0
    1396:	d0e0      	beq.n	135a <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1398:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    139c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    13a0:	2301      	movs	r3, #1
    13a2:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    13a6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    13aa:	60ab      	str	r3, [r5, #8]
}
    13ac:	e7d5      	b.n	135a <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    13ae:	2100      	movs	r1, #0
    13b0:	2021      	movs	r0, #33	; 0x21
    13b2:	f002 f833 	bl	341c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    13b6:	e7e7      	b.n	1388 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    13b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    13bc:	2202      	movs	r2, #2
    13be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    13c2:	e7db      	b.n	137c <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    13c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    13c8:	2202      	movs	r2, #2
    13ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    13ce:	4606      	mov	r6, r0
}
    13d0:	e7bf      	b.n	1352 <z_nrf_clock_control_lf_on+0x6a>
    13d2:	bf00      	nop
    13d4:	200009b8 	.word	0x200009b8
    13d8:	20000954 	.word	0x20000954
    13dc:	20000980 	.word	0x20000980
    13e0:	20000aac 	.word	0x20000aac
    13e4:	e000e100 	.word	0xe000e100

000013e8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    13e8:	4a04      	ldr	r2, [pc, #16]	; (13fc <sys_clock_timeout_handler+0x14>)
    13ea:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    13ec:	1ac8      	subs	r0, r1, r3
    13ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    13f2:	4403      	add	r3, r0
    13f4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    13f6:	f002 b963 	b.w	36c0 <sys_clock_announce>
    13fa:	bf00      	nop
    13fc:	200009cc 	.word	0x200009cc

00001400 <set_absolute_alarm>:
{
    1400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1404:	0086      	lsls	r6, r0, #2
    1406:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    140a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    140e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    1412:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1414:	b2a4      	uxth	r4, r4
    1416:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    141a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    141e:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1422:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1490 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1426:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    142a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    142e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1430:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1434:	eba3 0309 	sub.w	r3, r3, r9
    1438:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    143c:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1440:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1442:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1446:	d102      	bne.n	144e <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    1448:	2013      	movs	r0, #19
    144a:	f002 fd90 	bl	3f6e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    144e:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    1452:	1aab      	subs	r3, r5, r2
    1454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1458:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    145c:	bf88      	it	hi
    145e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1460:	2300      	movs	r3, #0
    1462:	6023      	str	r3, [r4, #0]
    1464:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1466:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    146a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    146e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1472:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1476:	4599      	cmp	r9, r3
    1478:	d006      	beq.n	1488 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    147a:	1aeb      	subs	r3, r5, r3
    147c:	3b02      	subs	r3, #2
    147e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1486:	d801      	bhi.n	148c <set_absolute_alarm+0x8c>
}
    1488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    148c:	462b      	mov	r3, r5
    148e:	e7cf      	b.n	1430 <set_absolute_alarm+0x30>
    1490:	40011000 	.word	0x40011000

00001494 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1494:	b570      	push	{r4, r5, r6, lr}
    1496:	4d15      	ldr	r5, [pc, #84]	; (14ec <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    1498:	4c15      	ldr	r4, [pc, #84]	; (14f0 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    149a:	2600      	movs	r6, #0
    149c:	682b      	ldr	r3, [r5, #0]
    149e:	2000      	movs	r0, #0
    14a0:	b106      	cbz	r6, 14a4 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    14a2:	bd70      	pop	{r4, r5, r6, pc}
    14a4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    14a8:	03d2      	lsls	r2, r2, #15
    14aa:	d5fa      	bpl.n	14a2 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    14ac:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    14b0:	2a00      	cmp	r2, #0
    14b2:	d0f6      	beq.n	14a2 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    14b4:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    14b8:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    14bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    14c0:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    14c4:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    14c8:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    14cc:	1a72      	subs	r2, r6, r1
    14ce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    14d2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    14d6:	bf88      	it	hi
    14d8:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    14da:	2601      	movs	r6, #1
			if (handler) {
    14dc:	b11b      	cbz	r3, 14e6 <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    14de:	686a      	ldr	r2, [r5, #4]
    14e0:	6028      	str	r0, [r5, #0]
    14e2:	4798      	blx	r3
    14e4:	e7da      	b.n	149c <rtc_nrf_isr+0x8>
    14e6:	602b      	str	r3, [r5, #0]
}
    14e8:	e7db      	b.n	14a2 <rtc_nrf_isr+0xe>
    14ea:	bf00      	nop
    14ec:	200009c0 	.word	0x200009c0
    14f0:	40011000 	.word	0x40011000

000014f4 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    14f4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    14f6:	4c0f      	ldr	r4, [pc, #60]	; (1534 <sys_clock_driver_init+0x40>)
    14f8:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    14fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    14fe:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1502:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    1506:	4b0c      	ldr	r3, [pc, #48]	; (1538 <sys_clock_driver_init+0x44>)
    1508:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    150c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1510:	2101      	movs	r1, #1
    1512:	462a      	mov	r2, r5
    1514:	2011      	movs	r0, #17
    1516:	f000 f8bf 	bl	1698 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    151a:	2011      	movs	r0, #17
    151c:	f000 f89e 	bl	165c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1520:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    1522:	4a06      	ldr	r2, [pc, #24]	; (153c <sys_clock_driver_init+0x48>)
    1524:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1526:	2002      	movs	r0, #2
    1528:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    152a:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    152c:	f7ff fedc 	bl	12e8 <z_nrf_clock_control_lf_on>

	return 0;
}
    1530:	4628      	mov	r0, r5
    1532:	bd38      	pop	{r3, r4, r5, pc}
    1534:	40011000 	.word	0x40011000
    1538:	e000e100 	.word	0xe000e100
    153c:	200009c8 	.word	0x200009c8

00001540 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1540:	4a13      	ldr	r2, [pc, #76]	; (1590 <sys_clock_set_timeout+0x50>)
    1542:	f1b0 3fff 	cmp.w	r0, #4294967295
    1546:	bf14      	ite	ne
    1548:	4603      	movne	r3, r0
    154a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    154c:	3b01      	subs	r3, #1
    154e:	2b00      	cmp	r3, #0
    1550:	dd1c      	ble.n	158c <sys_clock_set_timeout+0x4c>
    1552:	4293      	cmp	r3, r2
    1554:	bfa8      	it	ge
    1556:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    1558:	4a0e      	ldr	r2, [pc, #56]	; (1594 <sys_clock_set_timeout+0x54>)
    155a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    155e:	4a0e      	ldr	r2, [pc, #56]	; (1598 <sys_clock_set_timeout+0x58>)
    1560:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1562:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1564:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1568:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    156c:	bf18      	it	ne
    156e:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1570:	3201      	adds	r2, #1
    1572:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    1574:	4a09      	ldr	r2, [pc, #36]	; (159c <sys_clock_set_timeout+0x5c>)
    1576:	480a      	ldr	r0, [pc, #40]	; (15a0 <sys_clock_set_timeout+0x60>)
    1578:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    157a:	2000      	movs	r0, #0
    157c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    157e:	4a04      	ldr	r2, [pc, #16]	; (1590 <sys_clock_set_timeout+0x50>)
    1580:	4293      	cmp	r3, r2
    1582:	bf94      	ite	ls
    1584:	18c9      	addls	r1, r1, r3
    1586:	1889      	addhi	r1, r1, r2
    1588:	f7ff bf3a 	b.w	1400 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    158c:	2300      	movs	r3, #0
    158e:	e7e3      	b.n	1558 <sys_clock_set_timeout+0x18>
    1590:	007fffff 	.word	0x007fffff
    1594:	40011000 	.word	0x40011000
    1598:	200009cc 	.word	0x200009cc
    159c:	200009c0 	.word	0x200009c0
    15a0:	000013e9 	.word	0x000013e9

000015a4 <sys_clock_elapsed>:
    15a4:	4b04      	ldr	r3, [pc, #16]	; (15b8 <sys_clock_elapsed+0x14>)
    15a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    15aa:	4b04      	ldr	r3, [pc, #16]	; (15bc <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	1ac0      	subs	r0, r0, r3
}
    15b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15b4:	4770      	bx	lr
    15b6:	bf00      	nop
    15b8:	40011000 	.word	0x40011000
    15bc:	200009cc 	.word	0x200009cc

000015c0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    15c0:	4a09      	ldr	r2, [pc, #36]	; (15e8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    15c2:	490a      	ldr	r1, [pc, #40]	; (15ec <arch_swap+0x2c>)
	_current->arch.basepri = key;
    15c4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    15c6:	6809      	ldr	r1, [r1, #0]
    15c8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15ca:	4909      	ldr	r1, [pc, #36]	; (15f0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    15cc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    15ce:	684b      	ldr	r3, [r1, #4]
    15d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    15d4:	604b      	str	r3, [r1, #4]
    15d6:	2300      	movs	r3, #0
    15d8:	f383 8811 	msr	BASEPRI, r3
    15dc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    15e0:	6893      	ldr	r3, [r2, #8]
}
    15e2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    15e4:	4770      	bx	lr
    15e6:	bf00      	nop
    15e8:	20000a68 	.word	0x20000a68
    15ec:	0000424c 	.word	0x0000424c
    15f0:	e000ed00 	.word	0xe000ed00

000015f4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    15f4:	490f      	ldr	r1, [pc, #60]	; (1634 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    15f6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    15f8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    15fc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    15fe:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1602:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1606:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1608:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    160c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1610:	4f09      	ldr	r7, [pc, #36]	; (1638 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1612:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1616:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1618:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    161a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    161c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    161e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1620:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1622:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1626:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    162a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    162e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1632:	4770      	bx	lr
    ldr r1, =_kernel
    1634:	20000a68 	.word	0x20000a68
    ldr v4, =_SCS_ICSR
    1638:	e000ed04 	.word	0xe000ed04

0000163c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    163c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1640:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1642:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1646:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    164a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    164c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1650:	2902      	cmp	r1, #2
    beq _oops
    1652:	d0ff      	beq.n	1654 <_oops>

00001654 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1654:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1656:	f002 fa8f 	bl	3b78 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    165a:	bd01      	pop	{r0, pc}

0000165c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    165c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    165e:	2b00      	cmp	r3, #0
    1660:	db08      	blt.n	1674 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1662:	2201      	movs	r2, #1
    1664:	f000 001f 	and.w	r0, r0, #31
    1668:	fa02 f000 	lsl.w	r0, r2, r0
    166c:	095b      	lsrs	r3, r3, #5
    166e:	4a02      	ldr	r2, [pc, #8]	; (1678 <arch_irq_enable+0x1c>)
    1670:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	e000e100 	.word	0xe000e100

0000167c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    167c:	4b05      	ldr	r3, [pc, #20]	; (1694 <arch_irq_is_enabled+0x18>)
    167e:	0942      	lsrs	r2, r0, #5
    1680:	f000 001f 	and.w	r0, r0, #31
    1684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1688:	2301      	movs	r3, #1
    168a:	fa03 f000 	lsl.w	r0, r3, r0
}
    168e:	4010      	ands	r0, r2
    1690:	4770      	bx	lr
    1692:	bf00      	nop
    1694:	e000e100 	.word	0xe000e100

00001698 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1698:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    169a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    169c:	bfa8      	it	ge
    169e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    16a2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16a6:	bfb8      	it	lt
    16a8:	4b06      	ldrlt	r3, [pc, #24]	; (16c4 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16aa:	ea4f 1141 	mov.w	r1, r1, lsl #5
    16ae:	bfac      	ite	ge
    16b0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16b4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16b8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16ba:	bfb4      	ite	lt
    16bc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16be:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    16c2:	4770      	bx	lr
    16c4:	e000ed14 	.word	0xe000ed14

000016c8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    16c8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    16ca:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    16cc:	4b04      	ldr	r3, [pc, #16]	; (16e0 <_arch_isr_direct_pm+0x18>)
    16ce:	6a18      	ldr	r0, [r3, #32]
    16d0:	b118      	cbz	r0, 16da <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    16d2:	2200      	movs	r2, #0
    16d4:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    16d6:	f002 fb5d 	bl	3d94 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    16da:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    16dc:	bd08      	pop	{r3, pc}
    16de:	bf00      	nop
    16e0:	20000a68 	.word	0x20000a68

000016e4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    16e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    16e8:	9b00      	ldr	r3, [sp, #0]
    16ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    16ee:	490a      	ldr	r1, [pc, #40]	; (1718 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    16f0:	9b01      	ldr	r3, [sp, #4]
    16f2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    16f6:	9b02      	ldr	r3, [sp, #8]
    16f8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    16fc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1704:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1708:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    170c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    170e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1710:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1712:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1714:	4770      	bx	lr
    1716:	bf00      	nop
    1718:	00003973 	.word	0x00003973

0000171c <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    171c:	4b07      	ldr	r3, [pc, #28]	; (173c <arch_switch_to_main_thread+0x20>)
    171e:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    1720:	4610      	mov	r0, r2
    1722:	f381 8809 	msr	PSP, r1
    1726:	2100      	movs	r1, #0
    1728:	b663      	cpsie	if
    172a:	f381 8811 	msr	BASEPRI, r1
    172e:	f3bf 8f6f 	isb	sy
    1732:	2200      	movs	r2, #0
    1734:	2300      	movs	r3, #0
    1736:	f002 f91c 	bl	3972 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    173a:	bf00      	nop
    173c:	20000a68 	.word	0x20000a68

00001740 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1740:	4901      	ldr	r1, [pc, #4]	; (1748 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1742:	2210      	movs	r2, #16
	str	r2, [r1]
    1744:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1746:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1748:	e000ed10 	.word	0xe000ed10

0000174c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    174c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    174e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1750:	f380 8811 	msr	BASEPRI, r0
	isb
    1754:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1758:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    175c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    175e:	b662      	cpsie	i
	isb
    1760:	f3bf 8f6f 	isb	sy

	bx	lr
    1764:	4770      	bx	lr
    1766:	bf00      	nop

00001768 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1768:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    176a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    176c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1770:	bf20      	wfe

	msr	BASEPRI, r0
    1772:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1776:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1778:	4770      	bx	lr
    177a:	bf00      	nop

0000177c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    177c:	bf30      	wfi
    b z_SysNmiOnReset
    177e:	f7ff bffd 	b.w	177c <z_SysNmiOnReset>
    1782:	bf00      	nop

00001784 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1784:	4a0b      	ldr	r2, [pc, #44]	; (17b4 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    1786:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1788:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <z_arm_prep_c+0x34>)
    178a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    178e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1790:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1794:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1798:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    179c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    17a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    17a4:	f001 fa16 	bl	2bd4 <z_bss_zero>
	z_data_copy();
    17a8:	f001 feaa 	bl	3500 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    17ac:	f000 f978 	bl	1aa0 <z_arm_interrupt_init>
	z_cstart();
    17b0:	f001 fa34 	bl	2c1c <z_cstart>
    17b4:	00000000 	.word	0x00000000
    17b8:	e000ed00 	.word	0xe000ed00

000017bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    17bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    17be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    17c0:	4a0b      	ldr	r2, [pc, #44]	; (17f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    17c2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    17c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    17c6:	bf1e      	ittt	ne
	movne	r1, #0
    17c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    17ca:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    17cc:	f002 fae2 	blne	3d94 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    17d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    17d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    17d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    17da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    17de:	4905      	ldr	r1, [pc, #20]	; (17f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    17e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    17e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    17e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    17e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    17ea:	4903      	ldr	r1, [pc, #12]	; (17f8 <_isr_wrapper+0x3c>)
	bx r1
    17ec:	4708      	bx	r1
    17ee:	0000      	.short	0x0000
	ldr r2, =_kernel
    17f0:	20000a68 	.word	0x20000a68
	ldr r1, =_sw_isr_table
    17f4:	00004014 	.word	0x00004014
	ldr r1, =z_arm_int_exit
    17f8:	000019fd 	.word	0x000019fd

000017fc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    17fc:	2000      	movs	r0, #0
    msr CONTROL, r0
    17fe:	f380 8814 	msr	CONTROL, r0
    isb
    1802:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1806:	f002 fbb7 	bl	3f78 <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    180a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    180c:	490d      	ldr	r1, [pc, #52]	; (1844 <__start+0x48>)
    str r0, [r1]
    180e:	6008      	str	r0, [r1, #0]
    dsb
    1810:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1814:	480c      	ldr	r0, [pc, #48]	; (1848 <__start+0x4c>)
    msr msp, r0
    1816:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    181a:	f000 f90f 	bl	1a3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    181e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1820:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1824:	4809      	ldr	r0, [pc, #36]	; (184c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1826:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    182a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    182c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1830:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1834:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1836:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1838:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    183c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1840:	f7ff ffa0 	bl	1784 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1844:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1848:	20000eb0 	.word	0x20000eb0
    ldr r0, =z_interrupt_stacks
    184c:	20000ff0 	.word	0x20000ff0

00001850 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1850:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1854:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1858:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    185a:	4672      	mov	r2, lr
	bl z_arm_fault
    185c:	f000 f840 	bl	18e0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1860:	bd01      	pop	{r0, pc}
    1862:	bf00      	nop

00001864 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1864:	4b0d      	ldr	r3, [pc, #52]	; (189c <bus_fault.constprop.0+0x38>)
    1866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    186a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    186c:	0592      	lsls	r2, r2, #22
    186e:	d508      	bpl.n	1882 <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1870:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1874:	0412      	lsls	r2, r2, #16
    1876:	d504      	bpl.n	1882 <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1878:	b118      	cbz	r0, 1882 <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    187a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    187c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1880:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1882:	4b06      	ldr	r3, [pc, #24]	; (189c <bus_fault.constprop.0+0x38>)
    1884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1888:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    188a:	bf58      	it	pl
    188c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    188e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1890:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1892:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1896:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1898:	7008      	strb	r0, [r1, #0]

	return reason;
}
    189a:	4770      	bx	lr
    189c:	e000ed00 	.word	0xe000ed00

000018a0 <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    18a0:	4b0e      	ldr	r3, [pc, #56]	; (18dc <mem_manage_fault.constprop.0+0x3c>)
    18a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18a8:	0792      	lsls	r2, r2, #30
    18aa:	d508      	bpl.n	18be <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    18ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18b0:	0612      	lsls	r2, r2, #24
    18b2:	d504      	bpl.n	18be <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    18b4:	b118      	cbz	r0, 18be <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    18b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    18bc:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    18be:	4b07      	ldr	r3, [pc, #28]	; (18dc <mem_manage_fault.constprop.0+0x3c>)
    18c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    18c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    18c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    18c6:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    18c8:	bf58      	it	pl
    18ca:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    18cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    18ce:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    18d0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    18d4:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    18d6:	7008      	strb	r0, [r1, #0]
}
    18d8:	4770      	bx	lr
    18da:	bf00      	nop
    18dc:	e000ed00 	.word	0xe000ed00

000018e0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    18e0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18e2:	4b41      	ldr	r3, [pc, #260]	; (19e8 <z_arm_fault+0x108>)
    18e4:	685b      	ldr	r3, [r3, #4]
{
    18e6:	b08a      	sub	sp, #40	; 0x28
    18e8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    18ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
    18ee:	2500      	movs	r5, #0
    18f0:	f385 8811 	msr	BASEPRI, r5
    18f4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    18f8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    18fc:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1900:	d111      	bne.n	1926 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1902:	f002 010c 	and.w	r1, r2, #12
    1906:	2908      	cmp	r1, #8
    1908:	d00d      	beq.n	1926 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    190a:	0711      	lsls	r1, r2, #28
    190c:	d401      	bmi.n	1912 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    190e:	4606      	mov	r6, r0
			*nested_exc = true;
    1910:	2501      	movs	r5, #1
	*recoverable = false;
    1912:	2200      	movs	r2, #0
	switch (fault) {
    1914:	3b03      	subs	r3, #3
	*recoverable = false;
    1916:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    191a:	2b03      	cmp	r3, #3
    191c:	d85c      	bhi.n	19d8 <z_arm_fault+0xf8>
    191e:	e8df f003 	tbb	[pc, r3]
    1922:	4604      	.short	0x4604
    1924:	4e4a      	.short	0x4e4a
		return NULL;
    1926:	462e      	mov	r6, r5
    1928:	e7f3      	b.n	1912 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    192a:	4b2f      	ldr	r3, [pc, #188]	; (19e8 <z_arm_fault+0x108>)
    192c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    192e:	f014 0402 	ands.w	r4, r4, #2
    1932:	d151      	bne.n	19d8 <z_arm_fault+0xf8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1936:	0052      	lsls	r2, r2, #1
    1938:	d521      	bpl.n	197e <z_arm_fault+0x9e>
		if (SCB_MMFSR != 0) {
    193a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    193e:	b132      	cbz	r2, 194e <z_arm_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
    1940:	f10d 0107 	add.w	r1, sp, #7
    1944:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1946:	f7ff ffab 	bl	18a0 <mem_manage_fault.constprop.0>
		reason = bus_fault(esf, 0, recoverable);
    194a:	4604      	mov	r4, r0
		break;
    194c:	e017      	b.n	197e <z_arm_fault+0x9e>
		} else if (SCB_BFSR != 0) {
    194e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1952:	b12a      	cbz	r2, 1960 <z_arm_fault+0x80>
			reason = bus_fault(esf, 1, recoverable);
    1954:	f10d 0107 	add.w	r1, sp, #7
    1958:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    195a:	f7ff ff83 	bl	1864 <bus_fault.constprop.0>
    195e:	e7f4      	b.n	194a <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    1960:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1962:	b292      	uxth	r2, r2
    1964:	b15a      	cbz	r2, 197e <z_arm_fault+0x9e>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1966:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    196a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    196c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    196e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1974:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1978:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    197c:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    197e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1982:	b993      	cbnz	r3, 19aa <z_arm_fault+0xca>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1984:	2220      	movs	r2, #32
    1986:	4631      	mov	r1, r6
    1988:	a802      	add	r0, sp, #8
    198a:	f002 f91c 	bl	3bc6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    198e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1990:	b325      	cbz	r5, 19dc <z_arm_fault+0xfc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1992:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1996:	b922      	cbnz	r2, 19a2 <z_arm_fault+0xc2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1998:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    199c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    19a0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    19a2:	a902      	add	r1, sp, #8
    19a4:	4620      	mov	r0, r4
    19a6:	f002 f8e5 	bl	3b74 <z_arm_fatal_error>
}
    19aa:	b00a      	add	sp, #40	; 0x28
    19ac:	bd70      	pop	{r4, r5, r6, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    19ae:	f10d 0107 	add.w	r1, sp, #7
    19b2:	2000      	movs	r0, #0
    19b4:	e7c7      	b.n	1946 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    19b6:	f10d 0107 	add.w	r1, sp, #7
    19ba:	2000      	movs	r0, #0
    19bc:	e7cd      	b.n	195a <z_arm_fault+0x7a>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    19be:	4b0a      	ldr	r3, [pc, #40]	; (19e8 <z_arm_fault+0x108>)
    19c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    19c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    19c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    19c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    19c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    19ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    19cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19ce:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    19d2:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    19d6:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    19d8:	2400      	movs	r4, #0
    19da:	e7d0      	b.n	197e <z_arm_fault+0x9e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    19dc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    19e0:	f023 0301 	bic.w	r3, r3, #1
    19e4:	e7dc      	b.n	19a0 <z_arm_fault+0xc0>
    19e6:	bf00      	nop
    19e8:	e000ed00 	.word	0xe000ed00

000019ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    19ec:	4a02      	ldr	r2, [pc, #8]	; (19f8 <z_arm_fault_init+0xc>)
    19ee:	6953      	ldr	r3, [r2, #20]
    19f0:	f043 0310 	orr.w	r3, r3, #16
    19f4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    19f6:	4770      	bx	lr
    19f8:	e000ed00 	.word	0xe000ed00

000019fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    19fc:	4b04      	ldr	r3, [pc, #16]	; (1a10 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    19fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1a00:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    1a02:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1a04:	d003      	beq.n	1a0e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1a06:	4903      	ldr	r1, [pc, #12]	; (1a14 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1a0c:	600a      	str	r2, [r1, #0]

00001a0e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1a0e:	4770      	bx	lr
	ldr r3, =_kernel
    1a10:	20000a68 	.word	0x20000a68
	ldr r1, =_SCS_ICSR
    1a14:	e000ed04 	.word	0xe000ed04

00001a18 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1a18:	4907      	ldr	r1, [pc, #28]	; (1a38 <z_arm_clear_arm_mpu_config+0x20>)
    1a1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1a1e:	2300      	movs	r3, #0
	int num_regions =
    1a20:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1a24:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1a26:	4293      	cmp	r3, r2
    1a28:	d100      	bne.n	1a2c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1a2a:	4770      	bx	lr
  MPU->RNR = rnr;
    1a2c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1a30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1a34:	3301      	adds	r3, #1
    1a36:	e7f6      	b.n	1a26 <z_arm_clear_arm_mpu_config+0xe>
    1a38:	e000ed00 	.word	0xe000ed00

00001a3c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1a3c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1a3e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1a40:	2300      	movs	r3, #0
    1a42:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1a46:	f7ff ffe7 	bl	1a18 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1a4a:	4b14      	ldr	r3, [pc, #80]	; (1a9c <z_arm_init_arch_hw_at_boot+0x60>)
    1a4c:	f04f 32ff 	mov.w	r2, #4294967295
    1a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1a60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1a64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1a68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1a6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1a70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1a74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1a78:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1a7c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1a80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1a84:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1a88:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1a8c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1a90:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1a92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a96:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1a9a:	bd08      	pop	{r3, pc}
    1a9c:	e000e100 	.word	0xe000e100

00001aa0 <z_arm_interrupt_init>:
    1aa0:	4804      	ldr	r0, [pc, #16]	; (1ab4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1aa2:	2300      	movs	r3, #0
    1aa4:	2120      	movs	r1, #32
    1aa6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1aa8:	3301      	adds	r3, #1
    1aaa:	2b27      	cmp	r3, #39	; 0x27
    1aac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1ab0:	d1f9      	bne.n	1aa6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1ab2:	4770      	bx	lr
    1ab4:	e000e100 	.word	0xe000e100

00001ab8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1ab8:	4b06      	ldr	r3, [pc, #24]	; (1ad4 <z_impl_k_thread_abort+0x1c>)
    1aba:	689b      	ldr	r3, [r3, #8]
    1abc:	4283      	cmp	r3, r0
    1abe:	d107      	bne.n	1ad0 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1ac0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1ac4:	b123      	cbz	r3, 1ad0 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1ac6:	4a04      	ldr	r2, [pc, #16]	; (1ad8 <z_impl_k_thread_abort+0x20>)
    1ac8:	6853      	ldr	r3, [r2, #4]
    1aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1ace:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1ad0:	f001 bcc4 	b.w	345c <z_thread_abort>
    1ad4:	20000a68 	.word	0x20000a68
    1ad8:	e000ed00 	.word	0xe000ed00

00001adc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1adc:	4b02      	ldr	r3, [pc, #8]	; (1ae8 <z_arm_configure_static_mpu_regions+0xc>)
    1ade:	4a03      	ldr	r2, [pc, #12]	; (1aec <z_arm_configure_static_mpu_regions+0x10>)
    1ae0:	4803      	ldr	r0, [pc, #12]	; (1af0 <z_arm_configure_static_mpu_regions+0x14>)
    1ae2:	2101      	movs	r1, #1
    1ae4:	f000 b85e 	b.w	1ba4 <arm_core_mpu_configure_static_mpu_regions>
    1ae8:	20010000 	.word	0x20010000
    1aec:	20000000 	.word	0x20000000
    1af0:	000041c8 	.word	0x000041c8

00001af4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1af6:	4f1f      	ldr	r7, [pc, #124]	; (1b74 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1af8:	2600      	movs	r6, #0
    1afa:	428e      	cmp	r6, r1
    1afc:	db01      	blt.n	1b02 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1afe:	4610      	mov	r0, r2
    1b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1b02:	6844      	ldr	r4, [r0, #4]
    1b04:	b39c      	cbz	r4, 1b6e <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1b06:	b153      	cbz	r3, 1b1e <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1b08:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1b0c:	ea14 0f0c 	tst.w	r4, ip
    1b10:	d118      	bne.n	1b44 <mpu_configure_regions+0x50>
		&&
    1b12:	2c1f      	cmp	r4, #31
    1b14:	d916      	bls.n	1b44 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1b16:	6805      	ldr	r5, [r0, #0]
		&&
    1b18:	ea1c 0f05 	tst.w	ip, r5
    1b1c:	d112      	bne.n	1b44 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1b1e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1b20:	6805      	ldr	r5, [r0, #0]
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1b22:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1b26:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1b28:	d90f      	bls.n	1b4a <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1b2a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1b2e:	d80e      	bhi.n	1b4e <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1b30:	3c01      	subs	r4, #1
    1b32:	fab4 f484 	clz	r4, r4
    1b36:	f1c4 041f 	rsb	r4, r4, #31
    1b3a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1b3c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1b3e:	ea4c 0404 	orr.w	r4, ip, r4
    1b42:	d906      	bls.n	1b52 <mpu_configure_regions+0x5e>
			return -EINVAL;
    1b44:	f06f 0215 	mvn.w	r2, #21
    1b48:	e7d9      	b.n	1afe <mpu_configure_regions+0xa>
		return REGION_32B;
    1b4a:	2408      	movs	r4, #8
    1b4c:	e7f6      	b.n	1b3c <mpu_configure_regions+0x48>
		return REGION_4G;
    1b4e:	243e      	movs	r4, #62	; 0x3e
    1b50:	e7f4      	b.n	1b3c <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b52:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1b56:	4315      	orrs	r5, r2
    1b58:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1b5c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1b60:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1b64:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1b68:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1b6a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1b6e:	3601      	adds	r6, #1
    1b70:	300c      	adds	r0, #12
    1b72:	e7c2      	b.n	1afa <mpu_configure_regions+0x6>
    1b74:	e000ed00 	.word	0xe000ed00

00001b78 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1b78:	4b04      	ldr	r3, [pc, #16]	; (1b8c <arm_core_mpu_enable+0x14>)
    1b7a:	2205      	movs	r2, #5
    1b7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b84:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop
    1b8c:	e000ed00 	.word	0xe000ed00

00001b90 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b90:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b94:	4b02      	ldr	r3, [pc, #8]	; (1ba0 <arm_core_mpu_disable+0x10>)
    1b96:	2200      	movs	r2, #0
    1b98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b9c:	4770      	bx	lr
    1b9e:	bf00      	nop
    1ba0:	e000ed00 	.word	0xe000ed00

00001ba4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1ba4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1ba6:	4c03      	ldr	r4, [pc, #12]	; (1bb4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1ba8:	2301      	movs	r3, #1
    1baa:	7822      	ldrb	r2, [r4, #0]
    1bac:	f7ff ffa2 	bl	1af4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1bb0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1bb2:	bd10      	pop	{r4, pc}
    1bb4:	20000aaa 	.word	0x20000aaa

00001bb8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1bb8:	4914      	ldr	r1, [pc, #80]	; (1c0c <z_arm_mpu_init+0x54>)
    1bba:	6808      	ldr	r0, [r1, #0]
    1bbc:	2808      	cmp	r0, #8
{
    1bbe:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1bc0:	d821      	bhi.n	1c06 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1bc2:	f7ff ffe5 	bl	1b90 <arm_core_mpu_disable>
	MPU->RNR = index;
    1bc6:	4c12      	ldr	r4, [pc, #72]	; (1c10 <z_arm_mpu_init+0x58>)
    1bc8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bca:	2200      	movs	r2, #0
    1bcc:	4290      	cmp	r0, r2
    1bce:	f101 010c 	add.w	r1, r1, #12
    1bd2:	d105      	bne.n	1be0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1bd4:	4b0f      	ldr	r3, [pc, #60]	; (1c14 <z_arm_mpu_init+0x5c>)
    1bd6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1bd8:	f7ff ffce 	bl	1b78 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1bdc:	2000      	movs	r0, #0
}
    1bde:	bd10      	pop	{r4, pc}
    1be0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1be4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1be8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1bec:	4313      	orrs	r3, r2
    1bee:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1bf2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1bfa:	f043 0301 	orr.w	r3, r3, #1
    1bfe:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1c02:	3201      	adds	r2, #1
    1c04:	e7e2      	b.n	1bcc <z_arm_mpu_init+0x14>
		return -1;
    1c06:	f04f 30ff 	mov.w	r0, #4294967295
    1c0a:	e7e8      	b.n	1bde <z_arm_mpu_init+0x26>
    1c0c:	000041d4 	.word	0x000041d4
    1c10:	e000ed00 	.word	0xe000ed00
    1c14:	20000aaa 	.word	0x20000aaa

00001c18 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1c18:	4b01      	ldr	r3, [pc, #4]	; (1c20 <__stdout_hook_install+0x8>)
    1c1a:	6018      	str	r0, [r3, #0]
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	20000008 	.word	0x20000008

00001c24 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1c24:	f04f 0320 	mov.w	r3, #32
    1c28:	f3ef 8211 	mrs	r2, BASEPRI
    1c2c:	f383 8811 	msr	BASEPRI, r3
    1c30:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1c34:	4906      	ldr	r1, [pc, #24]	; (1c50 <nordicsemi_nrf52_init+0x2c>)
    1c36:	2301      	movs	r3, #1
    1c38:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1c3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1c40:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1c44:	f382 8811 	msr	BASEPRI, r2
    1c48:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1c4c:	2000      	movs	r0, #0
    1c4e:	4770      	bx	lr
    1c50:	4001e000 	.word	0x4001e000

00001c54 <sys_arch_reboot>:
    *p_gpregret = val;
    1c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c58:	b2c0      	uxtb	r0, r0
    1c5a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1c5e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1c62:	4905      	ldr	r1, [pc, #20]	; (1c78 <sys_arch_reboot+0x24>)
    1c64:	4b05      	ldr	r3, [pc, #20]	; (1c7c <sys_arch_reboot+0x28>)
    1c66:	68ca      	ldr	r2, [r1, #12]
    1c68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1c6c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1c6e:	60cb      	str	r3, [r1, #12]
    1c70:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1c74:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1c76:	e7fd      	b.n	1c74 <sys_arch_reboot+0x20>
    1c78:	e000ed00 	.word	0xe000ed00
    1c7c:	05fa0004 	.word	0x05fa0004

00001c80 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1c80:	b120      	cbz	r0, 1c8c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1c82:	4b03      	ldr	r3, [pc, #12]	; (1c90 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1c84:	0180      	lsls	r0, r0, #6
    1c86:	f043 0301 	orr.w	r3, r3, #1
    1c8a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1c8c:	4770      	bx	lr
    1c8e:	bf00      	nop
    1c90:	00004190 	.word	0x00004190

00001c94 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1c94:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1c96:	4b09      	ldr	r3, [pc, #36]	; (1cbc <gpio_nrfx_init+0x28>)
    1c98:	781a      	ldrb	r2, [r3, #0]
    1c9a:	b96a      	cbnz	r2, 1cb8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1c9c:	2101      	movs	r1, #1
    1c9e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1ca0:	2006      	movs	r0, #6
    1ca2:	2105      	movs	r1, #5
    1ca4:	f7ff fcf8 	bl	1698 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1ca8:	2006      	movs	r0, #6
    1caa:	f7ff fcd7 	bl	165c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1cae:	4b04      	ldr	r3, [pc, #16]	; (1cc0 <gpio_nrfx_init+0x2c>)
    1cb0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1cb4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1cb8:	2000      	movs	r0, #0
    1cba:	bd08      	pop	{r3, pc}
    1cbc:	20000aab 	.word	0x20000aab
    1cc0:	40006000 	.word	0x40006000

00001cc4 <gpio_nrfx_pin_interrupt_configure>:
{
    1cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1cc6:	4617      	mov	r7, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1cc8:	6842      	ldr	r2, [r0, #4]
	return port->data;
    1cca:	6906      	ldr	r6, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1ccc:	7a12      	ldrb	r2, [r2, #8]
    1cce:	f001 041f 	and.w	r4, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1cd2:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
{
    1cd6:	460d      	mov	r5, r1
    1cd8:	ea44 1442 	orr.w	r4, r4, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    1cdc:	d10c      	bne.n	1cf8 <gpio_nrfx_pin_interrupt_configure+0x34>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1cde:	f004 021f 	and.w	r2, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1ce2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    1ce6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    1cea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1cee:	07d0      	lsls	r0, r2, #31
    1cf0:	d507      	bpl.n	1d02 <gpio_nrfx_pin_interrupt_configure+0x3e>
		return -ENOTSUP;
    1cf2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1cf6:	e09a      	b.n	1e2e <gpio_nrfx_pin_interrupt_configure+0x16a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1cf8:	f5b7 5f00 	cmp.w	r7, #8192	; 0x2000
    1cfc:	68f1      	ldr	r1, [r6, #12]
    1cfe:	f000 8098 	beq.w	1e32 <gpio_nrfx_pin_interrupt_configure+0x16e>
    1d02:	68f2      	ldr	r2, [r6, #12]
    1d04:	2101      	movs	r1, #1
    1d06:	40a9      	lsls	r1, r5
    1d08:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1d0a:	6972      	ldr	r2, [r6, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1d0c:	60f1      	str	r1, [r6, #12]
    1d0e:	2101      	movs	r1, #1
    1d10:	40a9      	lsls	r1, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1d12:	f5b7 3fa0 	cmp.w	r7, #81920	; 0x14000
    1d16:	bf0c      	ite	eq
    1d18:	430a      	orreq	r2, r1
    1d1a:	438a      	bicne	r2, r1
    1d1c:	6172      	str	r2, [r6, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1d1e:	69b2      	ldr	r2, [r6, #24]
    1d20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1d24:	bf0c      	ite	eq
    1d26:	430a      	orreq	r2, r1
    1d28:	438a      	bicne	r2, r1
    1d2a:	61b2      	str	r2, [r6, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1d2c:	6932      	ldr	r2, [r6, #16]
    1d2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1d32:	bf0c      	ite	eq
    1d34:	4311      	orreq	r1, r2
    1d36:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1d3a:	4a4a      	ldr	r2, [pc, #296]	; (1e64 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
    1d3c:	6131      	str	r1, [r6, #16]
    1d3e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d42:	2000      	movs	r0, #0
    1d44:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d46:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1d4a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1d4e:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1d52:	428c      	cmp	r4, r1
    1d54:	d172      	bne.n	1e3c <gpio_nrfx_pin_interrupt_configure+0x178>
		    && (intenset & BIT(i))) {
    1d56:	fa23 f100 	lsr.w	r1, r3, r0
    1d5a:	07c9      	lsls	r1, r1, #31
    1d5c:	d56e      	bpl.n	1e3c <gpio_nrfx_pin_interrupt_configure+0x178>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1d5e:	0083      	lsls	r3, r0, #2
    1d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1d64:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1d68:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1d6c:	f021 0101 	bic.w	r1, r1, #1
    1d70:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1d74:	2301      	movs	r3, #1
    1d76:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1d78:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1d7c:	b2c0      	uxtb	r0, r0
    1d7e:	f000 fcb9 	bl	26f4 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1d82:	4620      	mov	r0, r4
    1d84:	2100      	movs	r1, #0
    1d86:	f001 ff53 	bl	3c30 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1d8a:	68f0      	ldr	r0, [r6, #12]
    1d8c:	40e8      	lsrs	r0, r5
    1d8e:	f010 0001 	ands.w	r0, r0, #1
    1d92:	d04c      	beq.n	1e2e <gpio_nrfx_pin_interrupt_configure+0x16a>
		if (data->trig_edge & BIT(pin)) {
    1d94:	6970      	ldr	r0, [r6, #20]
    1d96:	40e8      	lsrs	r0, r5
    1d98:	f010 0201 	ands.w	r2, r0, #1
    1d9c:	d055      	beq.n	1e4a <gpio_nrfx_pin_interrupt_configure+0x186>
				if (data->double_edge & BIT(pin)) {
    1d9e:	69b3      	ldr	r3, [r6, #24]
    1da0:	40eb      	lsrs	r3, r5
    1da2:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1da4:	bf5f      	itttt	pl
    1da6:	6931      	ldrpl	r1, [r6, #16]
    1da8:	fa21 f505 	lsrpl.w	r5, r1, r5
    1dac:	f005 0501 	andpl.w	r5, r5, #1
    1db0:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1db4:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1db8:	bf54      	ite	pl
    1dba:	b2ed      	uxtbpl	r5, r5
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1dbc:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1dbe:	f000 fcb9 	bl	2734 <nrfx_gpiote_channel_alloc>
    1dc2:	4b29      	ldr	r3, [pc, #164]	; (1e68 <gpio_nrfx_pin_interrupt_configure+0x1a4>)
    1dc4:	4298      	cmp	r0, r3
    1dc6:	d13d      	bne.n	1e44 <gpio_nrfx_pin_interrupt_configure+0x180>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1dc8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1dcc:	0093      	lsls	r3, r2, #2
    1dce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1dd2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1dd6:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1dd8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1ddc:	f421 3147 	bic.w	r1, r1, #203776	; 0x31c00
    1de0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    1de4:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1de8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1dec:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1df0:	430c      	orrs	r4, r1
    1df2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1df6:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1dfa:	0093      	lsls	r3, r2, #2
    1dfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1e00:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1e04:	2000      	movs	r0, #0
    1e06:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    1e08:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1e0c:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1e0e:	008b      	lsls	r3, r1, #2
    1e10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1e14:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1e18:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1e1c:	f042 0201 	orr.w	r2, r2, #1
    1e20:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1e24:	4a0f      	ldr	r2, [pc, #60]	; (1e64 <gpio_nrfx_pin_interrupt_configure+0x1a0>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1e26:	2301      	movs	r3, #1
    1e28:	408b      	lsls	r3, r1
    1e2a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1e2e:	b003      	add	sp, #12
    1e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1e32:	2201      	movs	r2, #1
    1e34:	40aa      	lsls	r2, r5
    1e36:	ea21 0102 	bic.w	r1, r1, r2
    1e3a:	e766      	b.n	1d0a <gpio_nrfx_pin_interrupt_configure+0x46>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1e3c:	3001      	adds	r0, #1
    1e3e:	2808      	cmp	r0, #8
    1e40:	d181      	bne.n	1d46 <gpio_nrfx_pin_interrupt_configure+0x82>
    1e42:	e79e      	b.n	1d82 <gpio_nrfx_pin_interrupt_configure+0xbe>
		return -ENODEV;
    1e44:	f06f 0012 	mvn.w	r0, #18
    1e48:	e7f1      	b.n	1e2e <gpio_nrfx_pin_interrupt_configure+0x16a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1e4a:	6931      	ldr	r1, [r6, #16]
    1e4c:	40e9      	lsrs	r1, r5
    1e4e:	f001 0101 	and.w	r1, r1, #1
    1e52:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1e56:	4620      	mov	r0, r4
    1e58:	b2c9      	uxtb	r1, r1
    1e5a:	f001 fee9 	bl	3c30 <nrf_gpio_cfg_sense_set>
	int res = 0;
    1e5e:	4610      	mov	r0, r2
    1e60:	e7e5      	b.n	1e2e <gpio_nrfx_pin_interrupt_configure+0x16a>
    1e62:	bf00      	nop
    1e64:	40006000 	.word	0x40006000
    1e68:	0bad0000 	.word	0x0bad0000

00001e6c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e6c:	4b2a      	ldr	r3, [pc, #168]	; (1f18 <gpio_nrfx_config+0xac>)
{
    1e6e:	b570      	push	{r4, r5, r6, lr}
	return port->config;
    1e70:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e72:	482a      	ldr	r0, [pc, #168]	; (1f1c <gpio_nrfx_config+0xb0>)
    1e74:	4013      	ands	r3, r2
    1e76:	4283      	cmp	r3, r0
    1e78:	d03e      	beq.n	1ef8 <gpio_nrfx_config+0x8c>
    1e7a:	d80d      	bhi.n	1e98 <gpio_nrfx_config+0x2c>
    1e7c:	2b06      	cmp	r3, #6
    1e7e:	d015      	beq.n	1eac <gpio_nrfx_config+0x40>
    1e80:	d805      	bhi.n	1e8e <gpio_nrfx_config+0x22>
    1e82:	b19b      	cbz	r3, 1eac <gpio_nrfx_config+0x40>
    1e84:	2b02      	cmp	r3, #2
    1e86:	d039      	beq.n	1efc <gpio_nrfx_config+0x90>
    1e88:	f06f 0015 	mvn.w	r0, #21
    1e8c:	e033      	b.n	1ef6 <gpio_nrfx_config+0x8a>
    1e8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1e92:	d1f9      	bne.n	1e88 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1e94:	2301      	movs	r3, #1
    1e96:	e009      	b.n	1eac <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1e98:	4821      	ldr	r0, [pc, #132]	; (1f20 <gpio_nrfx_config+0xb4>)
    1e9a:	4283      	cmp	r3, r0
    1e9c:	d030      	beq.n	1f00 <gpio_nrfx_config+0x94>
    1e9e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1ea2:	d02f      	beq.n	1f04 <gpio_nrfx_config+0x98>
    1ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1ea8:	d1ee      	bne.n	1e88 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1eaa:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1eac:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1eae:	bf54      	ite	pl
    1eb0:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1eb4:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1eb6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1eba:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    1ebe:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1ec2:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1ec6:	d007      	beq.n	1ed8 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1ec8:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1ecc:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1ece:	d01b      	beq.n	1f08 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1ed0:	2201      	movs	r2, #1
    1ed2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1ed4:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1ed8:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    1edc:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1ee0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    1ee4:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    1ee8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    1eec:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    1ef0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1ef4:	2000      	movs	r0, #0
}
    1ef6:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1ef8:	2307      	movs	r3, #7
    1efa:	e7d7      	b.n	1eac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1efc:	2304      	movs	r3, #4
    1efe:	e7d5      	b.n	1eac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1f00:	2305      	movs	r3, #5
    1f02:	e7d3      	b.n	1eac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1f04:	2303      	movs	r3, #3
    1f06:	e7d1      	b.n	1eac <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1f08:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1f0a:	bf42      	ittt	mi
    1f0c:	2201      	movmi	r2, #1
    1f0e:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1f10:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    1f14:	e7e0      	b.n	1ed8 <gpio_nrfx_config+0x6c>
    1f16:	bf00      	nop
    1f18:	00f00006 	.word	0x00f00006
    1f1c:	00100006 	.word	0x00100006
    1f20:	00400002 	.word	0x00400002

00001f24 <gpiote_event_handler>:
{
    1f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1f28:	4b41      	ldr	r3, [pc, #260]	; (2030 <gpiote_event_handler+0x10c>)
    1f2a:	f8d3 517c 	ldr.w	r5, [r3, #380]	; 0x17c
	if (port_event) {
    1f2e:	2d00      	cmp	r5, #0
    1f30:	d059      	beq.n	1fe6 <gpiote_event_handler+0xc2>
	uint32_t out = data->pin_int_en;
    1f32:	4b40      	ldr	r3, [pc, #256]	; (2034 <gpiote_event_handler+0x110>)
    return p_reg->IN;
    1f34:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
	out &= ~data->trig_edge & ~data->double_edge;
    1f38:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	uint32_t out = data->pin_int_en;
    1f3c:	68df      	ldr	r7, [r3, #12]
    1f3e:	f8d9 4510 	ldr.w	r4, [r9, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1f42:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    1f44:	430a      	orrs	r2, r1
    1f46:	ea27 0702 	bic.w	r7, r7, r2
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1f4a:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    1f4c:	ea27 0404 	bic.w	r4, r7, r4
	uint32_t check_pins = level_pins;
    1f50:	463a      	mov	r2, r7
	uint32_t bit = 1U << pin;
    1f52:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    1f54:	f04f 0800 	mov.w	r8, #0
	while (check_pins) {
    1f58:	bb82      	cbnz	r2, 1fbc <gpiote_event_handler+0x98>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1f5a:	4b35      	ldr	r3, [pc, #212]	; (2030 <gpiote_event_handler+0x10c>)
    1f5c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    1f60:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1f64:	4a34      	ldr	r2, [pc, #208]	; (2038 <gpiote_event_handler+0x114>)
    return p_reg->INTENSET & mask;
    1f66:	4832      	ldr	r0, [pc, #200]	; (2030 <gpiote_event_handler+0x10c>)
    1f68:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1f6a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1f6c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    1f6e:	f8d0 1304 	ldr.w	r1, [r0, #772]	; 0x304
    1f72:	fa06 fc03 	lsl.w	ip, r6, r3
    1f76:	ea1c 0f01 	tst.w	ip, r1
    1f7a:	d00c      	beq.n	1f96 <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1f7c:	6811      	ldr	r1, [r2, #0]
    1f7e:	b151      	cbz	r1, 1f96 <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1f80:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    1f84:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1f88:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1f8a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1f8e:	fa06 f101 	lsl.w	r1, r6, r1
    1f92:	430c      	orrs	r4, r1
    1f94:	6811      	ldr	r1, [r2, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1f96:	3301      	adds	r3, #1
    1f98:	2b08      	cmp	r3, #8
    1f9a:	f102 0204 	add.w	r2, r2, #4
    1f9e:	d1e6      	bne.n	1f6e <gpiote_event_handler+0x4a>
	if (fired_triggers[0]) {
    1fa0:	bb1c      	cbnz	r4, 1fea <gpiote_event_handler+0xc6>
	if (port_event) {
    1fa2:	b14d      	cbz	r5, 1fb8 <gpiote_event_handler+0x94>
	uint32_t out = data->pin_int_en;
    1fa4:	4e23      	ldr	r6, [pc, #140]	; (2034 <gpiote_event_handler+0x110>)
	out &= ~data->trig_edge & ~data->double_edge;
    1fa6:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
	uint32_t out = data->pin_int_en;
    1faa:	68f2      	ldr	r2, [r6, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1fac:	430b      	orrs	r3, r1
    1fae:	ea22 0203 	bic.w	r2, r2, r3
	uint32_t bit = 1U << pin;
    1fb2:	2401      	movs	r4, #1
	uint32_t pin = 0U;
    1fb4:	2500      	movs	r5, #0
	while (level_pins) {
    1fb6:	bb4a      	cbnz	r2, 200c <gpiote_event_handler+0xe8>
}
    1fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (check_pins & bit) {
    1fbc:	4216      	tst	r6, r2
    1fbe:	d00e      	beq.n	1fde <gpiote_event_handler+0xba>
			if (!(level_pins & bit)) {
    1fc0:	423e      	tst	r6, r7
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1fc2:	f008 001f 	and.w	r0, r8, #31
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    1fc6:	bf08      	it	eq
    1fc8:	f500 73e0 	addeq.w	r3, r0, #448	; 0x1c0
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1fcc:	f04f 0100 	mov.w	r1, #0
    1fd0:	bf08      	it	eq
    1fd2:	f859 3023 	ldreq.w	r3, [r9, r3, lsl #2]
    1fd6:	f001 fe2b 	bl	3c30 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
    1fda:	ea22 0206 	bic.w	r2, r2, r6
		++pin;
    1fde:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    1fe2:	0076      	lsls	r6, r6, #1
    1fe4:	e7b8      	b.n	1f58 <gpiote_event_handler+0x34>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1fe6:	462c      	mov	r4, r5
    1fe8:	e7bc      	b.n	1f64 <gpiote_event_handler+0x40>
	gpio_fire_callbacks(list, port, pins);
    1fea:	4b12      	ldr	r3, [pc, #72]	; (2034 <gpiote_event_handler+0x110>)
    1fec:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1fee:	2900      	cmp	r1, #0
    1ff0:	d0d7      	beq.n	1fa2 <gpiote_event_handler+0x7e>
    1ff2:	680e      	ldr	r6, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1ff4:	4f11      	ldr	r7, [pc, #68]	; (203c <gpiote_event_handler+0x118>)
		if (cb->pin_mask & pins) {
    1ff6:	688a      	ldr	r2, [r1, #8]
    1ff8:	4022      	ands	r2, r4
    1ffa:	d002      	beq.n	2002 <gpiote_event_handler+0xde>
			cb->handler(port, cb, cb->pin_mask & pins);
    1ffc:	684b      	ldr	r3, [r1, #4]
    1ffe:	4638      	mov	r0, r7
    2000:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2002:	2e00      	cmp	r6, #0
    2004:	d0cd      	beq.n	1fa2 <gpiote_event_handler+0x7e>
    2006:	4631      	mov	r1, r6
    2008:	6836      	ldr	r6, [r6, #0]
    200a:	e7f4      	b.n	1ff6 <gpiote_event_handler+0xd2>
		if (level_pins & bit) {
    200c:	4214      	tst	r4, r2
    200e:	d00c      	beq.n	202a <gpiote_event_handler+0x106>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2010:	6931      	ldr	r1, [r6, #16]
    2012:	40e9      	lsrs	r1, r5
    2014:	f001 0101 	and.w	r1, r1, #1
    2018:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    201c:	b2c9      	uxtb	r1, r1
    201e:	f005 001f 	and.w	r0, r5, #31
    2022:	f001 fe05 	bl	3c30 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2026:	ea22 0204 	bic.w	r2, r2, r4
		++pin;
    202a:	3501      	adds	r5, #1
		bit <<= 1;
    202c:	0064      	lsls	r4, r4, #1
    202e:	e7c2      	b.n	1fb6 <gpiote_event_handler+0x92>
    2030:	40006000 	.word	0x40006000
    2034:	200009d4 	.word	0x200009d4
    2038:	40006100 	.word	0x40006100
    203c:	00003ffc 	.word	0x00003ffc

00002040 <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2040:	4b07      	ldr	r3, [pc, #28]	; (2060 <uart_nrfx_poll_in+0x20>)
    2042:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2046:	b142      	cbz	r2, 205a <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2048:	2000      	movs	r0, #0
    204a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    204e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
    2052:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2056:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
    2058:	4770      	bx	lr
		return -1;
    205a:	f04f 30ff 	mov.w	r0, #4294967295
}
    205e:	4770      	bx	lr
    2060:	40002000 	.word	0x40002000

00002064 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2064:	4b02      	ldr	r3, [pc, #8]	; (2070 <uart_nrfx_err_check+0xc>)
    2066:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    206a:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    206e:	4770      	bx	lr
    2070:	40002000 	.word	0x40002000

00002074 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
    2074:	b510      	push	{r4, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2076:	794b      	ldrb	r3, [r1, #5]
    2078:	2b01      	cmp	r3, #1
    207a:	d11c      	bne.n	20b6 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    207c:	798b      	ldrb	r3, [r1, #6]
    207e:	2b03      	cmp	r3, #3
    2080:	d119      	bne.n	20b6 <uart_nrfx_configure+0x42>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2082:	79cb      	ldrb	r3, [r1, #7]
    2084:	b9bb      	cbnz	r3, 20b6 <uart_nrfx_configure+0x42>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2086:	790a      	ldrb	r2, [r1, #4]
    2088:	b112      	cbz	r2, 2090 <uart_nrfx_configure+0x1c>
    208a:	2a02      	cmp	r2, #2
    208c:	d113      	bne.n	20b6 <uart_nrfx_configure+0x42>
    208e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2090:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2092:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2096:	d05e      	beq.n	2156 <uart_nrfx_configure+0xe2>
    2098:	d82b      	bhi.n	20f2 <uart_nrfx_configure+0x7e>
    209a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    209e:	d05c      	beq.n	215a <uart_nrfx_configure+0xe6>
    20a0:	d814      	bhi.n	20cc <uart_nrfx_configure+0x58>
    20a2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    20a6:	d05a      	beq.n	215e <uart_nrfx_configure+0xea>
    20a8:	d808      	bhi.n	20bc <uart_nrfx_configure+0x48>
    20aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    20ae:	d059      	beq.n	2164 <uart_nrfx_configure+0xf0>
    20b0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    20b4:	d059      	beq.n	216a <uart_nrfx_configure+0xf6>
    20b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    20ba:	e04b      	b.n	2154 <uart_nrfx_configure+0xe0>
    20bc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    20c0:	d056      	beq.n	2170 <uart_nrfx_configure+0xfc>
    20c2:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    20c6:	d1f6      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    20c8:	4b33      	ldr	r3, [pc, #204]	; (2198 <uart_nrfx_configure+0x124>)
    20ca:	e039      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    20cc:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    20d0:	d051      	beq.n	2176 <uart_nrfx_configure+0x102>
    20d2:	d807      	bhi.n	20e4 <uart_nrfx_configure+0x70>
    20d4:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    20d8:	d04f      	beq.n	217a <uart_nrfx_configure+0x106>
    20da:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    20de:	d1ea      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    20e0:	4b2e      	ldr	r3, [pc, #184]	; (219c <uart_nrfx_configure+0x128>)
    20e2:	e02d      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    20e4:	f647 2412 	movw	r4, #31250	; 0x7a12
    20e8:	42a3      	cmp	r3, r4
    20ea:	d1e4      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    20ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    20f0:	e026      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    20f2:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    20f6:	d043      	beq.n	2180 <uart_nrfx_configure+0x10c>
    20f8:	d811      	bhi.n	211e <uart_nrfx_configure+0xaa>
    20fa:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    20fe:	d041      	beq.n	2184 <uart_nrfx_configure+0x110>
    2100:	d808      	bhi.n	2114 <uart_nrfx_configure+0xa0>
    2102:	f64d 24c0 	movw	r4, #56000	; 0xdac0
    2106:	42a3      	cmp	r3, r4
    2108:	d03e      	beq.n	2188 <uart_nrfx_configure+0x114>
    210a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    210e:	d1d2      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2110:	4b23      	ldr	r3, [pc, #140]	; (21a0 <uart_nrfx_configure+0x12c>)
    2112:	e015      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    2114:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2118:	d1cd      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    211a:	4b22      	ldr	r3, [pc, #136]	; (21a4 <uart_nrfx_configure+0x130>)
    211c:	e010      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    211e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2122:	d034      	beq.n	218e <uart_nrfx_configure+0x11a>
    2124:	d807      	bhi.n	2136 <uart_nrfx_configure+0xc2>
    2126:	4c20      	ldr	r4, [pc, #128]	; (21a8 <uart_nrfx_configure+0x134>)
    2128:	42a3      	cmp	r3, r4
    212a:	d032      	beq.n	2192 <uart_nrfx_configure+0x11e>
    212c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2130:	d1c1      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2132:	4b1e      	ldr	r3, [pc, #120]	; (21ac <uart_nrfx_configure+0x138>)
    2134:	e004      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    2136:	4c1e      	ldr	r4, [pc, #120]	; (21b0 <uart_nrfx_configure+0x13c>)
    2138:	42a3      	cmp	r3, r4
    213a:	d1bc      	bne.n	20b6 <uart_nrfx_configure+0x42>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    213c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2140:	4c1c      	ldr	r4, [pc, #112]	; (21b4 <uart_nrfx_configure+0x140>)
    2142:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2146:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    214a:	6903      	ldr	r3, [r0, #16]
    214c:	c903      	ldmia	r1, {r0, r1}
    214e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2152:	2000      	movs	r0, #0
}
    2154:	bd10      	pop	{r4, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2156:	4b18      	ldr	r3, [pc, #96]	; (21b8 <uart_nrfx_configure+0x144>)
    2158:	e7f2      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    215a:	4b18      	ldr	r3, [pc, #96]	; (21bc <uart_nrfx_configure+0x148>)
    215c:	e7f0      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    215e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2162:	e7ed      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = 0x00014000;
    2164:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2168:	e7ea      	b.n	2140 <uart_nrfx_configure+0xcc>
	switch (baudrate) {
    216a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    216e:	e7e7      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2170:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2174:	e7e4      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2176:	4b12      	ldr	r3, [pc, #72]	; (21c0 <uart_nrfx_configure+0x14c>)
    2178:	e7e2      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    217a:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    217e:	e7df      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2180:	4b10      	ldr	r3, [pc, #64]	; (21c4 <uart_nrfx_configure+0x150>)
    2182:	e7dd      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2184:	4b10      	ldr	r3, [pc, #64]	; (21c8 <uart_nrfx_configure+0x154>)
    2186:	e7db      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2188:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    218c:	e7d8      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    218e:	4b0f      	ldr	r3, [pc, #60]	; (21cc <uart_nrfx_configure+0x158>)
    2190:	e7d6      	b.n	2140 <uart_nrfx_configure+0xcc>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2196:	e7d3      	b.n	2140 <uart_nrfx_configure+0xcc>
    2198:	0013b000 	.word	0x0013b000
    219c:	004ea000 	.word	0x004ea000
    21a0:	00ebf000 	.word	0x00ebf000
    21a4:	01d7e000 	.word	0x01d7e000
    21a8:	0003d090 	.word	0x0003d090
    21ac:	075f7000 	.word	0x075f7000
    21b0:	000f4240 	.word	0x000f4240
    21b4:	40002000 	.word	0x40002000
    21b8:	009d5000 	.word	0x009d5000
    21bc:	00275000 	.word	0x00275000
    21c0:	0075f000 	.word	0x0075f000
    21c4:	03afb000 	.word	0x03afb000
    21c8:	013a9000 	.word	0x013a9000
    21cc:	0ebed000 	.word	0x0ebed000

000021d0 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
    21d0:	b510      	push	{r4, lr}
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
    21d2:	4c14      	ldr	r4, [pc, #80]	; (2224 <uart_nrfx_init+0x54>)
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    21d4:	6901      	ldr	r1, [r0, #16]
    21d6:	2300      	movs	r3, #0
    21d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->OUTSET = set_mask;
    21dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    21e0:	2240      	movs	r2, #64	; 0x40
    21e2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    21e6:	2203      	movs	r2, #3
    21e8:	f8c3 2718 	str.w	r2, [r3, #1816]	; 0x718
    21ec:	220c      	movs	r2, #12
    21ee:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    p_reg->PSELRXD = pselrxd;
    21f2:	2308      	movs	r3, #8
    21f4:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    21f8:	2306      	movs	r3, #6
    21fa:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSELRTS = pselrts;
    21fe:	f04f 33ff 	mov.w	r3, #4294967295
    2202:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    2206:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    220a:	f7ff ff33 	bl	2074 <uart_nrfx_configure>
	if (err) {
    220e:	b940      	cbnz	r0, 2222 <uart_nrfx_init+0x52>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2210:	2304      	movs	r3, #4
    2212:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2216:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    221a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    221e:	2301      	movs	r3, #1
    2220:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
    2222:	bd10      	pop	{r4, pc}
    2224:	40002000 	.word	0x40002000

00002228 <uart_nrfx_poll_out>:
{
    2228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    222a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
    222c:	f001 fdac 	bl	3d88 <k_is_in_isr>
    2230:	4d1a      	ldr	r5, [pc, #104]	; (229c <uart_nrfx_poll_out+0x74>)
    2232:	bb78      	cbnz	r0, 2294 <uart_nrfx_poll_out+0x6c>
    2234:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2236:	2701      	movs	r7, #1
    2238:	f3bf 8f5b 	dmb	ish
    223c:	e855 3f00 	ldrex	r3, [r5]
    2240:	2b00      	cmp	r3, #0
    2242:	d103      	bne.n	224c <uart_nrfx_poll_out+0x24>
    2244:	e845 7200 	strex	r2, r7, [r5]
    2248:	2a00      	cmp	r2, #0
    224a:	d1f7      	bne.n	223c <uart_nrfx_poll_out+0x14>
    224c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
    2250:	d007      	beq.n	2262 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
    2252:	2021      	movs	r0, #33	; 0x21
    2254:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
    2256:	3c01      	subs	r4, #1
    2258:	f001 f8e0 	bl	341c <z_impl_k_sleep>
    225c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    2260:	d1ea      	bne.n	2238 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2262:	4c0f      	ldr	r4, [pc, #60]	; (22a0 <uart_nrfx_poll_out+0x78>)
    2264:	2300      	movs	r3, #0
    2266:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    226a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    226e:	2301      	movs	r3, #1
    2270:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
    2272:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
    2276:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    227a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
    227e:	b923      	cbnz	r3, 228a <uart_nrfx_poll_out+0x62>
    2280:	2001      	movs	r0, #1
    2282:	f001 fd4f 	bl	3d24 <nrfx_busy_wait>
    2286:	3e01      	subs	r6, #1
    2288:	d1f7      	bne.n	227a <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    228a:	2301      	movs	r3, #1
    228c:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    228e:	2300      	movs	r3, #0
    2290:	602b      	str	r3, [r5, #0]
}
    2292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
    2294:	2301      	movs	r3, #1
    2296:	602b      	str	r3, [r5, #0]
    2298:	e7e3      	b.n	2262 <uart_nrfx_poll_out+0x3a>
    229a:	bf00      	nop
    229c:	200009f4 	.word	0x200009f4
    22a0:	40002000 	.word	0x40002000

000022a4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    22a4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    22a8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    22ac:	2a06      	cmp	r2, #6
    22ae:	d109      	bne.n	22c4 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    22b0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    22b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    22b8:	3b03      	subs	r3, #3
    22ba:	2b04      	cmp	r3, #4
    22bc:	d802      	bhi.n	22c4 <nrf52_errata_16+0x20>
    22be:	4a02      	ldr	r2, [pc, #8]	; (22c8 <nrf52_errata_16+0x24>)
    22c0:	5cd0      	ldrb	r0, [r2, r3]
    22c2:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    22c4:	2000      	movs	r0, #0
    #endif
}
    22c6:	4770      	bx	lr
    22c8:	0000432b 	.word	0x0000432b

000022cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    22cc:	4a02      	ldr	r2, [pc, #8]	; (22d8 <nvmc_wait+0xc>)
    22ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    22d2:	2b00      	cmp	r3, #0
    22d4:	d0fb      	beq.n	22ce <nvmc_wait+0x2>
}
    22d6:	4770      	bx	lr
    22d8:	4001e000 	.word	0x4001e000

000022dc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    22dc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    22de:	f001 fd12 	bl	3d06 <nrf52_errata_108>
    22e2:	b140      	cbz	r0, 22f6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    22e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    22e8:	4a90      	ldr	r2, [pc, #576]	; (252c <SystemInit+0x250>)
    22ea:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    22ee:	f3c3 2304 	ubfx	r3, r3, #8, #5
    22f2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    22f6:	f7ff ffd5 	bl	22a4 <nrf52_errata_16>
    22fa:	b110      	cbz	r0, 2302 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    22fc:	4b8c      	ldr	r3, [pc, #560]	; (2530 <SystemInit+0x254>)
    22fe:	4a8d      	ldr	r2, [pc, #564]	; (2534 <SystemInit+0x258>)
    2300:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2302:	f001 fd00 	bl	3d06 <nrf52_errata_108>
    2306:	b148      	cbz	r0, 231c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    230c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2310:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2314:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2318:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    231c:	f7ff ffc2 	bl	22a4 <nrf52_errata_16>
    2320:	b130      	cbz	r0, 2330 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2322:	4a85      	ldr	r2, [pc, #532]	; (2538 <SystemInit+0x25c>)
    2324:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2328:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    232c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2330:	f001 fce9 	bl	3d06 <nrf52_errata_108>
    2334:	b140      	cbz	r0, 2348 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    233a:	2200      	movs	r2, #0
    233c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2340:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2344:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2348:	f7ff ffac 	bl	22a4 <nrf52_errata_16>
    234c:	b120      	cbz	r0, 2358 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    234e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2352:	2203      	movs	r2, #3
    2354:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2358:	f7ff ffa4 	bl	22a4 <nrf52_errata_16>
    235c:	b160      	cbz	r0, 2378 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    235e:	4b77      	ldr	r3, [pc, #476]	; (253c <SystemInit+0x260>)
    2360:	2205      	movs	r2, #5
    2362:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2366:	2201      	movs	r2, #1
    2368:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    236c:	2200      	movs	r2, #0
    236e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2372:	223f      	movs	r2, #63	; 0x3f
    2374:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2378:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    237c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2380:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2382:	bf09      	itett	eq
    2384:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2388:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    238c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2390:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2394:	bf08      	it	eq
    2396:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    239a:	2a06      	cmp	r2, #6
    239c:	d14d      	bne.n	243a <SystemInit+0x15e>
            {
                switch(var2)
    239e:	3b03      	subs	r3, #3
    23a0:	2b04      	cmp	r3, #4
    23a2:	d803      	bhi.n	23ac <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    23a4:	4a66      	ldr	r2, [pc, #408]	; (2540 <SystemInit+0x264>)
    23a6:	5cd3      	ldrb	r3, [r2, r3]
    23a8:	2b00      	cmp	r3, #0
    23aa:	d046      	beq.n	243a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    23ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    23b0:	4b64      	ldr	r3, [pc, #400]	; (2544 <SystemInit+0x268>)
    23b2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    23b6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    23ba:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    23be:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    23c2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    23c6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    23ca:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    23ce:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    23d2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    23d6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    23da:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    23de:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    23e2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    23e6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    23ea:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    23ee:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    23f2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    23f6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    23fa:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    23fe:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2402:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2406:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    240a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    240e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2412:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2416:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    241a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    241e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2422:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2426:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    242a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    242e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2432:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2436:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    243a:	f001 fc64 	bl	3d06 <nrf52_errata_108>
    243e:	b148      	cbz	r0, 2454 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2448:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    244c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2450:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2454:	f001 fc57 	bl	3d06 <nrf52_errata_108>
    2458:	b148      	cbz	r0, 246e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    245a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    245e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2462:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2464:	bf44      	itt	mi
    2466:	f06f 0201 	mvnmi.w	r2, #1
    246a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    246e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2472:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2476:	2a06      	cmp	r2, #6
    2478:	d126      	bne.n	24c8 <SystemInit+0x1ec>
            {
                switch(var2)
    247a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    247e:	3b03      	subs	r3, #3
    2480:	2b04      	cmp	r3, #4
    2482:	d802      	bhi.n	248a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2484:	4a30      	ldr	r2, [pc, #192]	; (2548 <SystemInit+0x26c>)
    2486:	5cd3      	ldrb	r3, [r2, r3]
    2488:	b163      	cbz	r3, 24a4 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    248a:	4a30      	ldr	r2, [pc, #192]	; (254c <SystemInit+0x270>)
    248c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2494:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    249c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    24a0:	2b06      	cmp	r3, #6
    24a2:	d111      	bne.n	24c8 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    24a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    24a8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    24ac:	3b03      	subs	r3, #3
    24ae:	2b04      	cmp	r3, #4
    24b0:	d802      	bhi.n	24b8 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    24b2:	4a27      	ldr	r2, [pc, #156]	; (2550 <SystemInit+0x274>)
    24b4:	5cd3      	ldrb	r3, [r2, r3]
    24b6:	b13b      	cbz	r3, 24c8 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    24b8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    24bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    24c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24c4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    24c8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    24cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    24d0:	2a00      	cmp	r2, #0
    24d2:	db03      	blt.n	24dc <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    24d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    24d8:	2b00      	cmp	r3, #0
    24da:	da22      	bge.n	2522 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    24dc:	491d      	ldr	r1, [pc, #116]	; (2554 <SystemInit+0x278>)
    24de:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    24e0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    24e4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    24e8:	2415      	movs	r4, #21
    nvmc_wait();
    24ea:	f7ff feef 	bl	22cc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    24ee:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    24f2:	f7ff feeb 	bl	22cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    24f6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    24fa:	f7ff fee7 	bl	22cc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    24fe:	2300      	movs	r3, #0
    2500:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2504:	f7ff fee2 	bl	22cc <nvmc_wait>
    2508:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    250c:	490a      	ldr	r1, [pc, #40]	; (2538 <SystemInit+0x25c>)
    250e:	4b12      	ldr	r3, [pc, #72]	; (2558 <SystemInit+0x27c>)
    2510:	68ca      	ldr	r2, [r1, #12]
    2512:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2516:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2518:	60cb      	str	r3, [r1, #12]
    251a:	f3bf 8f4f 	dsb	sy
    __NOP();
    251e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2520:	e7fd      	b.n	251e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2522:	4b0e      	ldr	r3, [pc, #56]	; (255c <SystemInit+0x280>)
    2524:	4a0e      	ldr	r2, [pc, #56]	; (2560 <SystemInit+0x284>)
    2526:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2528:	bd10      	pop	{r4, pc}
    252a:	bf00      	nop
    252c:	40013000 	.word	0x40013000
    2530:	4007c000 	.word	0x4007c000
    2534:	baadf00d 	.word	0xbaadf00d
    2538:	e000ed00 	.word	0xe000ed00
    253c:	40005000 	.word	0x40005000
    2540:	0000431c 	.word	0x0000431c
    2544:	4000c000 	.word	0x4000c000
    2548:	00004321 	.word	0x00004321
    254c:	40001000 	.word	0x40001000
    2550:	00004326 	.word	0x00004326
    2554:	4001e000 	.word	0x4001e000
    2558:	05fa0004 	.word	0x05fa0004
    255c:	20000014 	.word	0x20000014
    2560:	03d09000 	.word	0x03d09000

00002564 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2564:	4b04      	ldr	r3, [pc, #16]	; (2578 <nrfx_clock_init+0x14>)
    2566:	791a      	ldrb	r2, [r3, #4]
    2568:	b922      	cbnz	r2, 2574 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    256a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    256c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    256e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2570:	4802      	ldr	r0, [pc, #8]	; (257c <nrfx_clock_init+0x18>)
    2572:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2574:	4802      	ldr	r0, [pc, #8]	; (2580 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2576:	4770      	bx	lr
    2578:	200009f8 	.word	0x200009f8
    257c:	0bad0000 	.word	0x0bad0000
    2580:	0bad000c 	.word	0x0bad000c

00002584 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2584:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2586:	b110      	cbz	r0, 258e <nrfx_clock_start+0xa>
    2588:	2801      	cmp	r0, #1
    258a:	d034      	beq.n	25f6 <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    258c:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    258e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2592:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2596:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    259a:	03c9      	lsls	r1, r1, #15
    259c:	d529      	bpl.n	25f2 <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    259e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    25a2:	2a01      	cmp	r2, #1
    25a4:	d125      	bne.n	25f2 <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    25a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25ae:	2200      	movs	r2, #0
    25b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    25b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    25b8:	2202      	movs	r2, #2
    25ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    25be:	4a13      	ldr	r2, [pc, #76]	; (260c <nrfx_clock_start+0x88>)
    25c0:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    25c4:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    25c8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    25cc:	4b10      	ldr	r3, [pc, #64]	; (2610 <nrfx_clock_start+0x8c>)
    25ce:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    25d0:	f044 0101 	orr.w	r1, r4, #1
    25d4:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    25d6:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    25d8:	6859      	ldr	r1, [r3, #4]
    25da:	1b49      	subs	r1, r1, r5
    25dc:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    25e0:	d3fa      	bcc.n	25d8 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
    25e2:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    25e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    25e8:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    25ec:	2201      	movs	r2, #1
    25ee:	609a      	str	r2, [r3, #8]
}
    25f0:	e7cc      	b.n	258c <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    25f2:	2200      	movs	r2, #0
    25f4:	e7d7      	b.n	25a6 <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    25f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    25fa:	2200      	movs	r2, #0
    25fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2600:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    2604:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2608:	6018      	str	r0, [r3, #0]
}
    260a:	e7bf      	b.n	258c <nrfx_clock_start+0x8>
    260c:	e000ed00 	.word	0xe000ed00
    2610:	e0001000 	.word	0xe0001000

00002614 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2614:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2616:	b110      	cbz	r0, 261e <nrfx_clock_stop+0xa>
    2618:	2801      	cmp	r0, #1
    261a:	d017      	beq.n	264c <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    261c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    261e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    2622:	2302      	movs	r3, #2
    2624:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2628:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
    262c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2630:	2301      	movs	r3, #1
    2632:	60e3      	str	r3, [r4, #12]
    2634:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2638:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    263c:	03db      	lsls	r3, r3, #15
    263e:	d5ed      	bpl.n	261c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    2640:	2001      	movs	r0, #1
    2642:	f001 fb6f 	bl	3d24 <nrfx_busy_wait>
    2646:	3d01      	subs	r5, #1
    2648:	d1f6      	bne.n	2638 <nrfx_clock_stop+0x24>
    264a:	e7e7      	b.n	261c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    264c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2650:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
    2652:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2656:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    265a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    265e:	6060      	str	r0, [r4, #4]
    2660:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2664:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2668:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    266c:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    266e:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2672:	d505      	bpl.n	2680 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    2674:	b123      	cbz	r3, 2680 <nrfx_clock_stop+0x6c>
    2676:	2001      	movs	r0, #1
    2678:	f001 fb54 	bl	3d24 <nrfx_busy_wait>
    267c:	3d01      	subs	r5, #1
    267e:	d1f1      	bne.n	2664 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
    2680:	4b01      	ldr	r3, [pc, #4]	; (2688 <nrfx_clock_stop+0x74>)
    2682:	2200      	movs	r2, #0
    2684:	715a      	strb	r2, [r3, #5]
    2686:	e7c9      	b.n	261c <nrfx_clock_stop+0x8>
    2688:	200009f8 	.word	0x200009f8

0000268c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    268c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2690:	b510      	push	{r4, lr}
    2692:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2696:	b16a      	cbz	r2, 26b4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2698:	2200      	movs	r2, #0
    269a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    269e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    26a2:	2201      	movs	r2, #1
    26a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    26a8:	4b11      	ldr	r3, [pc, #68]	; (26f0 <nrfx_power_clock_irq_handler+0x64>)
    26aa:	7958      	ldrb	r0, [r3, #5]
    26ac:	b910      	cbnz	r0, 26b4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    26ae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    26b0:	681b      	ldr	r3, [r3, #0]
    26b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    26b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    26b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    26bc:	b172      	cbz	r2, 26dc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26be:	2200      	movs	r2, #0
    26c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    26c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    26c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    26cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    26d0:	0792      	lsls	r2, r2, #30
    26d2:	d104      	bne.n	26de <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    26d4:	2201      	movs	r2, #1
    26d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26da:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    26dc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    26de:	2202      	movs	r2, #2
    26e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    26e4:	4b02      	ldr	r3, [pc, #8]	; (26f0 <nrfx_power_clock_irq_handler+0x64>)
}
    26e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    26ea:	681b      	ldr	r3, [r3, #0]
    26ec:	2001      	movs	r0, #1
    26ee:	4718      	bx	r3
    26f0:	200009f8 	.word	0x200009f8

000026f4 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    26f4:	2301      	movs	r3, #1
    26f6:	fa03 f000 	lsl.w	r0, r3, r0
    26fa:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    26fc:	b193      	cbz	r3, 2724 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    26fe:	f04f 0320 	mov.w	r3, #32
    2702:	f3ef 8111 	mrs	r1, BASEPRI
    2706:	f383 8811 	msr	BASEPRI, r3
    270a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    270e:	4a06      	ldr	r2, [pc, #24]	; (2728 <nrfx_gpiote_channel_free+0x34>)
    2710:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2712:	ea23 0000 	bic.w	r0, r3, r0
    2716:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    2718:	f381 8811 	msr	BASEPRI, r1
    271c:	f3bf 8f6f 	isb	sy
    2720:	4802      	ldr	r0, [pc, #8]	; (272c <nrfx_gpiote_channel_free+0x38>)
    2722:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    2724:	4802      	ldr	r0, [pc, #8]	; (2730 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2726:	4770      	bx	lr
    2728:	20000a00 	.word	0x20000a00
    272c:	0bad0000 	.word	0x0bad0000
    2730:	0bad0004 	.word	0x0bad0004

00002734 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    2734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2738:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    273a:	f8df e05c 	ldr.w	lr, [pc, #92]	; 2798 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    273e:	4817      	ldr	r0, [pc, #92]	; (279c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    2740:	f8df 805c 	ldr.w	r8, [pc, #92]	; 27a0 <nrfx_gpiote_channel_alloc+0x6c>
{
    2744:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    2746:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    2748:	2601      	movs	r6, #1
    274a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    274c:	f04f 0120 	mov.w	r1, #32
    2750:	f3ef 8c11 	mrs	ip, BASEPRI
    2754:	f381 8811 	msr	BASEPRI, r1
    2758:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    275c:	fa22 f103 	lsr.w	r1, r2, r3
    2760:	07c9      	lsls	r1, r1, #31
    2762:	d50a      	bpl.n	277a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    2764:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    2768:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    276c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    276e:	bf01      	itttt	eq
    2770:	4339      	orreq	r1, r7
    2772:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    2776:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    2778:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    277a:	f38c 8811 	msr	BASEPRI, ip
    277e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    2782:	4540      	cmp	r0, r8
    2784:	d005      	beq.n	2792 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    2786:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    278a:	439a      	bics	r2, r3
    278c:	f104 0401 	add.w	r4, r4, #1
    2790:	d1db      	bne.n	274a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2796:	bf00      	nop
    2798:	20000a00 	.word	0x20000a00
    279c:	0bad0002 	.word	0x0bad0002
    27a0:	0bad0000 	.word	0x0bad0000

000027a4 <nrfx_i2s_init>:
    }
}

nrfx_err_t nrfx_i2s_init(nrfx_i2s_config_t const * p_config,
                         nrfx_i2s_data_handler_t   handler)
{
    27a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(handler);

    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    27a8:	4d4c      	ldr	r5, [pc, #304]	; (28dc <nrfx_i2s_init+0x138>)
    27aa:	792b      	ldrb	r3, [r5, #4]
    27ac:	2b00      	cmp	r3, #0
    27ae:	f040 8092 	bne.w	28d6 <nrfx_i2s_init+0x132>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (!nrf_i2s_configure(NRF_I2S0,
    27b2:	f890 c006 	ldrb.w	ip, [r0, #6]
    27b6:	f890 8007 	ldrb.w	r8, [r0, #7]
    27ba:	f890 e008 	ldrb.w	lr, [r0, #8]
    27be:	7a46      	ldrb	r6, [r0, #9]
    27c0:	7a87      	ldrb	r7, [r0, #10]
    27c2:	68c4      	ldr	r4, [r0, #12]
    27c4:	7c02      	ldrb	r2, [r0, #16]
                                         nrf_i2s_swidth_t   sample_width,
                                         nrf_i2s_channels_t channels,
                                         nrf_i2s_mck_t      mck_setup,
                                         nrf_i2s_ratio_t    ratio)
{
    if (mode == NRF_I2S_MODE_MASTER)
    27c6:	f1bc 0f00 	cmp.w	ip, #0
    27ca:	d10e      	bne.n	27ea <nrfx_i2s_init+0x46>
    {
        // The MCK/LRCK ratio must be a multiple of 2 * sample width.
        if (((sample_width == NRF_I2S_SWIDTH_16BIT) &&
    27cc:	2e01      	cmp	r6, #1
    27ce:	d103      	bne.n	27d8 <nrfx_i2s_init+0x34>
    27d0:	2a01      	cmp	r2, #1
    27d2:	d10a      	bne.n	27ea <nrfx_i2s_init+0x46>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
        NRFX_LOG_WARNING("Function: %s, error code: %s.",
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    27d4:	4842      	ldr	r0, [pc, #264]	; (28e0 <nrfx_i2s_init+0x13c>)
    27d6:	e073      	b.n	28c0 <nrfx_i2s_init+0x11c>
                 (ratio == NRF_I2S_RATIO_48X))
            ||
    27d8:	2e02      	cmp	r6, #2
    27da:	d106      	bne.n	27ea <nrfx_i2s_init+0x46>
            ((sample_width == NRF_I2S_SWIDTH_24BIT) &&
    27dc:	2a08      	cmp	r2, #8
    27de:	d804      	bhi.n	27ea <nrfx_i2s_init+0x46>
    27e0:	f240 1355 	movw	r3, #341	; 0x155
    27e4:	40d3      	lsrs	r3, r2
    27e6:	07db      	lsls	r3, r3, #31
    27e8:	d4f4      	bmi.n	27d4 <nrfx_i2s_init+0x30>
        {
            return false;
        }
    }

    p_reg->CONFIG.MODE     = mode;
    27ea:	4b3e      	ldr	r3, [pc, #248]	; (28e4 <nrfx_i2s_init+0x140>)
    27ec:	f8c3 c504 	str.w	ip, [r3, #1284]	; 0x504
    p_reg->CONFIG.FORMAT   = format;
    27f0:	f8c3 8524 	str.w	r8, [r3, #1316]	; 0x524
    p_reg->CONFIG.ALIGN    = alignment;
    27f4:	f8c3 e520 	str.w	lr, [r3, #1312]	; 0x520
    p_reg->CONFIG.SWIDTH   = sample_width;
    27f8:	f8c3 651c 	str.w	r6, [r3, #1308]	; 0x51c
    p_reg->CONFIG.CHANNELS = channels;
    27fc:	f8c3 7528 	str.w	r7, [r3, #1320]	; 0x528
    p_reg->CONFIG.RATIO    = ratio;
    2800:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

    if (mck_setup == NRF_I2S_MCK_DISABLED)
    2804:	2c00      	cmp	r4, #0
    2806:	d15d      	bne.n	28c4 <nrfx_i2s_init+0x120>
    {
        p_reg->CONFIG.MCKEN =
    2808:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
        nrf_gpio_cfg_output(p_config->sck_pin);
    280c:	7807      	ldrb	r7, [r0, #0]
        nrf_gpio_cfg_output(p_config->lrck_pin);
    280e:	7846      	ldrb	r6, [r0, #1]
    *p_pin = pin_number & 0x1F;
    2810:	f007 041f 	and.w	r4, r7, #31
    2814:	f006 021f 	and.w	r2, r6, #31
    2818:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    281c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    2820:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (p_config->mode == NRF_I2S_MODE_MASTER)
    2824:	f1bc 0f00 	cmp.w	ip, #0
    2828:	d152      	bne.n	28d0 <nrfx_i2s_init+0x12c>
    reg->PIN_CNF[pin_number] = cnf;
    282a:	f04f 0c03 	mov.w	ip, #3
    282e:	f843 c024 	str.w	ip, [r3, r4, lsl #2]
    2832:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    if (p_config->mck_pin != NRFX_I2S_PIN_NOT_USED)
    2836:	7884      	ldrb	r4, [r0, #2]
    2838:	2cff      	cmp	r4, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    283a:	bf1f      	itttt	ne
    283c:	f004 031f 	andne.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    2840:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    2844:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    2848:	f04f 0c03 	movne.w	ip, #3
    284c:	bf18      	it	ne
    284e:	f842 c023 	strne.w	ip, [r2, r3, lsl #2]
    if (p_config->sdout_pin != NRFX_I2S_PIN_NOT_USED)
    2852:	78c2      	ldrb	r2, [r0, #3]
        mck_pin = NRF_I2S_PIN_NOT_CONNECTED;
    2854:	bf08      	it	eq
    2856:	f04f 34ff 	moveq.w	r4, #4294967295
    if (p_config->sdout_pin != NRFX_I2S_PIN_NOT_USED)
    285a:	2aff      	cmp	r2, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    285c:	bf1f      	itttt	ne
    285e:	f002 031f 	andne.w	r3, r2, #31
    reg->PIN_CNF[pin_number] = cnf;
    2862:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    2866:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    286a:	f04f 0e03 	movne.w	lr, #3
    286e:	bf18      	it	ne
    2870:	f84c e023 	strne.w	lr, [ip, r3, lsl #2]
    if (p_config->sdin_pin != NRFX_I2S_PIN_NOT_USED)
    2874:	7903      	ldrb	r3, [r0, #4]
        sdout_pin = NRF_I2S_PIN_NOT_CONNECTED;
    2876:	bf08      	it	eq
    2878:	f04f 32ff 	moveq.w	r2, #4294967295
    if (p_config->sdin_pin != NRFX_I2S_PIN_NOT_USED)
    287c:	2bff      	cmp	r3, #255	; 0xff
    *p_pin = pin_number & 0x1F;
    287e:	bf1f      	itttt	ne
    2880:	f003 001f 	andne.w	r0, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    2884:	f500 70e0 	addne.w	r0, r0, #448	; 0x1c0
    2888:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    288c:	f04f 0e00 	movne.w	lr, #0
    2890:	bf18      	it	ne
    2892:	f84c e020 	strne.w	lr, [ip, r0, lsl #2]
    p_reg->PSEL.SCK   = sck_pin;
    2896:	4813      	ldr	r0, [pc, #76]	; (28e4 <nrfx_i2s_init+0x140>)
        sdin_pin = NRF_I2S_PIN_NOT_CONNECTED;
    2898:	bf08      	it	eq
    289a:	f04f 33ff 	moveq.w	r3, #4294967295
    289e:	f8c0 7564 	str.w	r7, [r0, #1380]	; 0x564
    p_reg->PSEL.LRCK  = lrck_pin;
    28a2:	f8c0 6568 	str.w	r6, [r0, #1384]	; 0x568
    p_reg->PSEL.MCK   = mck_pin;
    28a6:	f8c0 4560 	str.w	r4, [r0, #1376]	; 0x560
    p_reg->PSEL.SDOUT = sdout_pin;
    28aa:	f8c0 2570 	str.w	r2, [r0, #1392]	; 0x570
    p_reg->PSEL.SDIN  = sdin_pin;
    28ae:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    configure_pins(p_config);

    m_cb.handler = handler;

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_I2S0), p_config->irq_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_I2S0));
    28b2:	2025      	movs	r0, #37	; 0x25
    m_cb.handler = handler;
    28b4:	6029      	str	r1, [r5, #0]
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_I2S0));
    28b6:	f7fe fed1 	bl	165c <arch_irq_enable>

    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    28ba:	2301      	movs	r3, #1

    NRFX_LOG_INFO("Initialized.");
    return NRFX_SUCCESS;
    28bc:	480a      	ldr	r0, [pc, #40]	; (28e8 <nrfx_i2s_init+0x144>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    28be:	712b      	strb	r3, [r5, #4]
}
    28c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            (I2S_CONFIG_MCKEN_MCKEN_Disabled << I2S_CONFIG_MCKEN_MCKEN_Pos);
    }
    else
    {
        p_reg->CONFIG.MCKFREQ = mck_setup;
        p_reg->CONFIG.MCKEN =
    28c4:	2201      	movs	r2, #1
        p_reg->CONFIG.MCKFREQ = mck_setup;
    28c6:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
        p_reg->CONFIG.MCKEN =
    28ca:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    28ce:	e79d      	b.n	280c <nrfx_i2s_init+0x68>
    28d0:	f04f 0c00 	mov.w	ip, #0
    28d4:	e7ab      	b.n	282e <nrfx_i2s_init+0x8a>
        return err_code;
    28d6:	4805      	ldr	r0, [pc, #20]	; (28ec <nrfx_i2s_init+0x148>)
    28d8:	e7f2      	b.n	28c0 <nrfx_i2s_init+0x11c>
    28da:	bf00      	nop
    28dc:	20000a50 	.word	0x20000a50
    28e0:	0bad0004 	.word	0x0bad0004
    28e4:	40025000 	.word	0x40025000
    28e8:	0bad0000 	.word	0x0bad0000
    28ec:	0bad0005 	.word	0x0bad0005

000028f0 <nrfx_i2s_start>:


nrfx_err_t nrfx_i2s_start(nrfx_i2s_buffers_t const * p_initial_buffers,
                          uint16_t                   buffer_size,
                          uint8_t                    flags)
{
    28f0:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(buffer_size != 0);
    (void)(flags);

    nrfx_err_t err_code;

    if (m_cb.state != NRFX_DRV_STATE_INITIALIZED)
    28f2:	4a32      	ldr	r2, [pc, #200]	; (29bc <nrfx_i2s_start+0xcc>)
    28f4:	7913      	ldrb	r3, [r2, #4]
    28f6:	2b01      	cmp	r3, #1
{
    28f8:	460e      	mov	r6, r1
    if (m_cb.state != NRFX_DRV_STATE_INITIALIZED)
    28fa:	d15a      	bne.n	29b2 <nrfx_i2s_start+0xc2>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (((p_initial_buffers->p_rx_buffer != NULL)
    28fc:	6803      	ldr	r3, [r0, #0]
    28fe:	b123      	cbz	r3, 290a <nrfx_i2s_start+0x1a>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    2900:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_initial_buffers->p_rx_buffer))
    2904:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2908:	d155      	bne.n	29b6 <nrfx_i2s_start+0xc6>
        ||
        ((p_initial_buffers->p_tx_buffer != NULL)
    290a:	6841      	ldr	r1, [r0, #4]
        ||
    290c:	b121      	cbz	r1, 2918 <nrfx_i2s_start+0x28>
    290e:	f001 4160 	and.w	r1, r1, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_initial_buffers->p_tx_buffer)))
    2912:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    2916:	d14e      	bne.n	29b6 <nrfx_i2s_start+0xc6>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_cb.use_rx         = (p_initial_buffers->p_rx_buffer != NULL);
    2918:	7951      	ldrb	r1, [r2, #5]
    291a:	3b00      	subs	r3, #0
    291c:	bf18      	it	ne
    291e:	2301      	movne	r3, #1
    2920:	f363 0100 	bfi	r1, r3, #0, #1
    2924:	7151      	strb	r1, [r2, #5]
    m_cb.use_tx         = (p_initial_buffers->p_tx_buffer != NULL);
    2926:	6843      	ldr	r3, [r0, #4]
    m_cb.rx_ready       = false;
    m_cb.tx_ready       = false;
    m_cb.buffers_needed = false;
    m_cb.buffer_size    = buffer_size;
    2928:	80d6      	strh	r6, [r2, #6]
    m_cb.use_tx         = (p_initial_buffers->p_tx_buffer != NULL);
    292a:	1e19      	subs	r1, r3, #0
    292c:	7953      	ldrb	r3, [r2, #5]
    292e:	bf18      	it	ne
    2930:	2101      	movne	r1, #1
    2932:	f023 031e 	bic.w	r3, r3, #30
    2936:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    293a:	7153      	strb	r3, [r2, #5]

    // Set the provided initial buffers as next, they will become the current
    // ones after the IRQ handler is called for the first time, what will occur
    // right after the START task is triggered.
    m_cb.next_buffers = *p_initial_buffers;
    293c:	c803      	ldmia	r0, {r0, r1}
    293e:	4b20      	ldr	r3, [pc, #128]	; (29c0 <nrfx_i2s_start+0xd0>)
    2940:	e883 0003 	stmia.w	r3, {r0, r1}
    m_cb.current_buffers.p_rx_buffer = NULL;
    m_cb.current_buffers.p_tx_buffer = NULL;

    nrf_i2s_transfer_set(NRF_I2S0,
    2944:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
NRF_STATIC_INLINE void nrf_i2s_transfer_set(NRF_I2S_Type *   p_reg,
                                            uint16_t         size,
                                            uint32_t *       p_buffer_rx,
                                            uint32_t const * p_buffer_tx)
{
    p_reg->RXTXD.MAXCNT = size;
    2948:	4b1e      	ldr	r3, [pc, #120]	; (29c4 <nrfx_i2s_start+0xd4>)
    m_cb.current_buffers.p_rx_buffer = NULL;
    294a:	2000      	movs	r0, #0
    m_cb.current_buffers.p_tx_buffer = NULL;
    294c:	e9c2 0004 	strd	r0, r0, [r2, #16]
    2950:	f8c3 6550 	str.w	r6, [r3, #1360]	; 0x550
}

NRF_STATIC_INLINE void nrf_i2s_rx_buffer_set(NRF_I2S_Type * p_reg,
                                             uint32_t * p_buffer)
{
    p_reg->RXD.PTR = (uint32_t)p_buffer;
    2954:	f8c3 5538 	str.w	r5, [r3, #1336]	; 0x538
    p_reg->CONFIG.RXEN = (p_buffer_rx != NULL) ? 1 : 0;
    2958:	1a2d      	subs	r5, r5, r0
    295a:	bf18      	it	ne
    295c:	2501      	movne	r5, #1
    295e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
}

NRF_STATIC_INLINE void nrf_i2s_tx_buffer_set(NRF_I2S_Type *   p_reg,
                                             uint32_t const * p_buffer)
{
    p_reg->TXD.PTR = (uint32_t)p_buffer;
    2962:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CONFIG.TXEN = (p_buffer_tx != NULL) ? 1 : 0;
    2966:	1a24      	subs	r4, r4, r0
    2968:	bf18      	it	ne
    296a:	2401      	movne	r4, #1
    296c:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
                         m_cb.next_buffers.p_rx_buffer,
                         m_cb.next_buffers.p_tx_buffer);

    nrf_i2s_enable(NRF_I2S0);

    m_cb.state = NRFX_DRV_STATE_POWERED_ON;
    2970:	2102      	movs	r1, #2
    p_reg->ENABLE = (I2S_ENABLE_ENABLE_Enabled << I2S_ENABLE_ENABLE_Pos);
    2972:	2401      	movs	r4, #1
    2974:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    2978:	7111      	strb	r1, [r2, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    297a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    297e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    2982:	f8c3 0114 	str.w	r0, [r3, #276]	; 0x114
    2986:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
    298a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    298e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108

    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD);
    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD);
    nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_STOPPED);
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
    2992:	7951      	ldrb	r1, [r2, #5]
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
                                 NRF_I2S_INT_STOPPED_MASK);
    nrf_i2s_task_trigger(NRF_I2S0, NRF_I2S_TASK_START);

    NRFX_LOG_INFO("Started.");
    return NRFX_SUCCESS;
    2994:	480c      	ldr	r0, [pc, #48]	; (29c8 <nrfx_i2s_start+0xd8>)
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
    2996:	fa01 f204 	lsl.w	r2, r1, r4
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
    299a:	0109      	lsls	r1, r1, #4
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
    299c:	f002 0202 	and.w	r2, r2, #2
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
    29a0:	f001 0120 	and.w	r1, r1, #32
    nrf_i2s_int_enable(NRF_I2S0, (m_cb.use_rx ? NRF_I2S_INT_RXPTRUPD_MASK : 0) |
    29a4:	430a      	orrs	r2, r1
                                 (m_cb.use_tx ? NRF_I2S_INT_TXPTRUPD_MASK : 0) |
    29a6:	f042 0204 	orr.w	r2, r2, #4
    p_reg->INTENSET = mask;
    29aa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    29ae:	601c      	str	r4, [r3, #0]
}
    29b0:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    29b2:	4806      	ldr	r0, [pc, #24]	; (29cc <nrfx_i2s_start+0xdc>)
    29b4:	e7fc      	b.n	29b0 <nrfx_i2s_start+0xc0>
        return err_code;
    29b6:	4806      	ldr	r0, [pc, #24]	; (29d0 <nrfx_i2s_start+0xe0>)
    29b8:	e7fa      	b.n	29b0 <nrfx_i2s_start+0xc0>
    29ba:	bf00      	nop
    29bc:	20000a50 	.word	0x20000a50
    29c0:	20000a58 	.word	0x20000a58
    29c4:	40025000 	.word	0x40025000
    29c8:	0bad0000 	.word	0x0bad0000
    29cc:	0bad0005 	.word	0x0bad0005
    29d0:	0bad000a 	.word	0x0bad000a

000029d4 <nrfx_i2s_next_buffers_set>:
                (nrfx_is_in_ram(p_buffers->p_tx_buffer) &&
                 nrfx_is_word_aligned(p_buffers->p_tx_buffer)));

    nrfx_err_t err_code;

    if (!m_cb.buffers_needed)
    29d4:	4b15      	ldr	r3, [pc, #84]	; (2a2c <nrfx_i2s_next_buffers_set+0x58>)
    29d6:	795a      	ldrb	r2, [r3, #5]
    29d8:	06d2      	lsls	r2, r2, #27
{
    29da:	b530      	push	{r4, r5, lr}
    if (!m_cb.buffers_needed)
    29dc:	d522      	bpl.n	2a24 <nrfx_i2s_next_buffers_set+0x50>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (((p_buffers->p_rx_buffer != NULL)
    29de:	6802      	ldr	r2, [r0, #0]
    29e0:	b122      	cbz	r2, 29ec <nrfx_i2s_next_buffers_set+0x18>
    29e2:	f002 4160 	and.w	r1, r2, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_buffers->p_rx_buffer))
    29e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    29ea:	d11d      	bne.n	2a28 <nrfx_i2s_next_buffers_set+0x54>
        ||
        ((p_buffers->p_tx_buffer != NULL)
    29ec:	6841      	ldr	r1, [r0, #4]
        ||
    29ee:	b121      	cbz	r1, 29fa <nrfx_i2s_next_buffers_set+0x26>
    29f0:	f001 4460 	and.w	r4, r1, #3758096384	; 0xe0000000
         && !nrfx_is_in_ram(p_buffers->p_tx_buffer)))
    29f4:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
    29f8:	d116      	bne.n	2a28 <nrfx_i2s_next_buffers_set+0x54>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    if (m_cb.use_tx)
    29fa:	795c      	ldrb	r4, [r3, #5]
    29fc:	07a5      	lsls	r5, r4, #30
    p_reg->TXD.PTR = (uint32_t)p_buffer;
    29fe:	bf44      	itt	mi
    2a00:	4d0b      	ldrmi	r5, [pc, #44]	; (2a30 <nrfx_i2s_next_buffers_set+0x5c>)
    2a02:	f8c5 1540 	strmi.w	r1, [r5, #1344]	; 0x540
    {
        NRFX_ASSERT(p_buffers->p_tx_buffer != NULL);
        nrf_i2s_tx_buffer_set(NRF_I2S0, p_buffers->p_tx_buffer);
    }
    if (m_cb.use_rx)
    2a06:	07e1      	lsls	r1, r4, #31
    p_reg->RXD.PTR = (uint32_t)p_buffer;
    2a08:	bf44      	itt	mi
    2a0a:	4909      	ldrmi	r1, [pc, #36]	; (2a30 <nrfx_i2s_next_buffers_set+0x5c>)
    2a0c:	f8c1 2538 	strmi.w	r2, [r1, #1336]	; 0x538
    {
        NRFX_ASSERT(p_buffers->p_rx_buffer != NULL);
        nrf_i2s_rx_buffer_set(NRF_I2S0, p_buffers->p_rx_buffer);
    }

    m_cb.next_buffers   = *p_buffers;
    2a10:	c803      	ldmia	r0, {r0, r1}
    2a12:	4a08      	ldr	r2, [pc, #32]	; (2a34 <nrfx_i2s_next_buffers_set+0x60>)
    2a14:	e882 0003 	stmia.w	r2, {r0, r1}
    m_cb.buffers_needed = false;
    2a18:	795a      	ldrb	r2, [r3, #5]

    return NRFX_SUCCESS;
    2a1a:	4807      	ldr	r0, [pc, #28]	; (2a38 <nrfx_i2s_next_buffers_set+0x64>)
    m_cb.buffers_needed = false;
    2a1c:	f36f 1204 	bfc	r2, #4, #1
    2a20:	715a      	strb	r2, [r3, #5]
}
    2a22:	bd30      	pop	{r4, r5, pc}
        return err_code;
    2a24:	4805      	ldr	r0, [pc, #20]	; (2a3c <nrfx_i2s_next_buffers_set+0x68>)
    2a26:	e7fc      	b.n	2a22 <nrfx_i2s_next_buffers_set+0x4e>
        return err_code;
    2a28:	4805      	ldr	r0, [pc, #20]	; (2a40 <nrfx_i2s_next_buffers_set+0x6c>)
    2a2a:	e7fa      	b.n	2a22 <nrfx_i2s_next_buffers_set+0x4e>
    2a2c:	20000a50 	.word	0x20000a50
    2a30:	40025000 	.word	0x40025000
    2a34:	20000a58 	.word	0x20000a58
    2a38:	0bad0000 	.word	0x0bad0000
    2a3c:	0bad0005 	.word	0x0bad0005
    2a40:	0bad000a 	.word	0x0bad000a

00002a44 <nrfx_i2s_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a44:	4b3a      	ldr	r3, [pc, #232]	; (2b30 <nrfx_i2s_irq_handler+0xec>)
#endif
}


void nrfx_i2s_irq_handler(void)
{
    2a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a48:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
    2a4c:	4c39      	ldr	r4, [pc, #228]	; (2b34 <nrfx_i2s_irq_handler+0xf0>)
    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD))
    2a4e:	b17a      	cbz	r2, 2a70 <nrfx_i2s_irq_handler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a50:	2200      	movs	r2, #0
    2a52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    2a56:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    {
        nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_TXPTRUPD);
        m_cb.tx_ready = true;
    2a5a:	7963      	ldrb	r3, [r4, #5]
    2a5c:	f043 0308 	orr.w	r3, r3, #8
        if (m_cb.use_tx && m_cb.buffers_needed)
    2a60:	f003 0212 	and.w	r2, r3, #18
    2a64:	2a12      	cmp	r2, #18
        m_cb.tx_ready = true;
    2a66:	7163      	strb	r3, [r4, #5]
        {
            m_cb.buffers_reused = true;
    2a68:	bf04      	itt	eq
    2a6a:	f043 0320 	orreq.w	r3, r3, #32
    2a6e:	7163      	strbeq	r3, [r4, #5]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a70:	4b2f      	ldr	r3, [pc, #188]	; (2b30 <nrfx_i2s_irq_handler+0xec>)
    2a72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
    }
    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD))
    2a76:	b17a      	cbz	r2, 2a98 <nrfx_i2s_irq_handler+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2a78:	2200      	movs	r2, #0
    2a7a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2a7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    {
        nrf_i2s_event_clear(NRF_I2S0, NRF_I2S_EVENT_RXPTRUPD);
        m_cb.rx_ready = true;
    2a82:	7963      	ldrb	r3, [r4, #5]
    2a84:	f043 0304 	orr.w	r3, r3, #4
        if (m_cb.use_rx && m_cb.buffers_needed)
    2a88:	f003 0211 	and.w	r2, r3, #17
    2a8c:	2a11      	cmp	r2, #17
        m_cb.rx_ready = true;
    2a8e:	7163      	strb	r3, [r4, #5]
        {
            m_cb.buffers_reused = true;
    2a90:	bf04      	itt	eq
    2a92:	f043 0320 	orreq.w	r3, r3, #32
    2a96:	7163      	strbeq	r3, [r4, #5]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a98:	4b25      	ldr	r3, [pc, #148]	; (2b30 <nrfx_i2s_irq_handler+0xec>)
    2a9a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
        }
    }

    if (nrf_i2s_event_check(NRF_I2S0, NRF_I2S_EVENT_STOPPED))
    2a9e:	b1aa      	cbz	r2, 2acc <nrfx_i2s_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2aa0:	2100      	movs	r1, #0
    2aa2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
    2aa6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108

        // When stopped, release all buffers, including these scheduled for
        // the next part of the transfer, and signal that the transfer has
        // finished.

        m_cb.handler(&m_cb.current_buffers, 0);
    2aaa:	4823      	ldr	r0, [pc, #140]	; (2b38 <nrfx_i2s_irq_handler+0xf4>)
    p_reg->INTENCLR = mask;
    2aac:	2204      	movs	r2, #4
    2aae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = (I2S_ENABLE_ENABLE_Disabled << I2S_ENABLE_ENABLE_Pos);
    2ab2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    2ab6:	6823      	ldr	r3, [r4, #0]
    2ab8:	4798      	blx	r3

        // Change the state of the driver before calling the handler with
        // the flag signaling that the transfer has finished, so that it is
        // possible to start a new transfer directly from the handler function.
        m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    2aba:	2301      	movs	r3, #1
    2abc:	7123      	strb	r3, [r4, #4]
        NRFX_LOG_INFO("Stopped.");

        m_cb.handler(&m_cb.next_buffers, NRFX_I2S_STATUS_TRANSFER_STOPPED);
    2abe:	481f      	ldr	r0, [pc, #124]	; (2b3c <nrfx_i2s_irq_handler+0xf8>)
    2ac0:	6823      	ldr	r3, [r4, #0]
    2ac2:	2102      	movs	r1, #2
                             NRFX_I2S_STATUS_NEXT_BUFFERS_NEEDED);
            }

        }
    }
}
    2ac4:	b003      	add	sp, #12
    2ac6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                m_cb.handler(NULL,
    2aca:	4718      	bx	r3
        if ((m_cb.use_tx && m_cb.use_rx && m_cb.tx_ready && m_cb.rx_ready) ||
    2acc:	7963      	ldrb	r3, [r4, #5]
    2ace:	f003 020f 	and.w	r2, r3, #15
    2ad2:	2a0f      	cmp	r2, #15
    2ad4:	d008      	beq.n	2ae8 <nrfx_i2s_irq_handler+0xa4>
    2ad6:	07d8      	lsls	r0, r3, #31
    2ad8:	d401      	bmi.n	2ade <nrfx_i2s_irq_handler+0x9a>
            (!m_cb.use_rx && m_cb.tx_ready) ||
    2ada:	0719      	lsls	r1, r3, #28
    2adc:	d404      	bmi.n	2ae8 <nrfx_i2s_irq_handler+0xa4>
            (!m_cb.use_tx && m_cb.rx_ready))
    2ade:	7962      	ldrb	r2, [r4, #5]
            (!m_cb.use_rx && m_cb.tx_ready) ||
    2ae0:	0792      	lsls	r2, r2, #30
    2ae2:	d423      	bmi.n	2b2c <nrfx_i2s_irq_handler+0xe8>
            (!m_cb.use_tx && m_cb.rx_ready))
    2ae4:	075b      	lsls	r3, r3, #29
    2ae6:	d521      	bpl.n	2b2c <nrfx_i2s_irq_handler+0xe8>
            m_cb.rx_ready = false;
    2ae8:	7962      	ldrb	r2, [r4, #5]
        m_cb.handler(&m_cb.current_buffers, 0);
    2aea:	6827      	ldr	r7, [r4, #0]
            if (m_cb.buffers_reused)
    2aec:	f002 03f3 	and.w	r3, r2, #243	; 0xf3
    2af0:	f012 0220 	ands.w	r2, r2, #32
    2af4:	d008      	beq.n	2b08 <nrfx_i2s_irq_handler+0xc4>
                m_cb.buffers_needed = true;
    2af6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    2afa:	f043 0310 	orr.w	r3, r3, #16
    2afe:	7163      	strb	r3, [r4, #5]
                m_cb.handler(NULL,
    2b00:	2101      	movs	r1, #1
    2b02:	2000      	movs	r0, #0
    2b04:	463b      	mov	r3, r7
    2b06:	e7dd      	b.n	2ac4 <nrfx_i2s_irq_handler+0x80>
                nrfx_i2s_buffers_t released_buffers = m_cb.current_buffers;
    2b08:	4d0b      	ldr	r5, [pc, #44]	; (2b38 <nrfx_i2s_irq_handler+0xf4>)
    2b0a:	e895 0003 	ldmia.w	r5, {r0, r1}
    2b0e:	466e      	mov	r6, sp
    2b10:	e886 0003 	stmia.w	r6, {r0, r1}
                m_cb.current_buffers = m_cb.next_buffers;
    2b14:	e915 0003 	ldmdb	r5, {r0, r1}
                m_cb.buffers_needed = true;
    2b18:	f043 0310 	orr.w	r3, r3, #16
                m_cb.current_buffers = m_cb.next_buffers;
    2b1c:	e885 0003 	stmia.w	r5, {r0, r1}
                m_cb.next_buffers.p_tx_buffer = NULL;
    2b20:	e9c4 2202 	strd	r2, r2, [r4, #8]
                m_cb.buffers_needed = true;
    2b24:	7163      	strb	r3, [r4, #5]
                m_cb.handler(&released_buffers,
    2b26:	2101      	movs	r1, #1
    2b28:	4630      	mov	r0, r6
    2b2a:	47b8      	blx	r7
}
    2b2c:	b003      	add	sp, #12
    2b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b30:	40025000 	.word	0x40025000
    2b34:	20000a50 	.word	0x20000a50
    2b38:	20000a60 	.word	0x20000a60
    2b3c:	20000a58 	.word	0x20000a58

00002b40 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2b40:	4b0e      	ldr	r3, [pc, #56]	; (2b7c <z_sys_init_run_level+0x3c>)
{
    2b42:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2b44:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2b48:	3001      	adds	r0, #1
    2b4a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2b4e:	42a6      	cmp	r6, r4
    2b50:	d800      	bhi.n	2b54 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    2b52:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2b54:	e9d4 3500 	ldrd	r3, r5, [r4]
    2b58:	4628      	mov	r0, r5
    2b5a:	4798      	blx	r3
		if (dev != NULL) {
    2b5c:	b165      	cbz	r5, 2b78 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    2b5e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    2b60:	b130      	cbz	r0, 2b70 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    2b62:	2800      	cmp	r0, #0
    2b64:	bfb8      	it	lt
    2b66:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    2b68:	28ff      	cmp	r0, #255	; 0xff
    2b6a:	bfa8      	it	ge
    2b6c:	20ff      	movge	r0, #255	; 0xff
    2b6e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    2b70:	785a      	ldrb	r2, [r3, #1]
    2b72:	f042 0201 	orr.w	r2, r2, #1
    2b76:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2b78:	3408      	adds	r4, #8
    2b7a:	e7e8      	b.n	2b4e <z_sys_init_run_level+0xe>
    2b7c:	00004238 	.word	0x00004238

00002b80 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    2b80:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    2b82:	4605      	mov	r5, r0
    2b84:	b910      	cbnz	r0, 2b8c <z_impl_device_get_binding+0xc>
		return NULL;
    2b86:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    2b88:	4620      	mov	r0, r4
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    2b8c:	7803      	ldrb	r3, [r0, #0]
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d0f9      	beq.n	2b86 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b92:	4c0e      	ldr	r4, [pc, #56]	; (2bcc <z_impl_device_get_binding+0x4c>)
    2b94:	4e0e      	ldr	r6, [pc, #56]	; (2bd0 <z_impl_device_get_binding+0x50>)
    2b96:	42b4      	cmp	r4, r6
    2b98:	d108      	bne.n	2bac <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    2b9a:	4c0c      	ldr	r4, [pc, #48]	; (2bcc <z_impl_device_get_binding+0x4c>)
    2b9c:	42b4      	cmp	r4, r6
    2b9e:	d0f2      	beq.n	2b86 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2ba0:	4620      	mov	r0, r4
    2ba2:	f001 f8cc 	bl	3d3e <z_device_ready>
    2ba6:	b950      	cbnz	r0, 2bbe <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2ba8:	3418      	adds	r4, #24
    2baa:	e7f7      	b.n	2b9c <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    2bac:	4620      	mov	r0, r4
    2bae:	f001 f8c6 	bl	3d3e <z_device_ready>
    2bb2:	b110      	cbz	r0, 2bba <z_impl_device_get_binding+0x3a>
    2bb4:	6823      	ldr	r3, [r4, #0]
    2bb6:	42ab      	cmp	r3, r5
    2bb8:	d0e6      	beq.n	2b88 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    2bba:	3418      	adds	r4, #24
    2bbc:	e7eb      	b.n	2b96 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    2bbe:	6821      	ldr	r1, [r4, #0]
    2bc0:	4628      	mov	r0, r5
    2bc2:	f000 fff4 	bl	3bae <strcmp>
    2bc6:	2800      	cmp	r0, #0
    2bc8:	d1ee      	bne.n	2ba8 <z_impl_device_get_binding+0x28>
    2bca:	e7dd      	b.n	2b88 <z_impl_device_get_binding+0x8>
    2bcc:	00003fb4 	.word	0x00003fb4
    2bd0:	00004014 	.word	0x00004014

00002bd4 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2bd4:	4802      	ldr	r0, [pc, #8]	; (2be0 <z_bss_zero+0xc>)
    2bd6:	4a03      	ldr	r2, [pc, #12]	; (2be4 <z_bss_zero+0x10>)
    2bd8:	2100      	movs	r1, #0
    2bda:	1a12      	subs	r2, r2, r0
    2bdc:	f000 bffe 	b.w	3bdc <memset>
    2be0:	20000028 	.word	0x20000028
    2be4:	20000ab0 	.word	0x20000ab0

00002be8 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2be8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2bea:	4b0a      	ldr	r3, [pc, #40]	; (2c14 <bg_thread_main+0x2c>)
    2bec:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2bee:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2bf0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2bf2:	f7ff ffa5 	bl	2b40 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    2bf6:	f000 fdd7 	bl	37a8 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2bfa:	2003      	movs	r0, #3
    2bfc:	f7ff ffa0 	bl	2b40 <z_sys_init_run_level>

	z_init_static_threads();
    2c00:	f000 f8c4 	bl	2d8c <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
    2c04:	f7fd fc8e 	bl	524 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2c08:	4a03      	ldr	r2, [pc, #12]	; (2c18 <bg_thread_main+0x30>)
    2c0a:	7b13      	ldrb	r3, [r2, #12]
    2c0c:	f023 0301 	bic.w	r3, r3, #1
    2c10:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    2c12:	bd08      	pop	{r3, pc}
    2c14:	20000aac 	.word	0x20000aac
    2c18:	200000a8 	.word	0x200000a8

00002c1c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    2c1c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    2c20:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 2d04 <z_cstart+0xe8>
    2c24:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2c26:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    2c2a:	4d37      	ldr	r5, [pc, #220]	; (2d08 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    2c2c:	4e37      	ldr	r6, [pc, #220]	; (2d0c <z_cstart+0xf0>)
    2c2e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c30:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2d10 <z_cstart+0xf4>
	z_setup_new_thread(thread, stack,
    2c34:	4f37      	ldr	r7, [pc, #220]	; (2d14 <z_cstart+0xf8>)
    2c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c3a:	2400      	movs	r4, #0
    2c3c:	616b      	str	r3, [r5, #20]
    2c3e:	23e0      	movs	r3, #224	; 0xe0
    2c40:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    2c44:	77ec      	strb	r4, [r5, #31]
    2c46:	762c      	strb	r4, [r5, #24]
    2c48:	766c      	strb	r4, [r5, #25]
    2c4a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2c4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2c4e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    2c52:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    2c54:	f7fe feca 	bl	19ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2c58:	f7fe fd72 	bl	1740 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2c5c:	f04f 33ff 	mov.w	r3, #4294967295
    2c60:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    2c62:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    2c64:	f7fe ffa8 	bl	1bb8 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    2c68:	4d2b      	ldr	r5, [pc, #172]	; (2d18 <z_cstart+0xfc>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    2c6a:	f7fe ff37 	bl	1adc <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    2c6e:	f240 1301 	movw	r3, #257	; 0x101
    2c72:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2c76:	ab06      	add	r3, sp, #24
    2c78:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    2c7a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    2c7e:	f001 f85d 	bl	3d3c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    2c82:	4620      	mov	r0, r4
    2c84:	f7ff ff5c 	bl	2b40 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2c88:	2001      	movs	r0, #1
    2c8a:	f7ff ff59 	bl	2b40 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c8e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    2c92:	f000 fb2f 	bl	32f4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c96:	4b21      	ldr	r3, [pc, #132]	; (2d1c <z_cstart+0x100>)
	_kernel.ready_q.cache = &z_main_thread;
    2c98:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2c9a:	4921      	ldr	r1, [pc, #132]	; (2d20 <z_cstart+0x104>)
    2c9c:	9305      	str	r3, [sp, #20]
    2c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2ca2:	4653      	mov	r3, sl
    2ca4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2ca8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2cac:	9400      	str	r4, [sp, #0]
    2cae:	4630      	mov	r0, r6
    2cb0:	f000 f83c 	bl	2d2c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2cb4:	7b73      	ldrb	r3, [r6, #13]
    2cb6:	4680      	mov	r8, r0
    2cb8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2cbc:	4630      	mov	r0, r6
    2cbe:	7373      	strb	r3, [r6, #13]
    2cc0:	f001 f8c7 	bl	3e52 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2cc4:	230f      	movs	r3, #15
    2cc6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2cca:	4916      	ldr	r1, [pc, #88]	; (2d24 <z_cstart+0x108>)
    2ccc:	4b16      	ldr	r3, [pc, #88]	; (2d28 <z_cstart+0x10c>)
    2cce:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2cd2:	e9cd b404 	strd	fp, r4, [sp, #16]
    2cd6:	e9cd 5400 	strd	r5, r4, [sp]
    2cda:	4638      	mov	r0, r7
    2cdc:	f000 f826 	bl	2d2c <z_setup_new_thread>
    2ce0:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2ce2:	60ef      	str	r7, [r5, #12]
    2ce4:	f023 0304 	bic.w	r3, r3, #4
    2ce8:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2cea:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    2cee:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
    2cf2:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2cf4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2cf8:	4652      	mov	r2, sl
    2cfa:	4641      	mov	r1, r8
    2cfc:	4630      	mov	r0, r6
    2cfe:	f7fe fd0d 	bl	171c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2d02:	bf00      	nop
    2d04:	200017f0 	.word	0x200017f0
    2d08:	e000ed00 	.word	0xe000ed00
    2d0c:	200000a8 	.word	0x200000a8
    2d10:	00002be9 	.word	0x00002be9
    2d14:	20000028 	.word	0x20000028
    2d18:	20000a68 	.word	0x20000a68
    2d1c:	00004330 	.word	0x00004330
    2d20:	20000ab0 	.word	0x20000ab0
    2d24:	20000eb0 	.word	0x20000eb0
    2d28:	00002e45 	.word	0x00002e45

00002d2c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2d2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2d30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    2d32:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2d34:	2604      	movs	r6, #4
    2d36:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    2d38:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    2d3a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    2d3c:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2d40:	1dd6      	adds	r6, r2, #7
    2d42:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    2d48:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2d4a:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    2d4e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    2d52:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    2d56:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    2d58:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    2d5a:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d5c:	9202      	str	r2, [sp, #8]
    2d5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2d60:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    2d62:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2d68:	9200      	str	r2, [sp, #0]
    2d6a:	4642      	mov	r2, r8
{
    2d6c:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2d6e:	f7fe fcb9 	bl	16e4 <arch_new_thread>
	if (!_current) {
    2d72:	4b05      	ldr	r3, [pc, #20]	; (2d88 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    2d74:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    2d76:	689b      	ldr	r3, [r3, #8]
    2d78:	b103      	cbz	r3, 2d7c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    2d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    2d7c:	6723      	str	r3, [r4, #112]	; 0x70
}
    2d7e:	4640      	mov	r0, r8
    2d80:	b004      	add	sp, #16
    2d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2d86:	bf00      	nop
    2d88:	20000a68 	.word	0x20000a68

00002d8c <z_init_static_threads>:
{
    2d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d90:	4c29      	ldr	r4, [pc, #164]	; (2e38 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    2d92:	4d2a      	ldr	r5, [pc, #168]	; (2e3c <z_init_static_threads+0xb0>)
{
    2d94:	b087      	sub	sp, #28
    2d96:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    2d98:	42ae      	cmp	r6, r5
    2d9a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    2d9e:	d30f      	bcc.n	2dc0 <z_init_static_threads+0x34>
	k_sched_lock();
    2da0:	f000 f906 	bl	2fb0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    2da4:	4c24      	ldr	r4, [pc, #144]	; (2e38 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    2da6:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2e40 <z_init_static_threads+0xb4>
		} else {
			return (t * to_hz + off) / from_hz;
    2daa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2dae:	f240 37e7 	movw	r7, #999	; 0x3e7
    2db2:	42ac      	cmp	r4, r5
    2db4:	d320      	bcc.n	2df8 <z_init_static_threads+0x6c>
}
    2db6:	b007      	add	sp, #28
    2db8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    2dbc:	f000 b9b0 	b.w	3120 <k_sched_unlock>
		z_setup_new_thread(
    2dc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2dc4:	9305      	str	r3, [sp, #20]
    2dc6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2dca:	9304      	str	r3, [sp, #16]
    2dcc:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2dd0:	9303      	str	r3, [sp, #12]
    2dd2:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2dd6:	9302      	str	r3, [sp, #8]
    2dd8:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2ddc:	9301      	str	r3, [sp, #4]
    2dde:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2de2:	9300      	str	r3, [sp, #0]
    2de4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2de8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2dec:	f7ff ff9e 	bl	2d2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2df0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2df4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    2df6:	e7ce      	b.n	2d96 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2dfa:	1c5a      	adds	r2, r3, #1
    2dfc:	d00d      	beq.n	2e1a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    2dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2e02:	2100      	movs	r1, #0
    2e04:	4638      	mov	r0, r7
    2e06:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2e0a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    2e0e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2e12:	d104      	bne.n	2e1e <z_init_static_threads+0x92>
	z_sched_start(thread);
    2e14:	4640      	mov	r0, r8
    2e16:	f000 fa4f 	bl	32b8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2e1a:	3430      	adds	r4, #48	; 0x30
    2e1c:	e7c9      	b.n	2db2 <z_init_static_threads+0x26>
    2e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e22:	2300      	movs	r3, #0
    2e24:	f7fd f95a 	bl	dc <__aeabi_uldivmod>
    2e28:	4602      	mov	r2, r0
    2e2a:	460b      	mov	r3, r1
    2e2c:	f108 0018 	add.w	r0, r8, #24
    2e30:	4649      	mov	r1, r9
    2e32:	f000 fbcb 	bl	35cc <z_add_timeout>
    2e36:	e7f0      	b.n	2e1a <z_init_static_threads+0x8e>
    2e38:	20000028 	.word	0x20000028
    2e3c:	20000028 	.word	0x20000028
    2e40:	00003e73 	.word	0x00003e73

00002e44 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2e44:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2e46:	4c09      	ldr	r4, [pc, #36]	; (2e6c <idle+0x28>)
	__asm__ volatile(
    2e48:	f04f 0220 	mov.w	r2, #32
    2e4c:	f3ef 8311 	mrs	r3, BASEPRI
    2e50:	f382 8811 	msr	BASEPRI, r2
    2e54:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2e58:	f001 f85b 	bl	3f12 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    2e5c:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    2e5e:	f7fe f8cf 	bl	1000 <pm_system_suspend>
    2e62:	2800      	cmp	r0, #0
    2e64:	d1f0      	bne.n	2e48 <idle+0x4>
	arch_cpu_idle();
    2e66:	f7fe fc71 	bl	174c <arch_cpu_idle>
}
    2e6a:	e7ed      	b.n	2e48 <idle+0x4>
    2e6c:	20000a68 	.word	0x20000a68

00002e70 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2e70:	b538      	push	{r3, r4, r5, lr}
    2e72:	4604      	mov	r4, r0
    2e74:	f04f 0320 	mov.w	r3, #32
    2e78:	f3ef 8511 	mrs	r5, BASEPRI
    2e7c:	f383 8811 	msr	BASEPRI, r3
    2e80:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    2e84:	f001 f817 	bl	3eb6 <z_unpend_first_thread>

	if (thread != NULL) {
    2e88:	b148      	cbz	r0, 2e9e <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2e8a:	2200      	movs	r2, #0
    2e8c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2e8e:	f000 ffe0 	bl	3e52 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2e92:	4629      	mov	r1, r5
    2e94:	4805      	ldr	r0, [pc, #20]	; (2eac <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    2e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2e9a:	f000 b877 	b.w	2f8c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2e9e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2ea2:	429a      	cmp	r2, r3
    2ea4:	bf18      	it	ne
    2ea6:	3301      	addne	r3, #1
    2ea8:	60a3      	str	r3, [r4, #8]
}
    2eaa:	e7f2      	b.n	2e92 <z_impl_k_sem_give+0x22>
    2eac:	20000aad 	.word	0x20000aad

00002eb0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2eb0:	b513      	push	{r0, r1, r4, lr}
    2eb2:	f04f 0420 	mov.w	r4, #32
    2eb6:	f3ef 8111 	mrs	r1, BASEPRI
    2eba:	f384 8811 	msr	BASEPRI, r4
    2ebe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    2ec2:	6884      	ldr	r4, [r0, #8]
    2ec4:	b144      	cbz	r4, 2ed8 <z_impl_k_sem_take+0x28>
		sem->count--;
    2ec6:	3c01      	subs	r4, #1
    2ec8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    2eca:	f381 8811 	msr	BASEPRI, r1
    2ece:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2ed2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    2ed4:	b002      	add	sp, #8
    2ed6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2ed8:	ea52 0403 	orrs.w	r4, r2, r3
    2edc:	d106      	bne.n	2eec <z_impl_k_sem_take+0x3c>
    2ede:	f381 8811 	msr	BASEPRI, r1
    2ee2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2ee6:	f06f 000f 	mvn.w	r0, #15
    2eea:	e7f3      	b.n	2ed4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2eec:	e9cd 2300 	strd	r2, r3, [sp]
    2ef0:	4602      	mov	r2, r0
    2ef2:	4802      	ldr	r0, [pc, #8]	; (2efc <z_impl_k_sem_take+0x4c>)
    2ef4:	f000 f8ce 	bl	3094 <z_pend_curr>
	return ret;
    2ef8:	e7ec      	b.n	2ed4 <z_impl_k_sem_take+0x24>
    2efa:	bf00      	nop
    2efc:	20000aad 	.word	0x20000aad

00002f00 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2f00:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2f02:	4c08      	ldr	r4, [pc, #32]	; (2f24 <z_reset_time_slice+0x24>)
    2f04:	6823      	ldr	r3, [r4, #0]
    2f06:	b15b      	cbz	r3, 2f20 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    2f08:	f7fe fb4c 	bl	15a4 <sys_clock_elapsed>
    2f0c:	4603      	mov	r3, r0
    2f0e:	6820      	ldr	r0, [r4, #0]
    2f10:	4a05      	ldr	r2, [pc, #20]	; (2f28 <z_reset_time_slice+0x28>)
    2f12:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    2f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    2f18:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    2f1a:	2100      	movs	r1, #0
    2f1c:	f001 b809 	b.w	3f32 <z_set_timeout_expiry>
}
    2f20:	bd10      	pop	{r4, pc}
    2f22:	bf00      	nop
    2f24:	20000aa0 	.word	0x20000aa0
    2f28:	20000a68 	.word	0x20000a68

00002f2c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    2f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f2e:	4604      	mov	r4, r0
    2f30:	460d      	mov	r5, r1
	__asm__ volatile(
    2f32:	f04f 0320 	mov.w	r3, #32
    2f36:	f3ef 8611 	mrs	r6, BASEPRI
    2f3a:	f383 8811 	msr	BASEPRI, r3
    2f3e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    2f42:	4b0f      	ldr	r3, [pc, #60]	; (2f80 <k_sched_time_slice_set+0x54>)
    2f44:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    2f46:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2f4a:	f240 30e7 	movw	r0, #999	; 0x3e7
    2f4e:	6119      	str	r1, [r3, #16]
    2f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2f54:	2300      	movs	r3, #0
    2f56:	fbe4 0107 	umlal	r0, r1, r4, r7
    2f5a:	f7fd f8bf 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    2f5e:	2c00      	cmp	r4, #0
    2f60:	4b08      	ldr	r3, [pc, #32]	; (2f84 <k_sched_time_slice_set+0x58>)
    2f62:	dc09      	bgt.n	2f78 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    2f64:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    2f66:	4b08      	ldr	r3, [pc, #32]	; (2f88 <k_sched_time_slice_set+0x5c>)
    2f68:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    2f6a:	f7ff ffc9 	bl	2f00 <z_reset_time_slice>
	__asm__ volatile(
    2f6e:	f386 8811 	msr	BASEPRI, r6
    2f72:	f3bf 8f6f 	isb	sy
	}
}
    2f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    2f78:	2802      	cmp	r0, #2
    2f7a:	bfb8      	it	lt
    2f7c:	2002      	movlt	r0, #2
    2f7e:	e7f1      	b.n	2f64 <k_sched_time_slice_set+0x38>
    2f80:	20000a68 	.word	0x20000a68
    2f84:	20000aa0 	.word	0x20000aa0
    2f88:	20000a9c 	.word	0x20000a9c

00002f8c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2f8c:	b949      	cbnz	r1, 2fa2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2f8e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    2f92:	b930      	cbnz	r0, 2fa2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    2f94:	4b05      	ldr	r3, [pc, #20]	; (2fac <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    2f96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2f98:	689b      	ldr	r3, [r3, #8]
    2f9a:	429a      	cmp	r2, r3
    2f9c:	d001      	beq.n	2fa2 <z_reschedule+0x16>
	ret = arch_swap(key);
    2f9e:	f7fe bb0f 	b.w	15c0 <arch_swap>
    2fa2:	f381 8811 	msr	BASEPRI, r1
    2fa6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2faa:	4770      	bx	lr
    2fac:	20000a68 	.word	0x20000a68

00002fb0 <k_sched_lock>:
	__asm__ volatile(
    2fb0:	f04f 0320 	mov.w	r3, #32
    2fb4:	f3ef 8111 	mrs	r1, BASEPRI
    2fb8:	f383 8811 	msr	BASEPRI, r3
    2fbc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    2fc0:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <k_sched_lock+0x24>)
    2fc2:	689a      	ldr	r2, [r3, #8]
    2fc4:	7bd3      	ldrb	r3, [r2, #15]
    2fc6:	3b01      	subs	r3, #1
    2fc8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2fca:	f381 8811 	msr	BASEPRI, r1
    2fce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    2fd2:	4770      	bx	lr
    2fd4:	20000a68 	.word	0x20000a68

00002fd8 <update_cache>:
{
    2fd8:	b538      	push	{r3, r4, r5, lr}
    2fda:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    2fdc:	480c      	ldr	r0, [pc, #48]	; (3010 <update_cache+0x38>)
    2fde:	4d0d      	ldr	r5, [pc, #52]	; (3014 <update_cache+0x3c>)
    2fe0:	f000 ff07 	bl	3df2 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    2fe4:	4604      	mov	r4, r0
    2fe6:	b900      	cbnz	r0, 2fea <update_cache+0x12>
    2fe8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    2fea:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    2fec:	b94a      	cbnz	r2, 3002 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    2fee:	7b5a      	ldrb	r2, [r3, #13]
    2ff0:	06d2      	lsls	r2, r2, #27
    2ff2:	d106      	bne.n	3002 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2ff4:	69a2      	ldr	r2, [r4, #24]
    2ff6:	b922      	cbnz	r2, 3002 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    2ff8:	89da      	ldrh	r2, [r3, #14]
    2ffa:	2a7f      	cmp	r2, #127	; 0x7f
    2ffc:	d901      	bls.n	3002 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    2ffe:	626b      	str	r3, [r5, #36]	; 0x24
}
    3000:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3002:	429c      	cmp	r4, r3
    3004:	d001      	beq.n	300a <update_cache+0x32>
			z_reset_time_slice();
    3006:	f7ff ff7b 	bl	2f00 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    300a:	626c      	str	r4, [r5, #36]	; 0x24
}
    300c:	e7f8      	b.n	3000 <update_cache+0x28>
    300e:	bf00      	nop
    3010:	20000a90 	.word	0x20000a90
    3014:	20000a68 	.word	0x20000a68

00003018 <unready_thread>:
{
    3018:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    301a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    301e:	7b43      	ldrb	r3, [r0, #13]
    3020:	2a00      	cmp	r2, #0
{
    3022:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3024:	da04      	bge.n	3030 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    302a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    302c:	f000 feb9 	bl	3da2 <sys_dlist_remove>
	update_cache(thread == _current);
    3030:	4b04      	ldr	r3, [pc, #16]	; (3044 <unready_thread+0x2c>)
    3032:	6898      	ldr	r0, [r3, #8]
    3034:	1a43      	subs	r3, r0, r1
    3036:	4258      	negs	r0, r3
    3038:	4158      	adcs	r0, r3
}
    303a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    303e:	f7ff bfcb 	b.w	2fd8 <update_cache>
    3042:	bf00      	nop
    3044:	20000a68 	.word	0x20000a68

00003048 <pend>:
{
    3048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    304c:	4606      	mov	r6, r0
    304e:	4615      	mov	r5, r2
    3050:	461c      	mov	r4, r3
	__asm__ volatile(
    3052:	f04f 0320 	mov.w	r3, #32
    3056:	f3ef 8711 	mrs	r7, BASEPRI
    305a:	f383 8811 	msr	BASEPRI, r3
    305e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3062:	f000 fecc 	bl	3dfe <add_to_waitq_locked>
	__asm__ volatile(
    3066:	f387 8811 	msr	BASEPRI, r7
    306a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    306e:	f1b4 3fff 	cmp.w	r4, #4294967295
    3072:	bf08      	it	eq
    3074:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3078:	d008      	beq.n	308c <pend+0x44>
    307a:	462a      	mov	r2, r5
    307c:	4623      	mov	r3, r4
    307e:	f106 0018 	add.w	r0, r6, #24
    3082:	4903      	ldr	r1, [pc, #12]	; (3090 <pend+0x48>)
}
    3084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3088:	f000 baa0 	b.w	35cc <z_add_timeout>
    308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3090:	00003e73 	.word	0x00003e73

00003094 <z_pend_curr>:
{
    3094:	b510      	push	{r4, lr}
	pending_current = _current;
    3096:	4b07      	ldr	r3, [pc, #28]	; (30b4 <z_pend_curr+0x20>)
    3098:	6898      	ldr	r0, [r3, #8]
    309a:	4b07      	ldr	r3, [pc, #28]	; (30b8 <z_pend_curr+0x24>)
{
    309c:	460c      	mov	r4, r1
	pending_current = _current;
    309e:	6018      	str	r0, [r3, #0]
{
    30a0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    30a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    30a6:	f7ff ffcf 	bl	3048 <pend>
    30aa:	4620      	mov	r0, r4
}
    30ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    30b0:	f7fe ba86 	b.w	15c0 <arch_swap>
    30b4:	20000a68 	.word	0x20000a68
    30b8:	20000a98 	.word	0x20000a98

000030bc <z_impl_k_thread_suspend>:
{
    30bc:	b570      	push	{r4, r5, r6, lr}
    30be:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    30c0:	3018      	adds	r0, #24
    30c2:	f000 ff10 	bl	3ee6 <z_abort_timeout>
	__asm__ volatile(
    30c6:	f04f 0320 	mov.w	r3, #32
    30ca:	f3ef 8611 	mrs	r6, BASEPRI
    30ce:	f383 8811 	msr	BASEPRI, r3
    30d2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    30d6:	f994 200d 	ldrsb.w	r2, [r4, #13]
    30da:	7b63      	ldrb	r3, [r4, #13]
    30dc:	2a00      	cmp	r2, #0
    30de:	da05      	bge.n	30ec <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    30e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    30e4:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    30e6:	4620      	mov	r0, r4
    30e8:	f000 fe5b 	bl	3da2 <sys_dlist_remove>
		update_cache(thread == _current);
    30ec:	4d0b      	ldr	r5, [pc, #44]	; (311c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    30ee:	7b63      	ldrb	r3, [r4, #13]
    30f0:	68a8      	ldr	r0, [r5, #8]
    30f2:	f043 0310 	orr.w	r3, r3, #16
    30f6:	7363      	strb	r3, [r4, #13]
    30f8:	1b03      	subs	r3, r0, r4
    30fa:	4258      	negs	r0, r3
    30fc:	4158      	adcs	r0, r3
    30fe:	f7ff ff6b 	bl	2fd8 <update_cache>
	__asm__ volatile(
    3102:	f386 8811 	msr	BASEPRI, r6
    3106:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    310a:	68ab      	ldr	r3, [r5, #8]
    310c:	42a3      	cmp	r3, r4
    310e:	d103      	bne.n	3118 <z_impl_k_thread_suspend+0x5c>
}
    3110:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3114:	f000 be63 	b.w	3dde <z_reschedule_unlocked>
}
    3118:	bd70      	pop	{r4, r5, r6, pc}
    311a:	bf00      	nop
    311c:	20000a68 	.word	0x20000a68

00003120 <k_sched_unlock>:
{
    3120:	b510      	push	{r4, lr}
	__asm__ volatile(
    3122:	f04f 0320 	mov.w	r3, #32
    3126:	f3ef 8411 	mrs	r4, BASEPRI
    312a:	f383 8811 	msr	BASEPRI, r3
    312e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3132:	4b08      	ldr	r3, [pc, #32]	; (3154 <k_sched_unlock+0x34>)
    3134:	689a      	ldr	r2, [r3, #8]
    3136:	7bd3      	ldrb	r3, [r2, #15]
    3138:	3301      	adds	r3, #1
    313a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    313c:	2000      	movs	r0, #0
    313e:	f7ff ff4b 	bl	2fd8 <update_cache>
	__asm__ volatile(
    3142:	f384 8811 	msr	BASEPRI, r4
    3146:	f3bf 8f6f 	isb	sy
}
    314a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    314e:	f000 be46 	b.w	3dde <z_reschedule_unlocked>
    3152:	bf00      	nop
    3154:	20000a68 	.word	0x20000a68

00003158 <move_thread_to_end_of_prio_q>:
{
    3158:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    315a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    315e:	7b43      	ldrb	r3, [r0, #13]
    3160:	2a00      	cmp	r2, #0
{
    3162:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3164:	da04      	bge.n	3170 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    316a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    316c:	f000 fe19 	bl	3da2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3170:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3172:	4a15      	ldr	r2, [pc, #84]	; (31c8 <move_thread_to_end_of_prio_q+0x70>)
    3174:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3178:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    317a:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    317e:	f102 0528 	add.w	r5, r2, #40	; 0x28
    3182:	42ab      	cmp	r3, r5
    3184:	d01b      	beq.n	31be <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3186:	b1d3      	cbz	r3, 31be <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    3188:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    318c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3190:	4286      	cmp	r6, r0
    3192:	d00f      	beq.n	31b4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3194:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3196:	2800      	cmp	r0, #0
    3198:	dd0c      	ble.n	31b4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    319a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    319c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    31a0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    31a2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    31a4:	6890      	ldr	r0, [r2, #8]
    31a6:	1a43      	subs	r3, r0, r1
    31a8:	4258      	negs	r0, r3
}
    31aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    31ae:	4158      	adcs	r0, r3
    31b0:	f7ff bf12 	b.w	2fd8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    31b4:	42a3      	cmp	r3, r4
    31b6:	d002      	beq.n	31be <move_thread_to_end_of_prio_q+0x66>
    31b8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    31ba:	2b00      	cmp	r3, #0
    31bc:	d1e6      	bne.n	318c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    31be:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    31c2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    31c4:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    31c6:	e7ed      	b.n	31a4 <move_thread_to_end_of_prio_q+0x4c>
    31c8:	20000a68 	.word	0x20000a68

000031cc <z_time_slice>:
{
    31cc:	b538      	push	{r3, r4, r5, lr}
    31ce:	4601      	mov	r1, r0
	__asm__ volatile(
    31d0:	f04f 0320 	mov.w	r3, #32
    31d4:	f3ef 8411 	mrs	r4, BASEPRI
    31d8:	f383 8811 	msr	BASEPRI, r3
    31dc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    31e0:	4b15      	ldr	r3, [pc, #84]	; (3238 <z_time_slice+0x6c>)
    31e2:	4a16      	ldr	r2, [pc, #88]	; (323c <z_time_slice+0x70>)
    31e4:	6898      	ldr	r0, [r3, #8]
    31e6:	6815      	ldr	r5, [r2, #0]
    31e8:	42a8      	cmp	r0, r5
    31ea:	d106      	bne.n	31fa <z_time_slice+0x2e>
			z_reset_time_slice();
    31ec:	f7ff fe88 	bl	2f00 <z_reset_time_slice>
	__asm__ volatile(
    31f0:	f384 8811 	msr	BASEPRI, r4
    31f4:	f3bf 8f6f 	isb	sy
}
    31f8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    31fa:	2500      	movs	r5, #0
    31fc:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    31fe:	4a10      	ldr	r2, [pc, #64]	; (3240 <z_time_slice+0x74>)
    3200:	6812      	ldr	r2, [r2, #0]
    3202:	b1ba      	cbz	r2, 3234 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    3204:	89c2      	ldrh	r2, [r0, #14]
    3206:	2a7f      	cmp	r2, #127	; 0x7f
    3208:	d814      	bhi.n	3234 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    320a:	7b42      	ldrb	r2, [r0, #13]
    320c:	06d2      	lsls	r2, r2, #27
    320e:	d111      	bne.n	3234 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3210:	4a0c      	ldr	r2, [pc, #48]	; (3244 <z_time_slice+0x78>)
    3212:	f990 500e 	ldrsb.w	r5, [r0, #14]
    3216:	6812      	ldr	r2, [r2, #0]
    3218:	4295      	cmp	r5, r2
    321a:	db0b      	blt.n	3234 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    321c:	4a0a      	ldr	r2, [pc, #40]	; (3248 <z_time_slice+0x7c>)
    321e:	4290      	cmp	r0, r2
    3220:	d008      	beq.n	3234 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    3222:	691a      	ldr	r2, [r3, #16]
    3224:	428a      	cmp	r2, r1
    3226:	dc02      	bgt.n	322e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    3228:	f7ff ff96 	bl	3158 <move_thread_to_end_of_prio_q>
    322c:	e7de      	b.n	31ec <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    322e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    3230:	611a      	str	r2, [r3, #16]
    3232:	e7dd      	b.n	31f0 <z_time_slice+0x24>
    3234:	2200      	movs	r2, #0
    3236:	e7fb      	b.n	3230 <z_time_slice+0x64>
    3238:	20000a68 	.word	0x20000a68
    323c:	20000a98 	.word	0x20000a98
    3240:	20000aa0 	.word	0x20000aa0
    3244:	20000a9c 	.word	0x20000a9c
    3248:	20000028 	.word	0x20000028

0000324c <ready_thread>:
{
    324c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    324e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3252:	7b43      	ldrb	r3, [r0, #13]
    3254:	2a00      	cmp	r2, #0
    3256:	db2a      	blt.n	32ae <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3258:	06da      	lsls	r2, r3, #27
    325a:	d128      	bne.n	32ae <ready_thread+0x62>
    325c:	6982      	ldr	r2, [r0, #24]
    325e:	bb32      	cbnz	r2, 32ae <ready_thread+0x62>
	return list->head == list;
    3260:	4a14      	ldr	r2, [pc, #80]	; (32b4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3262:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3266:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    3268:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    326c:	f102 0528 	add.w	r5, r2, #40	; 0x28
    3270:	42ab      	cmp	r3, r5
    3272:	d017      	beq.n	32a4 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3274:	b1b3      	cbz	r3, 32a4 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    3276:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    327a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    327e:	428e      	cmp	r6, r1
    3280:	d00b      	beq.n	329a <ready_thread+0x4e>
		return b2 - b1;
    3282:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3284:	2900      	cmp	r1, #0
    3286:	dd08      	ble.n	329a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    3288:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    328a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    328e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3290:	6058      	str	r0, [r3, #4]
}
    3292:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3294:	2000      	movs	r0, #0
    3296:	f7ff be9f 	b.w	2fd8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    329a:	42a3      	cmp	r3, r4
    329c:	d002      	beq.n	32a4 <ready_thread+0x58>
    329e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    32a0:	2b00      	cmp	r3, #0
    32a2:	d1ea      	bne.n	327a <ready_thread+0x2e>
	node->prev = tail;
    32a4:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    32a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    32aa:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    32ac:	e7f1      	b.n	3292 <ready_thread+0x46>
}
    32ae:	bc70      	pop	{r4, r5, r6}
    32b0:	4770      	bx	lr
    32b2:	bf00      	nop
    32b4:	20000a68 	.word	0x20000a68

000032b8 <z_sched_start>:
{
    32b8:	b510      	push	{r4, lr}
	__asm__ volatile(
    32ba:	f04f 0220 	mov.w	r2, #32
    32be:	f3ef 8411 	mrs	r4, BASEPRI
    32c2:	f382 8811 	msr	BASEPRI, r2
    32c6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    32ca:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    32cc:	0751      	lsls	r1, r2, #29
    32ce:	d404      	bmi.n	32da <z_sched_start+0x22>
	__asm__ volatile(
    32d0:	f384 8811 	msr	BASEPRI, r4
    32d4:	f3bf 8f6f 	isb	sy
}
    32d8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    32da:	f022 0204 	bic.w	r2, r2, #4
    32de:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    32e0:	f7ff ffb4 	bl	324c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    32e4:	4621      	mov	r1, r4
    32e6:	4802      	ldr	r0, [pc, #8]	; (32f0 <z_sched_start+0x38>)
}
    32e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    32ec:	f7ff be4e 	b.w	2f8c <z_reschedule>
    32f0:	20000aad 	.word	0x20000aad

000032f4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    32f4:	4b04      	ldr	r3, [pc, #16]	; (3308 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    32f6:	2100      	movs	r1, #0
    32f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    32fc:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3300:	4608      	mov	r0, r1
    3302:	f7ff be13 	b.w	2f2c <k_sched_time_slice_set>
    3306:	bf00      	nop
    3308:	20000a68 	.word	0x20000a68

0000330c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    330e:	f04f 0320 	mov.w	r3, #32
    3312:	f3ef 8511 	mrs	r5, BASEPRI
    3316:	f383 8811 	msr	BASEPRI, r3
    331a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
    331e:	491a      	ldr	r1, [pc, #104]	; (3388 <z_impl_k_yield+0x7c>)
    3320:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3322:	7b43      	ldrb	r3, [r0, #13]
    3324:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3328:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    332a:	f000 fd3a 	bl	3da2 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
    332e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3330:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3332:	4608      	mov	r0, r1
    3334:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3338:	735a      	strb	r2, [r3, #13]
    333a:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    333e:	4282      	cmp	r2, r0
    3340:	d01c      	beq.n	337c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3342:	b1da      	cbz	r2, 337c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    3344:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
    3346:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    334a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    334e:	42a6      	cmp	r6, r4
    3350:	d00f      	beq.n	3372 <z_impl_k_yield+0x66>
		return b2 - b1;
    3352:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3354:	2c00      	cmp	r4, #0
    3356:	dd0c      	ble.n	3372 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    3358:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    335a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    335e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3360:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3362:	2001      	movs	r0, #1
    3364:	f7ff fe38 	bl	2fd8 <update_cache>
    3368:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    336a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    336e:	f7fe b927 	b.w	15c0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3372:	42ba      	cmp	r2, r7
    3374:	d002      	beq.n	337c <z_impl_k_yield+0x70>
    3376:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3378:	2a00      	cmp	r2, #0
    337a:	d1e6      	bne.n	334a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    337c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
    337e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    3382:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3384:	62cb      	str	r3, [r1, #44]	; 0x2c
}
    3386:	e7ec      	b.n	3362 <z_impl_k_yield+0x56>
    3388:	20000a68 	.word	0x20000a68

0000338c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    338c:	ea50 0301 	orrs.w	r3, r0, r1
{
    3390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3394:	4605      	mov	r5, r0
    3396:	460e      	mov	r6, r1
	if (ticks == 0) {
    3398:	d103      	bne.n	33a2 <z_tick_sleep+0x16>
	z_impl_k_yield();
    339a:	f7ff ffb7 	bl	330c <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    339e:	2000      	movs	r0, #0
    33a0:	e033      	b.n	340a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    33a2:	f06f 0401 	mvn.w	r4, #1
    33a6:	1a24      	subs	r4, r4, r0
    33a8:	f04f 33ff 	mov.w	r3, #4294967295
    33ac:	eb63 0301 	sbc.w	r3, r3, r1
    33b0:	2c01      	cmp	r4, #1
    33b2:	f173 0300 	sbcs.w	r3, r3, #0
    33b6:	da02      	bge.n	33be <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    33b8:	f000 fdd5 	bl	3f66 <sys_clock_tick_get_32>
    33bc:	1944      	adds	r4, r0, r5
    33be:	f04f 0320 	mov.w	r3, #32
    33c2:	f3ef 8811 	mrs	r8, BASEPRI
    33c6:	f383 8811 	msr	BASEPRI, r3
    33ca:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    33ce:	4f10      	ldr	r7, [pc, #64]	; (3410 <z_tick_sleep+0x84>)
    33d0:	4b10      	ldr	r3, [pc, #64]	; (3414 <z_tick_sleep+0x88>)
    33d2:	68b8      	ldr	r0, [r7, #8]
    33d4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    33d6:	f7ff fe1f 	bl	3018 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    33da:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    33dc:	490e      	ldr	r1, [pc, #56]	; (3418 <z_tick_sleep+0x8c>)
    33de:	462a      	mov	r2, r5
    33e0:	4633      	mov	r3, r6
    33e2:	3018      	adds	r0, #24
    33e4:	f000 f8f2 	bl	35cc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    33e8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    33ea:	7b53      	ldrb	r3, [r2, #13]
    33ec:	f043 0310 	orr.w	r3, r3, #16
    33f0:	7353      	strb	r3, [r2, #13]
    33f2:	4640      	mov	r0, r8
    33f4:	f7fe f8e4 	bl	15c0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    33f8:	f000 fdb5 	bl	3f66 <sys_clock_tick_get_32>
    33fc:	1a20      	subs	r0, r4, r0
    33fe:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3402:	2801      	cmp	r0, #1
    3404:	f173 0300 	sbcs.w	r3, r3, #0
    3408:	dbc9      	blt.n	339e <z_tick_sleep+0x12>
}
    340a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    340e:	bf00      	nop
    3410:	20000a68 	.word	0x20000a68
    3414:	20000a98 	.word	0x20000a98
    3418:	00003e73 	.word	0x00003e73

0000341c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    341c:	f1b1 3fff 	cmp.w	r1, #4294967295
    3420:	bf08      	it	eq
    3422:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3426:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3428:	d106      	bne.n	3438 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    342a:	4b08      	ldr	r3, [pc, #32]	; (344c <z_impl_k_sleep+0x30>)
    342c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    342e:	f7ff fe45 	bl	30bc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3432:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3436:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3438:	f7ff ffa8 	bl	338c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    343c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3440:	fb80 0303 	smull	r0, r3, r0, r3
    3444:	0bc0      	lsrs	r0, r0, #15
    3446:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    344a:	e7f4      	b.n	3436 <z_impl_k_sleep+0x1a>
    344c:	20000a68 	.word	0x20000a68

00003450 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3450:	4b01      	ldr	r3, [pc, #4]	; (3458 <z_impl_k_current_get+0x8>)
    3452:	6898      	ldr	r0, [r3, #8]
    3454:	4770      	bx	lr
    3456:	bf00      	nop
    3458:	20000a68 	.word	0x20000a68

0000345c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    345c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3460:	4604      	mov	r4, r0
    3462:	f04f 0320 	mov.w	r3, #32
    3466:	f3ef 8611 	mrs	r6, BASEPRI
    346a:	f383 8811 	msr	BASEPRI, r3
    346e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3472:	7b43      	ldrb	r3, [r0, #13]
    3474:	071a      	lsls	r2, r3, #28
    3476:	d505      	bpl.n	3484 <z_thread_abort+0x28>
	__asm__ volatile(
    3478:	f386 8811 	msr	BASEPRI, r6
    347c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3484:	f023 0220 	bic.w	r2, r3, #32
    3488:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    348c:	09d2      	lsrs	r2, r2, #7
    348e:	d120      	bne.n	34d2 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3490:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3492:	68a3      	ldr	r3, [r4, #8]
    3494:	b113      	cbz	r3, 349c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    3496:	4620      	mov	r0, r4
    3498:	f000 fc8b 	bl	3db2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    349c:	f104 0018 	add.w	r0, r4, #24
    34a0:	f000 fd21 	bl	3ee6 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    34a4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    34a8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    34ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    34ae:	42bd      	cmp	r5, r7
    34b0:	d000      	beq.n	34b4 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    34b2:	b9b5      	cbnz	r5, 34e2 <z_thread_abort+0x86>
		update_cache(1);
    34b4:	2001      	movs	r0, #1
    34b6:	f7ff fd8f 	bl	2fd8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    34ba:	4b10      	ldr	r3, [pc, #64]	; (34fc <z_thread_abort+0xa0>)
    34bc:	689b      	ldr	r3, [r3, #8]
    34be:	42a3      	cmp	r3, r4
    34c0:	d1da      	bne.n	3478 <z_thread_abort+0x1c>
    34c2:	f3ef 8305 	mrs	r3, IPSR
    34c6:	2b00      	cmp	r3, #0
    34c8:	d1d6      	bne.n	3478 <z_thread_abort+0x1c>
    34ca:	4630      	mov	r0, r6
    34cc:	f7fe f878 	bl	15c0 <arch_swap>
	return ret;
    34d0:	e7d2      	b.n	3478 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    34d2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    34d6:	f043 0308 	orr.w	r3, r3, #8
    34da:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    34dc:	f000 fc61 	bl	3da2 <sys_dlist_remove>
}
    34e0:	e7d7      	b.n	3492 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    34e2:	4628      	mov	r0, r5
    34e4:	f000 fc65 	bl	3db2 <unpend_thread_no_timeout>
    34e8:	f105 0018 	add.w	r0, r5, #24
    34ec:	f000 fcfb 	bl	3ee6 <z_abort_timeout>
    34f0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    34f4:	4628      	mov	r0, r5
    34f6:	f7ff fea9 	bl	324c <ready_thread>
    34fa:	e7d7      	b.n	34ac <z_thread_abort+0x50>
    34fc:	20000a68 	.word	0x20000a68

00003500 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3500:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3502:	4806      	ldr	r0, [pc, #24]	; (351c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3504:	4a06      	ldr	r2, [pc, #24]	; (3520 <z_data_copy+0x20>)
    3506:	4907      	ldr	r1, [pc, #28]	; (3524 <z_data_copy+0x24>)
    3508:	1a12      	subs	r2, r2, r0
    350a:	f000 fb5c 	bl	3bc6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    350e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3512:	4a05      	ldr	r2, [pc, #20]	; (3528 <z_data_copy+0x28>)
    3514:	4905      	ldr	r1, [pc, #20]	; (352c <z_data_copy+0x2c>)
    3516:	4806      	ldr	r0, [pc, #24]	; (3530 <z_data_copy+0x30>)
    3518:	f000 bb55 	b.w	3bc6 <memcpy>
    351c:	20000000 	.word	0x20000000
    3520:	20000028 	.word	0x20000028
    3524:	0000436c 	.word	0x0000436c
    3528:	00000000 	.word	0x00000000
    352c:	0000436c 	.word	0x0000436c
    3530:	20000000 	.word	0x20000000

00003534 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3534:	4b03      	ldr	r3, [pc, #12]	; (3544 <elapsed+0x10>)
    3536:	681b      	ldr	r3, [r3, #0]
    3538:	b90b      	cbnz	r3, 353e <elapsed+0xa>
    353a:	f7fe b833 	b.w	15a4 <sys_clock_elapsed>
}
    353e:	2000      	movs	r0, #0
    3540:	4770      	bx	lr
    3542:	bf00      	nop
    3544:	20000aa4 	.word	0x20000aa4

00003548 <next_timeout>:
	return list->head == list;
    3548:	4b11      	ldr	r3, [pc, #68]	; (3590 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    354a:	b510      	push	{r4, lr}
    354c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    354e:	429c      	cmp	r4, r3
    3550:	bf08      	it	eq
    3552:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3554:	f7ff ffee 	bl	3534 <elapsed>
    3558:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    355a:	b16c      	cbz	r4, 3578 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    355c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    3560:	1ac0      	subs	r0, r0, r3
    3562:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    3566:	2801      	cmp	r0, #1
    3568:	f173 0200 	sbcs.w	r2, r3, #0
    356c:	db0d      	blt.n	358a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    356e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    3572:	f173 0300 	sbcs.w	r3, r3, #0
    3576:	db01      	blt.n	357c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    3578:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    357c:	4b05      	ldr	r3, [pc, #20]	; (3594 <next_timeout+0x4c>)
    357e:	691b      	ldr	r3, [r3, #16]
    3580:	b113      	cbz	r3, 3588 <next_timeout+0x40>
    3582:	4298      	cmp	r0, r3
    3584:	bfa8      	it	ge
    3586:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3588:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    358a:	2000      	movs	r0, #0
    358c:	e7f6      	b.n	357c <next_timeout+0x34>
    358e:	bf00      	nop
    3590:	20000018 	.word	0x20000018
    3594:	20000a68 	.word	0x20000a68

00003598 <remove_timeout>:
{
    3598:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    359a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    359c:	b168      	cbz	r0, 35ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    359e:	4a0a      	ldr	r2, [pc, #40]	; (35c8 <remove_timeout+0x30>)
    35a0:	6852      	ldr	r2, [r2, #4]
    35a2:	4290      	cmp	r0, r2
    35a4:	d009      	beq.n	35ba <remove_timeout+0x22>
	if (next(t) != NULL) {
    35a6:	b143      	cbz	r3, 35ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    35a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    35ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    35b0:	1912      	adds	r2, r2, r4
    35b2:	eb41 0105 	adc.w	r1, r1, r5
    35b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    35ba:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    35bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    35be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    35c0:	2300      	movs	r3, #0
	node->prev = NULL;
    35c2:	e9c0 3300 	strd	r3, r3, [r0]
}
    35c6:	bd30      	pop	{r4, r5, pc}
    35c8:	20000018 	.word	0x20000018

000035cc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    35cc:	f1b3 3fff 	cmp.w	r3, #4294967295
    35d0:	bf08      	it	eq
    35d2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    35d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35d8:	4604      	mov	r4, r0
    35da:	461f      	mov	r7, r3
    35dc:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    35de:	d067      	beq.n	36b0 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    35e0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    35e2:	f04f 0320 	mov.w	r3, #32
    35e6:	f3ef 8611 	mrs	r6, BASEPRI
    35ea:	f383 8811 	msr	BASEPRI, r3
    35ee:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    35f2:	f06f 0201 	mvn.w	r2, #1
    35f6:	1b53      	subs	r3, r2, r5
    35f8:	f04f 3cff 	mov.w	ip, #4294967295
    35fc:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    3600:	2b00      	cmp	r3, #0
    3602:	db1b      	blt.n	363c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    3604:	4b2b      	ldr	r3, [pc, #172]	; (36b4 <z_add_timeout+0xe8>)
    3606:	e9d3 1300 	ldrd	r1, r3, [r3]
    360a:	1a52      	subs	r2, r2, r1
    360c:	eb6c 0303 	sbc.w	r3, ip, r3
    3610:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    3612:	eb63 0307 	sbc.w	r3, r3, r7
    3616:	2d01      	cmp	r5, #1
    3618:	f173 0200 	sbcs.w	r2, r3, #0
    361c:	bfbc      	itt	lt
    361e:	2501      	movlt	r5, #1
    3620:	2300      	movlt	r3, #0
    3622:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    3626:	4824      	ldr	r0, [pc, #144]	; (36b8 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    3628:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    362c:	4283      	cmp	r3, r0
    362e:	d118      	bne.n	3662 <z_add_timeout+0x96>
	node->prev = tail;
    3630:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    3634:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    3638:	6044      	str	r4, [r0, #4]
}
    363a:	e026      	b.n	368a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    363c:	f7ff ff7a 	bl	3534 <elapsed>
    3640:	3501      	adds	r5, #1
    3642:	f147 0700 	adc.w	r7, r7, #0
    3646:	182d      	adds	r5, r5, r0
    3648:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    364c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    3650:	e7e9      	b.n	3626 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    3652:	1a52      	subs	r2, r2, r1
    3654:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    3658:	459c      	cmp	ip, r3
    365a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    365e:	d0e7      	beq.n	3630 <z_add_timeout+0x64>
    3660:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    3662:	2b00      	cmp	r3, #0
    3664:	d0e4      	beq.n	3630 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    3666:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    366a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    366e:	428a      	cmp	r2, r1
    3670:	eb75 0e07 	sbcs.w	lr, r5, r7
    3674:	daed      	bge.n	3652 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    3676:	1a8a      	subs	r2, r1, r2
    3678:	eb67 0505 	sbc.w	r5, r7, r5
    367c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    3680:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3682:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3686:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3688:	605c      	str	r4, [r3, #4]
	return list->head == list;
    368a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    368c:	4283      	cmp	r3, r0
    368e:	d00b      	beq.n	36a8 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    3690:	429c      	cmp	r4, r3
    3692:	d109      	bne.n	36a8 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3694:	f7ff ff58 	bl	3548 <next_timeout>

			if (next_time == 0 ||
    3698:	b118      	cbz	r0, 36a2 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    369a:	4b08      	ldr	r3, [pc, #32]	; (36bc <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    369c:	691b      	ldr	r3, [r3, #16]
    369e:	4283      	cmp	r3, r0
    36a0:	d002      	beq.n	36a8 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    36a2:	2100      	movs	r1, #0
    36a4:	f7fd ff4c 	bl	1540 <sys_clock_set_timeout>
	__asm__ volatile(
    36a8:	f386 8811 	msr	BASEPRI, r6
    36ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    36b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36b2:	bf00      	nop
    36b4:	20000128 	.word	0x20000128
    36b8:	20000018 	.word	0x20000018
    36bc:	20000a68 	.word	0x20000a68

000036c0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    36c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36c4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    36c6:	f7ff fd81 	bl	31cc <z_time_slice>
	__asm__ volatile(
    36ca:	f04f 0320 	mov.w	r3, #32
    36ce:	f3ef 8411 	mrs	r4, BASEPRI
    36d2:	f383 8811 	msr	BASEPRI, r3
    36d6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    36da:	4e24      	ldr	r6, [pc, #144]	; (376c <sys_clock_announce+0xac>)
	return list->head == list;
    36dc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3770 <sys_clock_announce+0xb0>
    36e0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    36e2:	4d24      	ldr	r5, [pc, #144]	; (3774 <sys_clock_announce+0xb4>)
    36e4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    36e8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    36ea:	4540      	cmp	r0, r8
		curr_tick += dt;
    36ec:	e9d5 1e00 	ldrd	r1, lr, [r5]
    36f0:	ea4f 77e2 	mov.w	r7, r2, asr #31
    36f4:	d00b      	beq.n	370e <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    36f6:	b150      	cbz	r0, 370e <sys_clock_announce+0x4e>
    36f8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    36fc:	429a      	cmp	r2, r3
    36fe:	eb77 090c 	sbcs.w	r9, r7, ip
    3702:	da16      	bge.n	3732 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3704:	1a9b      	subs	r3, r3, r2
    3706:	eb6c 0c07 	sbc.w	ip, ip, r7
    370a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    370e:	1852      	adds	r2, r2, r1
    3710:	eb4e 0707 	adc.w	r7, lr, r7
    3714:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3718:	2500      	movs	r5, #0
    371a:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    371c:	f7ff ff14 	bl	3548 <next_timeout>
    3720:	4629      	mov	r1, r5
    3722:	f7fd ff0d 	bl	1540 <sys_clock_set_timeout>
	__asm__ volatile(
    3726:	f384 8811 	msr	BASEPRI, r4
    372a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    372e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3732:	1859      	adds	r1, r3, r1
    3734:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3738:	1ad3      	subs	r3, r2, r3
    373a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    373c:	2200      	movs	r2, #0
    373e:	2300      	movs	r3, #0
    3740:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    3744:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    3748:	f7ff ff26 	bl	3598 <remove_timeout>
    374c:	f384 8811 	msr	BASEPRI, r4
    3750:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3754:	6883      	ldr	r3, [r0, #8]
    3756:	4798      	blx	r3
	__asm__ volatile(
    3758:	f04f 0320 	mov.w	r3, #32
    375c:	f3ef 8411 	mrs	r4, BASEPRI
    3760:	f383 8811 	msr	BASEPRI, r3
    3764:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    3768:	e7bc      	b.n	36e4 <sys_clock_announce+0x24>
    376a:	bf00      	nop
    376c:	20000aa4 	.word	0x20000aa4
    3770:	20000018 	.word	0x20000018
    3774:	20000128 	.word	0x20000128

00003778 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    3778:	b510      	push	{r4, lr}
    377a:	f04f 0320 	mov.w	r3, #32
    377e:	f3ef 8411 	mrs	r4, BASEPRI
    3782:	f383 8811 	msr	BASEPRI, r3
    3786:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    378a:	f7fd ff0b 	bl	15a4 <sys_clock_elapsed>
    378e:	4a05      	ldr	r2, [pc, #20]	; (37a4 <sys_clock_tick_get+0x2c>)
    3790:	e9d2 3100 	ldrd	r3, r1, [r2]
    3794:	18c0      	adds	r0, r0, r3
    3796:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    379a:	f384 8811 	msr	BASEPRI, r4
    379e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    37a2:	bd10      	pop	{r4, pc}
    37a4:	20000128 	.word	0x20000128

000037a8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    37a8:	4a02      	ldr	r2, [pc, #8]	; (37b4 <boot_banner+0xc>)
    37aa:	4903      	ldr	r1, [pc, #12]	; (37b8 <boot_banner+0x10>)
    37ac:	4803      	ldr	r0, [pc, #12]	; (37bc <boot_banner+0x14>)
    37ae:	f000 b828 	b.w	3802 <printk>
    37b2:	bf00      	nop
    37b4:	000042b1 	.word	0x000042b1
    37b8:	00004335 	.word	0x00004335
    37bc:	00004342 	.word	0x00004342

000037c0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    37c0:	4770      	bx	lr

000037c2 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    37c2:	4603      	mov	r3, r0
    37c4:	b158      	cbz	r0, 37de <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    37c6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    37c8:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    37cc:	2a01      	cmp	r2, #1
    37ce:	d003      	beq.n	37d8 <sys_notify_validate+0x16>
    37d0:	2a03      	cmp	r2, #3
    37d2:	d104      	bne.n	37de <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    37d4:	6802      	ldr	r2, [r0, #0]
    37d6:	b112      	cbz	r2, 37de <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    37d8:	2000      	movs	r0, #0
    37da:	6098      	str	r0, [r3, #8]
    37dc:	4770      	bx	lr
		return -EINVAL;
    37de:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    37e2:	4770      	bx	lr

000037e4 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    37e4:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    37e6:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    37e8:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    37ec:	2a03      	cmp	r2, #3
    37ee:	f04f 0200 	mov.w	r2, #0
{
    37f2:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    37f4:	bf0c      	ite	eq
    37f6:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    37f8:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    37fa:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    37fc:	4770      	bx	lr

000037fe <arch_printk_char_out>:
}
    37fe:	2000      	movs	r0, #0
    3800:	4770      	bx	lr

00003802 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    3802:	b40f      	push	{r0, r1, r2, r3}
    3804:	b507      	push	{r0, r1, r2, lr}
    3806:	a904      	add	r1, sp, #16
    3808:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    380c:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    380e:	f7fc feff 	bl	610 <vprintk>
	}
	va_end(ap);
}
    3812:	b003      	add	sp, #12
    3814:	f85d eb04 	ldr.w	lr, [sp], #4
    3818:	b004      	add	sp, #16
    381a:	4770      	bx	lr

0000381c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    381c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    381e:	f013 0307 	ands.w	r3, r3, #7
    3822:	d105      	bne.n	3830 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    3824:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3826:	2b00      	cmp	r3, #0
    3828:	bf0c      	ite	eq
    382a:	2000      	moveq	r0, #0
    382c:	2003      	movne	r0, #3
    382e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    3830:	2b02      	cmp	r3, #2
    3832:	d105      	bne.n	3840 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    3834:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    3836:	2b00      	cmp	r3, #0
    3838:	bf14      	ite	ne
    383a:	2000      	movne	r0, #0
    383c:	2004      	moveq	r0, #4
    383e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3840:	2b01      	cmp	r3, #1
    3842:	d105      	bne.n	3850 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3844:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3846:	2b00      	cmp	r3, #0
    3848:	bf0c      	ite	eq
    384a:	2000      	moveq	r0, #0
    384c:	2005      	movne	r0, #5
    384e:	4770      	bx	lr
	int evt = EVT_NOP;
    3850:	2000      	movs	r0, #0
}
    3852:	4770      	bx	lr

00003854 <notify_one>:
{
    3854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3858:	460d      	mov	r5, r1
    385a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    385c:	4619      	mov	r1, r3
    385e:	1d28      	adds	r0, r5, #4
{
    3860:	4690      	mov	r8, r2
    3862:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3864:	f7ff ffbe 	bl	37e4 <sys_notify_finalize>
	if (cb) {
    3868:	4604      	mov	r4, r0
    386a:	b138      	cbz	r0, 387c <notify_one+0x28>
		cb(mgr, cli, state, res);
    386c:	4633      	mov	r3, r6
    386e:	4642      	mov	r2, r8
    3870:	4629      	mov	r1, r5
    3872:	4638      	mov	r0, r7
    3874:	46a4      	mov	ip, r4
}
    3876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    387a:	4760      	bx	ip
}
    387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003880 <transition_complete>:
{
    3880:	b410      	push	{r4}
	__asm__ volatile(
    3882:	f04f 0420 	mov.w	r4, #32
    3886:	f3ef 8211 	mrs	r2, BASEPRI
    388a:	f384 8811 	msr	BASEPRI, r4
    388e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3892:	6141      	str	r1, [r0, #20]
}
    3894:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3896:	2101      	movs	r1, #1
    3898:	f7fc bec8 	b.w	62c <process_event>

0000389c <validate_args>:
{
    389c:	b510      	push	{r4, lr}
    389e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    38a0:	b140      	cbz	r0, 38b4 <validate_args+0x18>
    38a2:	b139      	cbz	r1, 38b4 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    38a4:	1d08      	adds	r0, r1, #4
    38a6:	f7ff ff8c 	bl	37c2 <sys_notify_validate>
	if ((rv == 0)
    38aa:	b928      	cbnz	r0, 38b8 <validate_args+0x1c>
	    && ((cli->notify.flags
    38ac:	68a3      	ldr	r3, [r4, #8]
    38ae:	f033 0303 	bics.w	r3, r3, #3
    38b2:	d001      	beq.n	38b8 <validate_args+0x1c>
		rv = -EINVAL;
    38b4:	f06f 0015 	mvn.w	r0, #21
}
    38b8:	bd10      	pop	{r4, pc}

000038ba <onoff_manager_init>:
{
    38ba:	b538      	push	{r3, r4, r5, lr}
    38bc:	460c      	mov	r4, r1
	if ((mgr == NULL)
    38be:	4605      	mov	r5, r0
    38c0:	b158      	cbz	r0, 38da <onoff_manager_init+0x20>
	    || (transitions == NULL)
    38c2:	b151      	cbz	r1, 38da <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    38c4:	680b      	ldr	r3, [r1, #0]
    38c6:	b143      	cbz	r3, 38da <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    38c8:	684b      	ldr	r3, [r1, #4]
    38ca:	b133      	cbz	r3, 38da <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    38cc:	221c      	movs	r2, #28
    38ce:	2100      	movs	r1, #0
    38d0:	f000 f984 	bl	3bdc <memset>
    38d4:	612c      	str	r4, [r5, #16]
	return 0;
    38d6:	2000      	movs	r0, #0
}
    38d8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    38da:	f06f 0015 	mvn.w	r0, #21
    38de:	e7fb      	b.n	38d8 <onoff_manager_init+0x1e>

000038e0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    38e0:	b570      	push	{r4, r5, r6, lr}
    38e2:	4604      	mov	r4, r0
    38e4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    38e6:	f7ff ffd9 	bl	389c <validate_args>

	if (rv < 0) {
    38ea:	1e05      	subs	r5, r0, #0
    38ec:	db31      	blt.n	3952 <onoff_request+0x72>
    38ee:	f04f 0320 	mov.w	r3, #32
    38f2:	f3ef 8111 	mrs	r1, BASEPRI
    38f6:	f383 8811 	msr	BASEPRI, r3
    38fa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    38fe:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3900:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3902:	f64f 75ff 	movw	r5, #65535	; 0xffff
    3906:	42ab      	cmp	r3, r5
    3908:	f000 0207 	and.w	r2, r0, #7
    390c:	d02e      	beq.n	396c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    390e:	2a02      	cmp	r2, #2
    3910:	d10e      	bne.n	3930 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    3912:	3301      	adds	r3, #1
    3914:	8363      	strh	r3, [r4, #26]
	rv = state;
    3916:	4615      	mov	r5, r2
		notify = true;
    3918:	2301      	movs	r3, #1
	__asm__ volatile(
    391a:	f381 8811 	msr	BASEPRI, r1
    391e:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    3922:	b1b3      	cbz	r3, 3952 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    3924:	2300      	movs	r3, #0
    3926:	4631      	mov	r1, r6
    3928:	4620      	mov	r0, r4
    392a:	f7ff ff93 	bl	3854 <notify_one>
    392e:	e010      	b.n	3952 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    3930:	0783      	lsls	r3, r0, #30
    3932:	d001      	beq.n	3938 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    3934:	2a06      	cmp	r2, #6
    3936:	d10e      	bne.n	3956 <onoff_request+0x76>
	parent->next = child;
    3938:	2300      	movs	r3, #0
    393a:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    393c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    393e:	b993      	cbnz	r3, 3966 <onoff_request+0x86>
	list->head = node;
    3940:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3944:	4615      	mov	r5, r2
    3946:	b962      	cbnz	r2, 3962 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3948:	460a      	mov	r2, r1
    394a:	4620      	mov	r0, r4
    394c:	2102      	movs	r1, #2
    394e:	f7fc fe6d 	bl	62c <process_event>
		}
	}

	return rv;
}
    3952:	4628      	mov	r0, r5
    3954:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3956:	2a05      	cmp	r2, #5
    3958:	bf0c      	ite	eq
    395a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    395e:	f06f 0504 	mvnne.w	r5, #4
    3962:	2300      	movs	r3, #0
    3964:	e7d9      	b.n	391a <onoff_request+0x3a>
	parent->next = child;
    3966:	601e      	str	r6, [r3, #0]
	list->tail = node;
    3968:	6066      	str	r6, [r4, #4]
}
    396a:	e7eb      	b.n	3944 <onoff_request+0x64>
		rv = -EAGAIN;
    396c:	f06f 050a 	mvn.w	r5, #10
    3970:	e7f7      	b.n	3962 <onoff_request+0x82>

00003972 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3972:	4604      	mov	r4, r0
    3974:	b508      	push	{r3, lr}
    3976:	4608      	mov	r0, r1
    3978:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    397a:	461a      	mov	r2, r3
    397c:	47a0      	blx	r4
	return z_impl_k_current_get();
    397e:	f7ff fd67 	bl	3450 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3982:	f7fe f899 	bl	1ab8 <z_impl_k_thread_abort>

00003986 <encode_uint>:
{
    3986:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    398a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    398c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    398e:	2b6f      	cmp	r3, #111	; 0x6f
{
    3990:	4680      	mov	r8, r0
    3992:	460f      	mov	r7, r1
    3994:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    3996:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    399a:	d029      	beq.n	39f0 <encode_uint+0x6a>
    399c:	d824      	bhi.n	39e8 <encode_uint+0x62>
		return 16;
    399e:	2b58      	cmp	r3, #88	; 0x58
    39a0:	bf14      	ite	ne
    39a2:	260a      	movne	r6, #10
    39a4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    39a6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    39aa:	4632      	mov	r2, r6
    39ac:	2300      	movs	r3, #0
    39ae:	4640      	mov	r0, r8
    39b0:	4639      	mov	r1, r7
    39b2:	f7fc fb93 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39b6:	2a09      	cmp	r2, #9
    39b8:	b2d4      	uxtb	r4, r2
    39ba:	d81e      	bhi.n	39fa <encode_uint+0x74>
    39bc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    39be:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39c0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    39c2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39c6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    39ca:	d301      	bcc.n	39d0 <encode_uint+0x4a>
    39cc:	45d1      	cmp	r9, sl
    39ce:	d811      	bhi.n	39f4 <encode_uint+0x6e>
	if (conv->flag_hash) {
    39d0:	782b      	ldrb	r3, [r5, #0]
    39d2:	069b      	lsls	r3, r3, #26
    39d4:	d505      	bpl.n	39e2 <encode_uint+0x5c>
		if (radix == 8) {
    39d6:	2e08      	cmp	r6, #8
    39d8:	d115      	bne.n	3a06 <encode_uint+0x80>
			conv->altform_0 = true;
    39da:	78ab      	ldrb	r3, [r5, #2]
    39dc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    39e0:	70ab      	strb	r3, [r5, #2]
}
    39e2:	4648      	mov	r0, r9
    39e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    39e8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    39ec:	2b70      	cmp	r3, #112	; 0x70
    39ee:	e7d7      	b.n	39a0 <encode_uint+0x1a>
	switch (specifier) {
    39f0:	2608      	movs	r6, #8
    39f2:	e7d8      	b.n	39a6 <encode_uint+0x20>
		value /= radix;
    39f4:	4680      	mov	r8, r0
    39f6:	460f      	mov	r7, r1
    39f8:	e7d7      	b.n	39aa <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    39fa:	f1bb 0f19 	cmp.w	fp, #25
    39fe:	bf94      	ite	ls
    3a00:	3437      	addls	r4, #55	; 0x37
    3a02:	3457      	addhi	r4, #87	; 0x57
    3a04:	e7db      	b.n	39be <encode_uint+0x38>
		} else if (radix == 16) {
    3a06:	2e10      	cmp	r6, #16
    3a08:	d1eb      	bne.n	39e2 <encode_uint+0x5c>
			conv->altform_0c = true;
    3a0a:	78ab      	ldrb	r3, [r5, #2]
    3a0c:	f043 0310 	orr.w	r3, r3, #16
    3a10:	e7e6      	b.n	39e0 <encode_uint+0x5a>

00003a12 <outs>:
{
    3a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a16:	4607      	mov	r7, r0
    3a18:	4688      	mov	r8, r1
    3a1a:	4615      	mov	r5, r2
    3a1c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3a1e:	4614      	mov	r4, r2
    3a20:	42b4      	cmp	r4, r6
    3a22:	eba4 0005 	sub.w	r0, r4, r5
    3a26:	d302      	bcc.n	3a2e <outs+0x1c>
    3a28:	b93e      	cbnz	r6, 3a3a <outs+0x28>
    3a2a:	7823      	ldrb	r3, [r4, #0]
    3a2c:	b12b      	cbz	r3, 3a3a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    3a2e:	f814 0b01 	ldrb.w	r0, [r4], #1
    3a32:	4641      	mov	r1, r8
    3a34:	47b8      	blx	r7
		if (rc < 0) {
    3a36:	2800      	cmp	r0, #0
    3a38:	daf2      	bge.n	3a20 <outs+0xe>
}
    3a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003a3e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3a3e:	4770      	bx	lr

00003a40 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    3a40:	2200      	movs	r2, #0
    3a42:	e9c0 2200 	strd	r2, r2, [r0]
    3a46:	6082      	str	r2, [r0, #8]
}
    3a48:	4770      	bx	lr

00003a4a <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    3a4a:	6903      	ldr	r3, [r0, #16]
    3a4c:	b2c9      	uxtb	r1, r1
    3a4e:	220c      	movs	r2, #12
    3a50:	fb01 3302 	mla	r3, r1, r2, r3
    3a54:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    3a56:	f000 0007 	and.w	r0, r0, #7
    3a5a:	4770      	bx	lr

00003a5c <set_on_state>:
	__asm__ volatile(
    3a5c:	f04f 0320 	mov.w	r3, #32
    3a60:	f3ef 8211 	mrs	r2, BASEPRI
    3a64:	f383 8811 	msr	BASEPRI, r3
    3a68:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3a6c:	6803      	ldr	r3, [r0, #0]
    3a6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    3a72:	f043 0302 	orr.w	r3, r3, #2
    3a76:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3a78:	f382 8811 	msr	BASEPRI, r2
    3a7c:	f3bf 8f6f 	isb	sy
}
    3a80:	4770      	bx	lr

00003a82 <stop>:
{
    3a82:	4603      	mov	r3, r0
    3a84:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    3a86:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    3a88:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3a8a:	f04f 0420 	mov.w	r4, #32
    3a8e:	f3ef 8611 	mrs	r6, BASEPRI
    3a92:	f384 8811 	msr	BASEPRI, r4
    3a96:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3a9a:	250c      	movs	r5, #12
    3a9c:	fb05 0401 	mla	r4, r5, r1, r0
    3aa0:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3aa2:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    3aa6:	d001      	beq.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3aa8:	42a2      	cmp	r2, r4
    3aaa:	d110      	bne.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3aac:	fb05 0001 	mla	r0, r5, r1, r0
    3ab0:	2201      	movs	r2, #1
    3ab2:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    3ab4:	2000      	movs	r0, #0
	__asm__ volatile(
    3ab6:	f386 8811 	msr	BASEPRI, r6
    3aba:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3abe:	b928      	cbnz	r0, 3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>
	get_sub_config(dev, type)->stop();
    3ac0:	685b      	ldr	r3, [r3, #4]
    3ac2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3ac6:	684b      	ldr	r3, [r1, #4]
    3ac8:	4798      	blx	r3
	return 0;
    3aca:	2000      	movs	r0, #0
}
    3acc:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    3ace:	f04f 30ff 	mov.w	r0, #4294967295
    3ad2:	e7f0      	b.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>

00003ad4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    3ad4:	2280      	movs	r2, #128	; 0x80
    3ad6:	f7ff bfd4 	b.w	3a82 <stop>

00003ada <async_start>:
{
    3ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3adc:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    3ade:	6904      	ldr	r4, [r0, #16]
{
    3ae0:	4605      	mov	r5, r0
    3ae2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3ae4:	f04f 0020 	mov.w	r0, #32
    3ae8:	f3ef 8c11 	mrs	ip, BASEPRI
    3aec:	f380 8811 	msr	BASEPRI, r0
    3af0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3af4:	260c      	movs	r6, #12
    3af6:	fb06 4601 	mla	r6, r6, r1, r4
    3afa:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    3afc:	f000 0e07 	and.w	lr, r0, #7
    3b00:	f1be 0f01 	cmp.w	lr, #1
    3b04:	d111      	bne.n	3b2a <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3b06:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    3b08:	2600      	movs	r6, #0
	__asm__ volatile(
    3b0a:	f38c 8811 	msr	BASEPRI, ip
    3b0e:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3b12:	b946      	cbnz	r6, 3b26 <async_start+0x4c>
	subdata->cb = cb;
    3b14:	200c      	movs	r0, #12
    3b16:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    3b1a:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    3b1e:	686b      	ldr	r3, [r5, #4]
    3b20:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    3b24:	4798      	blx	r3
}
    3b26:	4630      	mov	r0, r6
    3b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    3b2a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    3b2e:	4287      	cmp	r7, r0
    3b30:	bf14      	ite	ne
    3b32:	f04f 36ff 	movne.w	r6, #4294967295
    3b36:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    3b3a:	e7e6      	b.n	3b0a <async_start+0x30>

00003b3c <api_start>:
{
    3b3c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    3b3e:	2480      	movs	r4, #128	; 0x80
    3b40:	9400      	str	r4, [sp, #0]
    3b42:	f7ff ffca 	bl	3ada <async_start>
}
    3b46:	b002      	add	sp, #8
    3b48:	bd10      	pop	{r4, pc}

00003b4a <onoff_started_callback>:
	return &data->mgr[type];
    3b4a:	6900      	ldr	r0, [r0, #16]
{
    3b4c:	b410      	push	{r4}
	return &data->mgr[type];
    3b4e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    3b50:	241c      	movs	r4, #28
    3b52:	fb03 0004 	mla	r0, r3, r4, r0
    3b56:	2100      	movs	r1, #0
}
    3b58:	bc10      	pop	{r4}
	notify(mgr, 0);
    3b5a:	4710      	bx	r2

00003b5c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    3b5c:	2000      	movs	r0, #0
    3b5e:	f7fe bd59 	b.w	2614 <nrfx_clock_stop>

00003b62 <blocking_start_callback>:
{
    3b62:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3b64:	f7ff b984 	b.w	2e70 <z_impl_k_sem_give>

00003b68 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3b68:	4770      	bx	lr

00003b6a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    3b6a:	4770      	bx	lr

00003b6c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    3b6c:	2100      	movs	r1, #0
    3b6e:	2001      	movs	r0, #1
    3b70:	f000 b800 	b.w	3b74 <z_arm_fatal_error>

00003b74 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3b74:	f000 b8ed 	b.w	3d52 <z_fatal_error>

00003b78 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3b78:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3b7a:	6800      	ldr	r0, [r0, #0]
    3b7c:	f000 b8e9 	b.w	3d52 <z_fatal_error>

00003b80 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3b80:	b508      	push	{r3, lr}
	handler();
    3b82:	f7fd fdfb 	bl	177c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    3b86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3b8a:	f7fd bf37 	b.w	19fc <z_arm_exc_exit>

00003b8e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    3b8e:	4603      	mov	r3, r0
	size_t n = 0;
    3b90:	2000      	movs	r0, #0

	while (*s != '\0') {
    3b92:	5c1a      	ldrb	r2, [r3, r0]
    3b94:	b902      	cbnz	r2, 3b98 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    3b96:	4770      	bx	lr
		n++;
    3b98:	3001      	adds	r0, #1
    3b9a:	e7fa      	b.n	3b92 <strlen+0x4>

00003b9c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    3b9c:	4603      	mov	r3, r0
	size_t n = 0;
    3b9e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    3ba0:	5c1a      	ldrb	r2, [r3, r0]
    3ba2:	b10a      	cbz	r2, 3ba8 <strnlen+0xc>
    3ba4:	4288      	cmp	r0, r1
    3ba6:	d100      	bne.n	3baa <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    3ba8:	4770      	bx	lr
		n++;
    3baa:	3001      	adds	r0, #1
    3bac:	e7f8      	b.n	3ba0 <strnlen+0x4>

00003bae <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3bae:	1e43      	subs	r3, r0, #1
    3bb0:	3901      	subs	r1, #1
    3bb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3bb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3bba:	4282      	cmp	r2, r0
    3bbc:	d101      	bne.n	3bc2 <strcmp+0x14>
    3bbe:	2a00      	cmp	r2, #0
    3bc0:	d1f7      	bne.n	3bb2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3bc2:	1a10      	subs	r0, r2, r0
    3bc4:	4770      	bx	lr

00003bc6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3bc6:	b510      	push	{r4, lr}
    3bc8:	1e43      	subs	r3, r0, #1
    3bca:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    3bcc:	4291      	cmp	r1, r2
    3bce:	d100      	bne.n	3bd2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3bd0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    3bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    3bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3bda:	e7f7      	b.n	3bcc <memcpy+0x6>

00003bdc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    3bdc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    3bde:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    3be0:	4603      	mov	r3, r0
	while (n > 0) {
    3be2:	4293      	cmp	r3, r2
    3be4:	d100      	bne.n	3be8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3be6:	4770      	bx	lr
		*(d_byte++) = c_byte;
    3be8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3bec:	e7f9      	b.n	3be2 <memset+0x6>

00003bee <_stdout_hook_default>:
}
    3bee:	f04f 30ff 	mov.w	r0, #4294967295
    3bf2:	4770      	bx	lr

00003bf4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    3bf4:	b084      	sub	sp, #16
    3bf6:	ab04      	add	r3, sp, #16
    3bf8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    3bfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    3c00:	2b06      	cmp	r3, #6
    3c02:	d108      	bne.n	3c16 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    3c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3c08:	2201      	movs	r2, #1
    3c0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    3c0e:	f3bf 8f4f 	dsb	sy
        __WFE();
    3c12:	bf20      	wfe
    while (true)
    3c14:	e7fd      	b.n	3c12 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    3c16:	b004      	add	sp, #16
    3c18:	4770      	bx	lr

00003c1a <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    3c1a:	b084      	sub	sp, #16
    3c1c:	ab04      	add	r3, sp, #16
    3c1e:	e903 0007 	stmdb	r3, {r0, r1, r2}
    3c22:	2300      	movs	r3, #0
    3c24:	f383 8811 	msr	BASEPRI, r3
    3c28:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    3c2c:	b004      	add	sp, #16
    3c2e:	4770      	bx	lr

00003c30 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    3c30:	f000 001f 	and.w	r0, r0, #31
    3c34:	0080      	lsls	r0, r0, #2
    3c36:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3c3a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    3c3e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3c42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3c46:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    3c4a:	4770      	bx	lr

00003c4c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c4c:	6843      	ldr	r3, [r0, #4]
    3c4e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    3c50:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    3c54:	600b      	str	r3, [r1, #0]
}
    3c56:	2000      	movs	r0, #0
    3c58:	4770      	bx	lr

00003c5a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c5a:	6843      	ldr	r3, [r0, #4]
    3c5c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    3c5e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    3c62:	4042      	eors	r2, r0
    3c64:	400a      	ands	r2, r1
    3c66:	4042      	eors	r2, r0
    p_reg->OUT = value;
    3c68:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    3c6c:	2000      	movs	r0, #0
    3c6e:	4770      	bx	lr

00003c70 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c70:	6843      	ldr	r3, [r0, #4]
    3c72:	685b      	ldr	r3, [r3, #4]
}
    3c74:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    3c76:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    3c7a:	4770      	bx	lr

00003c7c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c7c:	6843      	ldr	r3, [r0, #4]
    3c7e:	685b      	ldr	r3, [r3, #4]
}
    3c80:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    3c82:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    3c86:	4770      	bx	lr

00003c88 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3c88:	6843      	ldr	r3, [r0, #4]
    3c8a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3c8c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    3c90:	404b      	eors	r3, r1
    p_reg->OUT = value;
    3c92:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    3c96:	2000      	movs	r0, #0
    3c98:	4770      	bx	lr

00003c9a <gpio_nrfx_manage_callback>:
	return port->data;
    3c9a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    3c9c:	6858      	ldr	r0, [r3, #4]
{
    3c9e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    3ca0:	b158      	cbz	r0, 3cba <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3ca2:	2400      	movs	r4, #0
    3ca4:	4281      	cmp	r1, r0
    3ca6:	d112      	bne.n	3cce <gpio_nrfx_manage_callback+0x34>
	return node->next;
    3ca8:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    3caa:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    3cac:	b954      	cbnz	r4, 3cc4 <gpio_nrfx_manage_callback+0x2a>
    3cae:	428d      	cmp	r5, r1
	list->head = node;
    3cb0:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3cb2:	d100      	bne.n	3cb6 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3cb4:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3cb6:	2000      	movs	r0, #0
    3cb8:	6008      	str	r0, [r1, #0]
	if (set) {
    3cba:	b96a      	cbnz	r2, 3cd8 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    3cbc:	2000      	movs	r0, #0
}
    3cbe:	bd30      	pop	{r4, r5, pc}
    3cc0:	4628      	mov	r0, r5
    3cc2:	e7ef      	b.n	3ca4 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    3cc4:	428d      	cmp	r5, r1
	parent->next = child;
    3cc6:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3cc8:	bf08      	it	eq
    3cca:	609c      	streq	r4, [r3, #8]
}
    3ccc:	e7f3      	b.n	3cb6 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    3cce:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3cd0:	4604      	mov	r4, r0
    3cd2:	2d00      	cmp	r5, #0
    3cd4:	d1f4      	bne.n	3cc0 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    3cd6:	b13a      	cbz	r2, 3ce8 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    3cd8:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    3cda:	685a      	ldr	r2, [r3, #4]
    3cdc:	600a      	str	r2, [r1, #0]
	list->head = node;
    3cde:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    3ce0:	2800      	cmp	r0, #0
    3ce2:	d1eb      	bne.n	3cbc <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3ce4:	6099      	str	r1, [r3, #8]
}
    3ce6:	e7ea      	b.n	3cbe <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    3ce8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3cec:	e7e7      	b.n	3cbe <gpio_nrfx_manage_callback+0x24>

00003cee <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    3cee:	6902      	ldr	r2, [r0, #16]
{
    3cf0:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3cf2:	e892 0003 	ldmia.w	r2, {r0, r1}
    3cf6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3cfa:	2000      	movs	r0, #0
    3cfc:	4770      	bx	lr

00003cfe <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3cfe:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    3d00:	2000      	movs	r0, #0
    3d02:	f7fd ffa7 	bl	1c54 <sys_arch_reboot>

00003d06 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    3d0a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    3d0e:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3d10:	bf04      	itt	eq
    3d12:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    3d16:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    3d1a:	1f83      	subs	r3, r0, #6
    3d1c:	4258      	negs	r0, r3
    3d1e:	4158      	adcs	r0, r3
    3d20:	4770      	bx	lr

00003d22 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    3d22:	4700      	bx	r0

00003d24 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    3d24:	f000 b923 	b.w	3f6e <z_impl_k_busy_wait>

00003d28 <nrfx_clock_enable>:
{
    3d28:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3d2a:	2000      	movs	r0, #0
    3d2c:	f7fd fca6 	bl	167c <arch_irq_is_enabled>
    3d30:	b918      	cbnz	r0, 3d3a <nrfx_clock_enable+0x12>
}
    3d32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3d36:	f7fd bc91 	b.w	165c <arch_irq_enable>
    3d3a:	bd08      	pop	{r3, pc}

00003d3c <z_device_state_init>:
}
    3d3c:	4770      	bx	lr

00003d3e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    3d3e:	b138      	cbz	r0, 3d50 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    3d40:	68c3      	ldr	r3, [r0, #12]
    3d42:	8818      	ldrh	r0, [r3, #0]
    3d44:	f3c0 0008 	ubfx	r0, r0, #0, #9
    3d48:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    3d4c:	4258      	negs	r0, r3
    3d4e:	4158      	adcs	r0, r3
}
    3d50:	4770      	bx	lr

00003d52 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d54:	4605      	mov	r5, r0
    3d56:	460e      	mov	r6, r1
	__asm__ volatile(
    3d58:	f04f 0320 	mov.w	r3, #32
    3d5c:	f3ef 8711 	mrs	r7, BASEPRI
    3d60:	f383 8811 	msr	BASEPRI, r3
    3d64:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3d68:	f7ff fb72 	bl	3450 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3d6c:	4631      	mov	r1, r6
    3d6e:	4604      	mov	r4, r0
    3d70:	4628      	mov	r0, r5
    3d72:	f7ff ffc4 	bl	3cfe <k_sys_fatal_error_handler>
	__asm__ volatile(
    3d76:	f387 8811 	msr	BASEPRI, r7
    3d7a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3d7e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3d80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3d84:	f7fd be98 	b.w	1ab8 <z_impl_k_thread_abort>

00003d88 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3d88:	f3ef 8005 	mrs	r0, IPSR
}
    3d8c:	3800      	subs	r0, #0
    3d8e:	bf18      	it	ne
    3d90:	2001      	movne	r0, #1
    3d92:	4770      	bx	lr

00003d94 <z_pm_save_idle_exit>:
{
    3d94:	b508      	push	{r3, lr}
	pm_system_resume();
    3d96:	f7fd f90d 	bl	fb4 <pm_system_resume>
}
    3d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    3d9e:	f7ff bee4 	b.w	3b6a <sys_clock_idle_exit>

00003da2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    3da2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    3da6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3da8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3daa:	2300      	movs	r3, #0
	node->prev = NULL;
    3dac:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    3db0:	4770      	bx	lr

00003db2 <unpend_thread_no_timeout>:
{
    3db2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    3db4:	f7ff fff5 	bl	3da2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3db8:	7b43      	ldrb	r3, [r0, #13]
    3dba:	f023 0302 	bic.w	r3, r3, #2
    3dbe:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    3dc0:	2300      	movs	r3, #0
    3dc2:	6083      	str	r3, [r0, #8]
}
    3dc4:	bd08      	pop	{r3, pc}

00003dc6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3dc6:	4603      	mov	r3, r0
    3dc8:	b920      	cbnz	r0, 3dd4 <z_reschedule_irqlock+0xe>
    3dca:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    3dce:	b90a      	cbnz	r2, 3dd4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    3dd0:	f7fd bbf6 	b.w	15c0 <arch_swap>
    3dd4:	f383 8811 	msr	BASEPRI, r3
    3dd8:	f3bf 8f6f 	isb	sy
}
    3ddc:	4770      	bx	lr

00003dde <z_reschedule_unlocked>:
	__asm__ volatile(
    3dde:	f04f 0320 	mov.w	r3, #32
    3de2:	f3ef 8011 	mrs	r0, BASEPRI
    3de6:	f383 8811 	msr	BASEPRI, r3
    3dea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3dee:	f7ff bfea 	b.w	3dc6 <z_reschedule_irqlock>

00003df2 <z_priq_dumb_best>:
{
    3df2:	4603      	mov	r3, r0
	return list->head == list;
    3df4:	6800      	ldr	r0, [r0, #0]
}
    3df6:	4283      	cmp	r3, r0
    3df8:	bf08      	it	eq
    3dfa:	2000      	moveq	r0, #0
    3dfc:	4770      	bx	lr

00003dfe <add_to_waitq_locked>:
{
    3dfe:	b538      	push	{r3, r4, r5, lr}
    3e00:	4604      	mov	r4, r0
    3e02:	460d      	mov	r5, r1
	unready_thread(thread);
    3e04:	f7ff f908 	bl	3018 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    3e08:	7b63      	ldrb	r3, [r4, #13]
    3e0a:	f043 0302 	orr.w	r3, r3, #2
    3e0e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3e10:	b195      	cbz	r5, 3e38 <add_to_waitq_locked+0x3a>
    3e12:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3e14:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e16:	429d      	cmp	r5, r3
    3e18:	d015      	beq.n	3e46 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e1a:	b1a3      	cbz	r3, 3e46 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    3e1c:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3e20:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    3e24:	4291      	cmp	r1, r2
    3e26:	d008      	beq.n	3e3a <add_to_waitq_locked+0x3c>
		return b2 - b1;
    3e28:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    3e2a:	2a00      	cmp	r2, #0
    3e2c:	dd05      	ble.n	3e3a <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    3e2e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3e30:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3e34:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3e36:	605c      	str	r4, [r3, #4]
}
    3e38:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    3e3a:	686a      	ldr	r2, [r5, #4]
    3e3c:	4293      	cmp	r3, r2
    3e3e:	d002      	beq.n	3e46 <add_to_waitq_locked+0x48>
    3e40:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e42:	2b00      	cmp	r3, #0
    3e44:	d1ec      	bne.n	3e20 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    3e46:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    3e48:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    3e4c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3e4e:	606c      	str	r4, [r5, #4]
}
    3e50:	e7f2      	b.n	3e38 <add_to_waitq_locked+0x3a>

00003e52 <z_ready_thread>:
{
    3e52:	b510      	push	{r4, lr}
    3e54:	f04f 0320 	mov.w	r3, #32
    3e58:	f3ef 8411 	mrs	r4, BASEPRI
    3e5c:	f383 8811 	msr	BASEPRI, r3
    3e60:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    3e64:	f7ff f9f2 	bl	324c <ready_thread>
	__asm__ volatile(
    3e68:	f384 8811 	msr	BASEPRI, r4
    3e6c:	f3bf 8f6f 	isb	sy
}
    3e70:	bd10      	pop	{r4, pc}

00003e72 <z_thread_timeout>:
{
    3e72:	b510      	push	{r4, lr}
    3e74:	4601      	mov	r1, r0
	__asm__ volatile(
    3e76:	f04f 0320 	mov.w	r3, #32
    3e7a:	f3ef 8411 	mrs	r4, BASEPRI
    3e7e:	f383 8811 	msr	BASEPRI, r3
    3e82:	f3bf 8f6f 	isb	sy
		if (!killed) {
    3e86:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    3e8a:	f013 0f28 	tst.w	r3, #40	; 0x28
    3e8e:	d10d      	bne.n	3eac <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    3e90:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    3e94:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    3e96:	b10b      	cbz	r3, 3e9c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    3e98:	f7ff ff8b 	bl	3db2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3e9c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    3ea0:	f023 0314 	bic.w	r3, r3, #20
    3ea4:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    3ea8:	f7ff f9d0 	bl	324c <ready_thread>
	__asm__ volatile(
    3eac:	f384 8811 	msr	BASEPRI, r4
    3eb0:	f3bf 8f6f 	isb	sy
}
    3eb4:	bd10      	pop	{r4, pc}

00003eb6 <z_unpend_first_thread>:
{
    3eb6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3eb8:	f04f 0320 	mov.w	r3, #32
    3ebc:	f3ef 8511 	mrs	r5, BASEPRI
    3ec0:	f383 8811 	msr	BASEPRI, r3
    3ec4:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    3ec8:	f7ff ff93 	bl	3df2 <z_priq_dumb_best>
		if (thread != NULL) {
    3ecc:	4604      	mov	r4, r0
    3ece:	b120      	cbz	r0, 3eda <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    3ed0:	f7ff ff6f 	bl	3db2 <unpend_thread_no_timeout>
    3ed4:	3018      	adds	r0, #24
    3ed6:	f000 f806 	bl	3ee6 <z_abort_timeout>
	__asm__ volatile(
    3eda:	f385 8811 	msr	BASEPRI, r5
    3ede:	f3bf 8f6f 	isb	sy
}
    3ee2:	4620      	mov	r0, r4
    3ee4:	bd38      	pop	{r3, r4, r5, pc}

00003ee6 <z_abort_timeout>:
{
    3ee6:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ee8:	f04f 0220 	mov.w	r2, #32
    3eec:	f3ef 8411 	mrs	r4, BASEPRI
    3ef0:	f382 8811 	msr	BASEPRI, r2
    3ef4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3ef8:	6803      	ldr	r3, [r0, #0]
    3efa:	b13b      	cbz	r3, 3f0c <z_abort_timeout+0x26>
			remove_timeout(to);
    3efc:	f7ff fb4c 	bl	3598 <remove_timeout>
			ret = 0;
    3f00:	2000      	movs	r0, #0
	__asm__ volatile(
    3f02:	f384 8811 	msr	BASEPRI, r4
    3f06:	f3bf 8f6f 	isb	sy
}
    3f0a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3f0c:	f06f 0015 	mvn.w	r0, #21
    3f10:	e7f7      	b.n	3f02 <z_abort_timeout+0x1c>

00003f12 <z_get_next_timeout_expiry>:
{
    3f12:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f14:	f04f 0320 	mov.w	r3, #32
    3f18:	f3ef 8411 	mrs	r4, BASEPRI
    3f1c:	f383 8811 	msr	BASEPRI, r3
    3f20:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3f24:	f7ff fb10 	bl	3548 <next_timeout>
	__asm__ volatile(
    3f28:	f384 8811 	msr	BASEPRI, r4
    3f2c:	f3bf 8f6f 	isb	sy
}
    3f30:	bd10      	pop	{r4, pc}

00003f32 <z_set_timeout_expiry>:
{
    3f32:	b570      	push	{r4, r5, r6, lr}
    3f34:	4604      	mov	r4, r0
    3f36:	460d      	mov	r5, r1
	__asm__ volatile(
    3f38:	f04f 0320 	mov.w	r3, #32
    3f3c:	f3ef 8611 	mrs	r6, BASEPRI
    3f40:	f383 8811 	msr	BASEPRI, r3
    3f44:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    3f48:	f7ff fafe 	bl	3548 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3f4c:	2801      	cmp	r0, #1
    3f4e:	dd05      	ble.n	3f5c <z_set_timeout_expiry+0x2a>
    3f50:	42a0      	cmp	r0, r4
    3f52:	db03      	blt.n	3f5c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    3f54:	4629      	mov	r1, r5
    3f56:	4620      	mov	r0, r4
    3f58:	f7fd faf2 	bl	1540 <sys_clock_set_timeout>
	__asm__ volatile(
    3f5c:	f386 8811 	msr	BASEPRI, r6
    3f60:	f3bf 8f6f 	isb	sy
}
    3f64:	bd70      	pop	{r4, r5, r6, pc}

00003f66 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    3f66:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    3f68:	f7ff fc06 	bl	3778 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    3f6c:	bd08      	pop	{r3, pc}

00003f6e <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    3f6e:	b108      	cbz	r0, 3f74 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    3f70:	f7fd be86 	b.w	1c80 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    3f74:	4770      	bx	lr
	...

00003f78 <z_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    3f78:	f7fe b9b0 	b.w	22dc <SystemInit>
